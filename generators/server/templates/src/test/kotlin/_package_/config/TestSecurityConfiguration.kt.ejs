<%#
 Copyright 2013-2023 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://jhipster.github.io/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_ const reactivePrefix = reactive ? 'Reactive' : ''; _%>
package <%= packageName %>.config

import org.mockito.Mockito.mock

import org.springframework.boot.test.context.TestConfiguration
import org.springframework.context.annotation.Bean
import org.springframework.security.oauth2.client.InMemory<%= reactivePrefix %>OAuth2AuthorizedClientService
import org.springframework.security.oauth2.client.<%= reactivePrefix %>OAuth2AuthorizedClientService
import org.springframework.security.oauth2.client.registration.ClientRegistration
import org.springframework.security.oauth2.client.registration.<%= reactivePrefix %>ClientRegistrationRepository
import org.springframework.security.oauth2.client.registration.InMemory<%= reactivePrefix %>ClientRegistrationRepository
import org.springframework.security.oauth2.core.AuthorizationGrantType
import org.springframework.security.oauth2.core.ClientAuthenticationMethod
import org.springframework.security.oauth2.jwt.<%= reactivePrefix %>JwtDecoder
<%_ if (applicationTypeMonolith) { _%>
import org.springframework.context.annotation.Import
<%_ } _%>

/**
 * This class allows you to run unit and integration tests without an IdP.
 */
@TestConfiguration
<%_ if (applicationTypeMonolith) { _%>
@Import(OAuth2Configuration::class)
<%_ } _%>
class TestSecurityConfiguration {
    @Bean
    fun clientRegistration(): ClientRegistration {
        return clientRegistrationBuilder().build()
    }

    @Bean
    fun clientRegistrationRepository(clientRegistration: ClientRegistration): <%= reactivePrefix %>ClientRegistrationRepository  {
        return InMemory<%= reactivePrefix %>ClientRegistrationRepository(clientRegistration)
    }

    private fun clientRegistrationBuilder(): ClientRegistration.Builder {
        val metadata = mutableMapOf<String, Any>()
        metadata["end_session_endpoint"] = "https://jhipster.org/logout"

        return ClientRegistration.withRegistrationId("oidc")
            .issuerUri("{baseUrl}")
            .redirectUri("{baseUrl}/{action}/oauth2/code/{registrationId}")
            .clientAuthenticationMethod(ClientAuthenticationMethod.CLIENT_SECRET_BASIC)
            .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)
            .scope("read:user")
            .authorizationUri("https://jhipster.org/login/oauth/authorize")
            .tokenUri("https://jhipster.org/login/oauth/access_token")
            .jwkSetUri("https://jhipster.org/oauth/jwk")
            .userInfoUri("https://api.jhipster.org/user")
            .providerConfigurationMetadata(metadata)
            .userNameAttributeName("id")
            .clientName("Client Name")
            .clientId("client-id")
            .clientSecret("client-secret")
    }

    @Bean
    fun jwtDecoder(): <%= reactivePrefix %>JwtDecoder{
        return mock(<%= reactivePrefix %>JwtDecoder::class.java)
    }

    @Bean
    fun authorizedClientService(clientRegistrationRepository: <%= reactivePrefix %>ClientRegistrationRepository): <%= reactivePrefix %>OAuth2AuthorizedClientService  {
        return InMemory<%= reactivePrefix %>OAuth2AuthorizedClientService(clientRegistrationRepository)
    }
}
