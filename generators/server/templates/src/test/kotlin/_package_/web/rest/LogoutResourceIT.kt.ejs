<%#
 Copyright 2013-2023 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_ const reactivePrefix = reactive ? 'Reactive' : ''; _%>
package <%= packageName %>.web.rest

import <%= packageName %>.test.util.ID_TOKEN
import <%= packageName %>.test.util.authenticationToken
import <%= packageName %>.test.util.registerAuthenticationToken
<%_ if (reactive) { _%>
import org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers.*
<%_ } else { _%>
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.*
<%_ } _%>

import <%= packageName %>.IntegrationTest
import <%= packageName %>.security.USER
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.http.HttpHeaders
import org.springframework.http.MediaType
import org.springframework.security.oauth2.client.<% if (reactive) { %>Reactive<% } %>OAuth2AuthorizedClientService
import org.springframework.security.oauth2.client.registration.ClientRegistration
import org.springframework.security.oauth2.client.registration.<% if (reactive) { %>Reactive<% } %>ClientRegistrationRepository
import org.springframework.security.oauth2.core.oidc.OidcIdToken
<%_ if (reactive) { _%>
import org.springframework.context.ApplicationContext
import org.springframework.test.web.reactive.server.WebTestClient
<%_ } else { _%>
import org.springframework.security.core.context.SecurityContextHolder
import org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter
import org.springframework.test.web.servlet.MockMvc
import org.springframework.test.web.servlet.setup.MockMvcBuilders
import org.springframework.web.context.WebApplicationContext
<%_ } _%>

/**
 * Integration tests for the [LogoutResource] REST controller.
 */
@IntegrationTest
class LogoutResourceIT {

    @Autowired
    private lateinit var registrations: <% if (reactive) { %>Reactive<% } %>ClientRegistrationRepository

    @Autowired
    private lateinit var context: <% if (!reactive) { %>Web<% } %>ApplicationContext

    @Autowired
    private lateinit var authorizedClientService: <%= reactivePrefix %>OAuth2AuthorizedClientService

    @Autowired
    private lateinit var clientRegistration: ClientRegistration

    <%_ if (reactive) { _%>
    private lateinit var webTestClient: WebTestClient
    <%_ } else { _%>
    private lateinit var restLogoutMockMvc: MockMvc
    <%_ } _%>

    private lateinit var claims: Map<String, Any>

    @BeforeEach
    <% if (!reactive) { %>@Throws(Exception::class)<% } %>
    fun before() {
        val claims = mapOf(
            "groups" to listOf(USER),
            "sub" to 123
        )
        <%_ if (reactive) { _%>
        val springSecurity = springSecurity()
        val webTestClient: WebTestClient.MockServerSpec<*> = WebTestClient
            .bindToApplicationContext(context!!)
            .apply(springSecurity!!)
        <%_ } else { _%>
        SecurityContextHolder.getContext().authentication = registerAuthenticationToken(authorizedClientService, clientRegistration, authenticationToken(claims.toMutableMap()))
        val authInjector = SecurityContextHolderAwareRequestFilter()
        authInjector.afterPropertiesSet()

        restLogoutMockMvc = MockMvcBuilders.webAppContextSetup(this.context).build()
        <%_ } _%>
    }

<%# Removed this test case in OAuth + reactive due to https://github.com/spring-projects/spring-security/issues/8142 %>
<%_ if (!reactive) { _%>
    @Test
    <% if (!reactive) { %>@Throws(Exception::class)<% } %>
    fun getLogoutInformation() {
    val ORIGIN_URL = "http://localhost:8080"
    <%_ if (reactive) { _%>
        var logoutUrl = this.registrations.findByRegistrationId("oidc")
            .map { it.providerDetails.configurationMetadata["end_session_endpoint"].toString() }
            .block()
        logoutUrl = "$logoutUrl?id_token_hint=$ID_TOKEN&post_logout_redirect_uri=$ORIGIN_URL"
        this.webTestClient.mutateWith(csrf())
            .mutateWith(mockAuthentication(registerAuthenticationToken(authorizedClientService, clientRegistration, authenticationToken(claims))))
            .post().uri("http://localhost:8080/api/logout").header(HttpHeaders.ORIGIN, ORIGIN_URL).exchange()
            .expectStatus().isOk
            .expectHeader().contentType(MediaType.APPLICATION_JSON_VALUE)
            .expectBody()
            .jsonPath("$.logoutUrl").isEqualTo(logoutUrl)
    <%_ } else { _%>
        var logoutUrl = this.registrations.findByRegistrationId("oidc").providerDetails
            .configurationMetadata["end_session_endpoint"].toString()
        logoutUrl = "$logoutUrl?id_token_hint=$ID_TOKEN&post_logout_redirect_uri=$ORIGIN_URL"
        restLogoutMockMvc.perform(post("http://localhost:8080/api/logout").header(HttpHeaders.ORIGIN, ORIGIN_URL))
            .andExpect(status().isOk)
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
            .andExpect(jsonPath("\$.logoutUrl").value(logoutUrl))
    <%_ } _%>
    }
<%_ } _%>
}

