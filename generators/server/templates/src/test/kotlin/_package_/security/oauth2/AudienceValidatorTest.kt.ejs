<%#
 Copyright 2013-2023 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://jhipster.github.io/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.security.oauth2

import org.junit.jupiter.api.Test
import org.springframework.security.oauth2.jwt.Jwt

import org.assertj.core.api.Assertions.assertThat
import org.mockito.Mockito.mock
import org.mockito.Mockito.`when`

/**
 * Test class for the [AudienceValidator] utility class.
 */
class AudienceValidatorTest {

    private val validator = AudienceValidator(listOf("api://default"))

    @Test
    fun testInvalidAudience() {
        val claims = mutableMapOf("aud" to "bar")
        val badJwt: Jwt = mock(Jwt::class.java)
        `when`(badJwt.audience).thenReturn(claims.values.toMutableList())
        assertThat(validator.validate(badJwt).hasErrors()).isTrue
    }

    @Test
    fun testValidAudience() {
        val claims = mutableMapOf("aud" to "api://default")
        val jwt: Jwt = mock(Jwt::class.java)
        `when`(jwt.audience).thenReturn(claims.values.toMutableList())
        assertThat(validator.validate(jwt).hasErrors()).isFalse
    }
}
