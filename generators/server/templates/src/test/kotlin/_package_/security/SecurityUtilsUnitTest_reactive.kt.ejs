<%#
 Copyright 2013-2023 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License")
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.security

import org.junit.jupiter.api.AfterEach
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken
import org.springframework.security.core.GrantedAuthority
import org.springframework.security.core.authority.SimpleGrantedAuthority
import org.springframework.security.core.context.ReactiveSecurityContextHolder
import reactor.util.context.Context

<%_ if (authenticationTypeOauth2) { _%>
import java.time.Instant
<%_ } _%>

import org.assertj.core.api.Assertions.assertThat
<%_ if (authenticationTypeOauth2) { _%>
import org.springframework.security.oauth2.core.oidc.endpoint.OidcParameterNames.ID_TOKEN
<%_ } _%>

/**
 * Test class for the {@link SecurityUtils} utility class.
 */
class SecurityUtilsUnitTest {
    @Test
    fun testgetCurrentUserLogin() {
        val login = getCurrentUserLogin()
            .subscriberContext(
                ReactiveSecurityContextHolder.withAuthentication(
                    UsernamePasswordAuthenticationToken("admin", "admin")
                )
            )
            .block()
        assertThat(login).isEqualTo("admin")
    }
    <%_ if (authenticationTypeJwt) { _%>

    @Test
    fun testGetCurrentUserJWT() {
        val jwt = getCurrentUserJWT()
            .subscriberContext(
                ReactiveSecurityContextHolder.withAuthentication(
                    UsernamePasswordAuthenticationToken("admin", "token")
                )
            )
            .block()
        assertThat(jwt).isEqualTo("token")
    }
    <%_ } _%>

    @Test
    fun testIsAuthenticated() {
        val isAuthenticated = isAuthenticated()
            .subscriberContext(
                ReactiveSecurityContextHolder.withAuthentication(
                    UsernamePasswordAuthenticationToken("admin", "admin")
                )
            )
            .block()
        assertThat(isAuthenticated!!).isTrue
    }

    @Test
    fun testAnonymousIsNotAuthenticated() {
        val authorities = mutableListOf(SimpleGrantedAuthority(ANONYMOUS))
        val isAuthenticated = isAuthenticated()
            .subscriberContext(
                ReactiveSecurityContextHolder.withAuthentication(
                    UsernamePasswordAuthenticationToken("admin", "admin", authorities)
                )
            )
            .block()
        assertThat(isAuthenticated!!).isFalse
    }

    @Test
    fun testHasCurrentUserAnyOfAuthorities() {
        val authorities = listOf(SimpleGrantedAuthority(USER))
        val context = ReactiveSecurityContextHolder.withAuthentication(
            UsernamePasswordAuthenticationToken("admin", "admin", authorities)
        )
        var hasCurrentUserThisAuthority = hasCurrentUserAnyOfAuthorities(USER, ADMIN)
            .subscriberContext(context)
            .block()
        assertThat(hasCurrentUserThisAuthority).isTrue

        hasCurrentUserThisAuthority = hasCurrentUserAnyOfAuthorities(ANONYMOUS, ADMIN)
            .subscriberContext(context)
            .block()
        assertThat(hasCurrentUserThisAuthority).isFalse
    }

    @Test
    fun testHasCurrentUserNoneOfAuthorities() {
        val authorities = listOf(SimpleGrantedAuthority(USER))
        val context = ReactiveSecurityContextHolder.withAuthentication(
            UsernamePasswordAuthenticationToken("admin", "admin", authorities)
        )
        var hasCurrentUserThisAuthority = hasCurrentUserNoneOfAuthorities(USER, ADMIN)
            .subscriberContext(context)
            .block()
        assertThat(hasCurrentUserThisAuthority).isFalse

        hasCurrentUserThisAuthority = hasCurrentUserNoneOfAuthorities(ANONYMOUS, ADMIN)
            .subscriberContext(context)
            .block()
        assertThat(hasCurrentUserThisAuthority).isTrue
    }

    @Test
    fun testHasCurrentUserThisAuthority() {
        val authorities = mutableListOf(SimpleGrantedAuthority(USER))
        val context = ReactiveSecurityContextHolder.withAuthentication(
            UsernamePasswordAuthenticationToken("admin", "admin", authorities)
        )
        var hasCurrentUserThisAuthority = hasCurrentUserThisAuthority(USER)
            .subscriberContext(context)
            .block()
        assertThat(hasCurrentUserThisAuthority!!).isTrue

        hasCurrentUserThisAuthority = hasCurrentUserThisAuthority(ADMIN)
            .subscriberContext(context)
            .block()
        assertThat(hasCurrentUserThisAuthority!!).isFalse
    }
}
