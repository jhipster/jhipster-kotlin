<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.security

import org.springframework.boot.test.mock.mockito.MockBean
import org.springframework.mock.web.MockHttpServletRequest
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken
import org.springframework.security.core.authority.SimpleGrantedAuthority
import org.springframework.security.core.userdetails.User
import org.springframework.security.oauth2.common.DefaultOAuth2AccessToken
import org.springframework.security.oauth2.provider.OAuth2Authentication
import org.springframework.security.oauth2.provider.OAuth2Request
import org.springframework.security.oauth2.provider.token.ResourceServerTokenServices
import org.springframework.stereotype.Component
import org.springframework.test.web.servlet.request.RequestPostProcessor

import java.util.UUID

import org.mockito.BDDMockito.given

/**
 * A bean providing simple mocking of OAuth2 access tokens for security integration tests.
 */
@Component
class OAuth2TokenMockUtil {

    @MockBean
    private lateinit var tokenServices: ResourceServerTokenServices

    private fun createAuthentication(username: String, scopes: Set<String>, roles: Set<String>): OAuth2Authentication {
        val authorities = roles.map{ SimpleGrantedAuthority(it) }

        val principal = User(username, "test", true, true, true, true, authorities)
        val authentication = UsernamePasswordAuthenticationToken(principal, principal.password,
            principal.authorities)

        // Create the authorization request and OAuth2Authentication object
        val authRequest = OAuth2Request(null, "testClient", null, true, scopes, null, null, null, null)
        return OAuth2Authentication(authRequest, authentication)
    }

    @JvmOverloads
    fun oauth2Authentication(username: String, scopes: Set<String> = emptySet(), roles: Set<String> = emptySet()): RequestPostProcessor {
        val uuid = UUID.randomUUID().toString()

        given(tokenServices.loadAuthentication(uuid))
            .willReturn(createAuthentication(username, scopes, roles))

        given(tokenServices.readAccessToken(uuid)).willReturn(DefaultOAuth2AccessToken(uuid))

        return OAuth2PostProcessor(uuid)
    }

    class OAuth2PostProcessor(private val token: String) : RequestPostProcessor {

        override fun postProcessRequest(mockHttpServletRequest: MockHttpServletRequest): MockHttpServletRequest {
            mockHttpServletRequest.addHeader("Authorization", "Bearer $token")

            return mockHttpServletRequest
        }
    }
}
