<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://jhipster.github.io/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.security.oauth2

import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test

import javax.servlet.http.Cookie

import org.assertj.core.api.Assertions.assertThat

private const val COOKIE_NAME = "chocolate"
private const val COOKIE_VALUE = "yummy"
private const val BROWNIE_NAME = "brownie"

/**
 * Test the [CookieCollection].
 */
class CookieCollectionTest {
    private lateinit var cookie: Cookie
    private lateinit var cupsCookie: Cookie
    private lateinit var brownieCookie: Cookie

    @BeforeEach
    fun setUp() {
        cookie = Cookie(COOKIE_NAME, COOKIE_VALUE)
        cupsCookie = Cookie("cups", "delicious")
        brownieCookie = Cookie(BROWNIE_NAME, "mmh")
    }

    @Test
    fun size() {
        val cookies = CookieCollection()
        assertThat(cookies).hasSize(0)
        cookies.add(cookie)
        assertThat(cookies).hasSize(1)
    }

    @Test
    fun isEmpty() {
        val cookies = CookieCollection()
        assertThat(cookies).isEmpty()
        cookies.add(cookie)
        assertThat(cookies).isNotEmpty
    }

    @Test
    fun contains() {
        val cookies = CookieCollection(cookie)
        assertThat(cookies.contains(cookie)).isTrue()
        assertThat(cookies.contains(COOKIE_NAME)).isTrue()
        assertThat(cookies.contains("yuck")).isFalse()
    }

    @Test
    operator fun iterator() {
        val cookies = CookieCollection(cookie)
        val it = cookies.iterator()
        assertThat(it.hasNext()).isTrue()
        assertThat(it.next()).isEqualTo(cookie)
        assertThat(it.hasNext()).isFalse()
    }

    @Test
    fun toArray() {
        val cookies = CookieCollection(cookie)
        val array = cookies.toArray()
        assertThat(array).hasSameSizeAs(cookies)
        assertThat(array[0]).isEqualTo(cookie)
    }

    @Test
    fun toArray1() {
        val cookies = CookieCollection(cookie)
        val array = cookies.toArray()
        assertThat(array).hasSameSizeAs(cookies)
        assertThat(array[0]).isEqualTo(cookie)
    }

    @Test
    fun add() {
        val cookies = CookieCollection(cookie)
        val newCookie = Cookie(BROWNIE_NAME, "mmh")
        cookies.add(newCookie)
        assertThat(cookies).hasSize(2)
        assertThat(cookies.contains(newCookie)).isTrue()
        assertThat(cookies.contains(BROWNIE_NAME)).isTrue()
    }

    @Test
    fun addAgain() {
        val cookies = CookieCollection(cookie, brownieCookie, cupsCookie)
        val white = Cookie(COOKIE_NAME, "white")
        val modified = cookies.add(white)
        assertThat(modified).isTrue()
        assertThat(cookies[COOKIE_NAME]).isEqualTo(white)
        assertThat(cookies.contains(white)).isTrue()
        assertThat(cookies.contains(cookie)).isFalse()
        assertThat(cookies.contains(COOKIE_NAME)).isTrue()
    }

    @Test
    fun get() {
        val cookies = CookieCollection(cookie, brownieCookie, cupsCookie)
        val c = cookies[COOKIE_NAME]
        assertThat(c).isNotNull
        assertThat(c).isEqualTo(cookie)
    }

    @Test
    fun remove() {
        val cookies = CookieCollection(cookie, brownieCookie, cupsCookie)
        cookies.remove(cookie)
        assertThat(cookies).hasSize(2)
        assertThat(cookies.contains(cookie)).isFalse()
        assertThat(cookies.contains(COOKIE_NAME)).isFalse()
        assertThat(cookies.contains(brownieCookie)).isTrue()
        assertThat(cookies.contains(BROWNIE_NAME)).isTrue()
    }

    @Test
    fun containsAll() {
        val content = listOf(cookie, brownieCookie)
        val cookies = CookieCollection(content)
        assertThat(cookies.containsAll(content)).isTrue()
        assertThat(cookies.containsAll(listOf(cookie))).isTrue()
        assertThat(cookies.containsAll(listOf(cookie, brownieCookie, cupsCookie))).isFalse()
    }

    @Test
    fun addAll() {
        val cookies = CookieCollection()
        val content = listOf(cookie, brownieCookie, cupsCookie)
        var modified = cookies.addAll(content)
        assertThat(modified).isTrue()
        assertThat(cookies).hasSize(3)
        assertThat(cookies).containsAll(content)
        modified = cookies.addAll(listOf())
        assertThat(modified).isFalse()
    }

    @Test
    fun addAllEmpty() {
        val cookies = CookieCollection(cookie, brownieCookie, cupsCookie)
        val modified = cookies.addAll(listOf())
        assertThat(modified).isFalse()
        assertThat(cookies).contains(cookie, brownieCookie, cupsCookie)
    }

    @Test
    fun removeAll() {
        val cookies = CookieCollection(cookie, brownieCookie, cupsCookie)
        val modified = cookies.removeAll(listOf(brownieCookie, cupsCookie))
        assertThat(modified).isTrue()
        assertThat(cookies).hasSize(1)
        assertThat(cookies).doesNotContain(brownieCookie, cupsCookie)
    }

    @Test
    fun removeAllEmpty() {
        val cookies = CookieCollection(cookie, brownieCookie, cupsCookie)
        val modified = cookies.removeAll(listOf<String>())
        assertThat(modified).isFalse()
        assertThat(cookies).contains(cookie, brownieCookie, cupsCookie)
    }

    @Test
    fun removeAllByName() {
        val cookies = CookieCollection(cookie, brownieCookie, cupsCookie)
        val modified = cookies.removeAll(listOf(COOKIE_NAME, BROWNIE_NAME))
        assertThat(modified).isTrue()
        assertThat(cookies).hasSize(1)
        assertThat(cookies).doesNotContain(brownieCookie, cookie)
    }

    @Test
    fun retainAll() {
        val cookies = CookieCollection(cookie, brownieCookie, cupsCookie)
        val content = listOf(cookie, brownieCookie)
        var modified = cookies.retainAll(content)
        assertThat(modified).isTrue()
        assertThat(cookies).hasSize(2)
        assertThat(cookies).containsAll(content)
        assertThat(cookies).doesNotContain(cupsCookie)
        modified = cookies.retainAll(content)
        assertThat(modified).isFalse()
    }

    @Test
    fun clear() {
        val cookies = CookieCollection(cookie)
        cookies.clear()
        assertThat(cookies).isEmpty()
    }
}
