<%#
 Copyright 2013-2024 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License")
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.security.jwt

import <%= packageName %>.security.ANONYMOUS
import <%= packageName %>.management.SecurityMetersService

import io.jsonwebtoken.Jwts
import io.jsonwebtoken.SignatureAlgorithm
import io.jsonwebtoken.io.Decoders
import io.jsonwebtoken.security.Keys

import io.micrometer.core.instrument.Counter
import io.micrometer.core.instrument.MeterRegistry
import io.micrometer.core.instrument.simple.SimpleMeterRegistry

import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test

import org.springframework.security.authentication.UsernamePasswordAuthenticationToken
import org.springframework.security.core.Authentication
import org.springframework.security.core.GrantedAuthority
import org.springframework.security.core.authority.SimpleGrantedAuthority
import org.springframework.test.util.ReflectionTestUtils
import tech.jhipster.config.JHipsterProperties

import java.security.Key
import java.util.Date

import org.assertj.core.api.Assertions.assertThat

private const val ONE_MINUTE = 60000
private const val INVALID_TOKENS_METER_EXPECTED_NAME = "security.authentication.invalid-tokens"

class TokenProviderSecurityMetersTests {

    private lateinit var meterRegistry: MeterRegistry

    private lateinit var tokenProvider: TokenProvider


    @BeforeEach
    fun setup() {
        val jHipsterProperties = JHipsterProperties()
        val base64Secret = "fd54a45s65fds737b9aafcb3412e07ed99b267f33413274720ddbb7f6c5e64e9f14075f2d7ed041592f0b7657baf8"
        jHipsterProperties.security.authentication.jwt.base64Secret = base64Secret

        meterRegistry = SimpleMeterRegistry()

        val securityMetersService = SecurityMetersService(meterRegistry)

        tokenProvider = TokenProvider(jHipsterProperties, securityMetersService)
        val key = Keys.hmacShaKeyFor(Decoders.BASE64.decode(base64Secret))

        ReflectionTestUtils.setField(tokenProvider, "key", key)
        ReflectionTestUtils.setField(tokenProvider, "tokenValidityInMilliseconds", ONE_MINUTE)
    }

    @Test
    fun testValidTokenShouldNotCountAnything() {
        val counters = meterRegistry.find(INVALID_TOKENS_METER_EXPECTED_NAME).counters()

        assertThat(aggregate(counters)).isZero()

        val validToken = createValidToken()

        tokenProvider.validateToken(validToken)

        assertThat(aggregate(counters)).isZero()
    }

    @Test
    fun testTokenExpiredCount() {
        assertThat(meterRegistry.get(INVALID_TOKENS_METER_EXPECTED_NAME)
            .tag("cause", "expired")
            .counter().count()).isZero()

        val expiredToken = createExpiredToken()

        tokenProvider.validateToken(expiredToken)

        assertThat(meterRegistry.get(INVALID_TOKENS_METER_EXPECTED_NAME)
            .tag("cause", "expired")
            .counter().count()).isEqualTo(1.0)
    }

    @Test
    fun testTokenUnsupportedCount() {
        assertThat(meterRegistry.get(INVALID_TOKENS_METER_EXPECTED_NAME)
            .tag("cause", "unsupported")
            .counter().count()).isZero()

        val unsupportedToken = createUnsupportedToken()

        tokenProvider.validateToken(unsupportedToken)

        assertThat(meterRegistry.get(INVALID_TOKENS_METER_EXPECTED_NAME)
            .tag("cause", "unsupported")
            .counter().count()).isEqualTo(1.0)
    }

    @Test
    fun testTokenSignatureInvalidCount() {
        assertThat(meterRegistry.get(INVALID_TOKENS_METER_EXPECTED_NAME)
            .tag("cause", "invalid-signature")
            .counter().count()).isZero()

        val tokenWithDifferentSignature = createTokenWithDifferentSignature()

        tokenProvider.validateToken(tokenWithDifferentSignature)

        assertThat(meterRegistry.get(INVALID_TOKENS_METER_EXPECTED_NAME)
            .tag("cause", "invalid-signature")
            .counter().count()).isEqualTo(1.0)
    }

    @Test
    fun testTokenMalformedCount() {
        assertThat(meterRegistry.get(INVALID_TOKENS_METER_EXPECTED_NAME)
            .tag("cause", "malformed")
            .counter().count()).isZero()

        val malformedToken = createMalformedToken()

        tokenProvider.validateToken(malformedToken)

        assertThat(meterRegistry.get(INVALID_TOKENS_METER_EXPECTED_NAME)
            .tag("cause", "malformed")
            .counter().count()).isEqualTo(1.0)
    }

    private fun createValidToken(): String {
        val authentication = createAuthentication()

        return tokenProvider.createToken(authentication, false)
    }

    private fun createExpiredToken(): String {
        ReflectionTestUtils.setField(tokenProvider, "tokenValidityInMilliseconds", -ONE_MINUTE)

        val authentication = createAuthentication()

        return tokenProvider.createToken(authentication, false)
    }

    private fun createAuthentication(): Authentication {
        val authorities = listOf(SimpleGrantedAuthority(ANONYMOUS))
        return UsernamePasswordAuthenticationToken("anonymous", "anonymous", authorities)
    }

    private fun createUnsupportedToken(): String {
        val key = ReflectionTestUtils.getField(tokenProvider, "key") as Key

        return Jwts.builder().setPayload("payload").signWith(key, SignatureAlgorithm.HS256).compact()
    }

    private fun createMalformedToken(): String {
        val validToken = createValidToken()

        return "X$validToken"
    }

    private fun createTokenWithDifferentSignature(): String {
        val otherKey = Keys.hmacShaKeyFor(
            Decoders.BASE64.decode("Xfd54a45s65fds737b9aafcb3412e07ed99b267f33413274720ddbb7f6c5e64e9f14075f2d7ed041592f0b7657baf8")
        )

        return Jwts
            .builder()
            .setSubject("anonymous")
            .signWith(otherKey, SignatureAlgorithm.HS512)
            .setExpiration(Date(Date().time + ONE_MINUTE))
            .compact()
    }

    private fun aggregate(counters: Collection<Counter>): Double {
        return counters.sumOf(Counter::count)
    }

}
