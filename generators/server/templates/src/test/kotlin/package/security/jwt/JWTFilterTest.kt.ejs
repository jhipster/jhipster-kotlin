<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.security.jwt

import <%= packageName %>.security.USER
import tech.jhipster.config.JHipsterProperties
import io.jsonwebtoken.io.Decoders
import io.jsonwebtoken.security.Keys

import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
<%_ if (reactive) { _%>
import org.springframework.mock.http.server.reactive.MockServerHttpRequest
import org.springframework.mock.web.server.MockServerWebExchange
<%_ } _%>
<%_ if (!reactive) { _%>
import org.springframework.http.HttpStatus
import org.springframework.mock.web.MockFilterChain
import org.springframework.mock.web.MockHttpServletRequest
import org.springframework.mock.web.MockHttpServletResponse
<%_ } _%>
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken
import org.springframework.security.core.authority.SimpleGrantedAuthority
<%_ if (reactive) { _%>
import org.springframework.security.core.context.ReactiveSecurityContextHolder
import org.springframework.security.core.context.SecurityContext
<%_ } else { _%>
import org.springframework.security.core.context.SecurityContextHolder
<%_ } _%>
import org.springframework.test.util.ReflectionTestUtils
<%_ if (reactive) { _%>
import reactor.core.publisher.Mono
<%_ } _%>

import org.assertj.core.api.Assertions.assertThat

class JWTFilterTest {

    private lateinit var tokenProvider: TokenProvider

    private lateinit var jwtFilter: JWTFilter

    @BeforeEach
    fun setup() {
        val jHipsterProperties = JHipsterProperties()
        tokenProvider = TokenProvider(jHipsterProperties)
        ReflectionTestUtils.setField(
            tokenProvider, "key",
            Keys.hmacShaKeyFor(
                Decoders.BASE64
                    .decode("fd54a45s65fds737b9aafcb3412e07ed99b267f33413274720ddbb7f6c5e64e9f14075f2d7ed041592f0b7657baf8")
            )
        )

        ReflectionTestUtils.setField(tokenProvider, "tokenValidityInMilliseconds", 60000)
        jwtFilter = JWTFilter(tokenProvider)
        <%_ if (!reactive) { _%>
        SecurityContextHolder.getContext().authentication = null
        <%_ } _%>
    }

    @Test
    <%_ if (!reactive) { _%>
    @Throws(Exception::class)
    <%_ } _%>
    fun testJWTFilter() {
        val authentication = UsernamePasswordAuthenticationToken(
            "test-user",
            "test-password",
            listOf(SimpleGrantedAuthority(USER))
        )
        val jwt = tokenProvider.createToken(authentication, false)
        <%_ if (!reactive) { _%>
        val request = MockHttpServletRequest()
        request.addHeader(JWTFilter.AUTHORIZATION_HEADER, "Bearer $jwt")
        request.requestURI = "/api/test"
        val response = MockHttpServletResponse()
        val filterChain = MockFilterChain()
        jwtFilter.doFilter(request, response, filterChain)
        assertThat(response.status).isEqualTo(HttpStatus.OK.value())
        assertThat(SecurityContextHolder.getContext().authentication.name).isEqualTo("test-user")
        assertThat(SecurityContextHolder.getContext().authentication.credentials.toString()).isEqualTo(jwt)
        <%_ } else { _%>
        val request = MockServerHttpRequest
            .get("/api/test")
            .header(JWTFilter.AUTHORIZATION_HEADER, "Bearer $jwt")
        val exchange = MockServerWebExchange.from(request)
        jwtFilter.filter(exchange) {
            Mono.subscriberContext()
                .flatMap { ReactiveSecurityContextHolder.getContext() }
                .map(SecurityContext::getAuthentication)
                .doOnSuccess { auth -> assertThat(auth.name).isEqualTo("test-user") }
                .doOnSuccess { auth -> assertThat(auth.credentials.toString()).isEqualTo(jwt) }
                .then()
        }.block()
        <%_ } _%>
    }

    @Test
    <%_ if (!reactive) { _%>
    @Throws(Exception::class)
    <%_ } _%>
    fun testJWTFilterInvalidToken() {
        val jwt = "wrong_jwt"
        <%_ if (!reactive) { _%>
        val request = MockHttpServletRequest()
        request.addHeader(JWTFilter.AUTHORIZATION_HEADER, "Bearer $jwt")
        request.requestURI = "/api/test"
        val response = MockHttpServletResponse()
        val filterChain = MockFilterChain()
        jwtFilter.doFilter(request, response, filterChain)
        assertThat(response.status).isEqualTo(HttpStatus.OK.value())
        assertThat(SecurityContextHolder.getContext().authentication).isNull()
        <%_ } else { _%>
        val request = MockServerHttpRequest
            .get("/api/test")
            .header(JWTFilter.AUTHORIZATION_HEADER, "Bearer $jwt")
        val exchange = MockServerWebExchange.from(request)
        jwtFilter.filter(exchange) {
            Mono.subscriberContext()
                .flatMap { ReactiveSecurityContextHolder.getContext() }
                .map(SecurityContext::getAuthentication)
                .doOnSuccess { auth -> assertThat(auth).isNull() }
                .then()
        }.block()
        <%_ } _%>
    }

    @Test
    <%_ if (!reactive) { _%>
    @Throws(Exception::class)
    <%_ } _%>
    fun testJWTFilterMissingAuthorization() {
        <%_ if (!reactive) { _%>
        val request = MockHttpServletRequest()
        request.addHeader(JWTFilter.AUTHORIZATION_HEADER, "Bearer ")
        request.requestURI = "/api/test"
        val response = MockHttpServletResponse()
        val filterChain = MockFilterChain()
        jwtFilter.doFilter(request, response, filterChain)
        assertThat(response.status).isEqualTo(HttpStatus.OK.value())
        assertThat(SecurityContextHolder.getContext().authentication).isNull()
        <%_ } else { _%>
        val request = MockServerHttpRequest
            .get("/api/test")
        val exchange = MockServerWebExchange.from(request)
        jwtFilter.filter(exchange) {
            Mono.subscriberContext()
                .flatMap { ReactiveSecurityContextHolder.getContext() }
                .map(SecurityContext::getAuthentication)
                .doOnSuccess { auth -> assertThat(auth).isNull() }
                .then()
        }.block()
        <%_ } _%>
    }

    @Test
    <%_ if (!reactive) { _%>
    @Throws(Exception::class)
    <%_ } _%>
    fun testJWTFilterMissingToken() {
        <%_ if (!reactive) { _%>
        val request = MockHttpServletRequest()
        request.addHeader(JWTFilter.AUTHORIZATION_HEADER, "Bearer ")
        request.requestURI = "/api/test"
        val response = MockHttpServletResponse()
        val filterChain = MockFilterChain()
        jwtFilter.doFilter(request, response, filterChain)
        assertThat(response.status).isEqualTo(HttpStatus.OK.value())
        assertThat(SecurityContextHolder.getContext().authentication).isNull()
        <%_ } else { _%>
        val request = MockServerHttpRequest
            .get("/api/test")
            .header(JWTFilter.AUTHORIZATION_HEADER, "Bearer ")
        val exchange = MockServerWebExchange.from(request)
        jwtFilter.filter(exchange) {
            Mono.subscriberContext()
                .flatMap { ReactiveSecurityContextHolder.getContext() }
                .map(SecurityContext::getAuthentication)
                .doOnSuccess { auth -> assertThat(auth).isNull() }
                .then()
        }.block()
        <%_ } _%>
    }

    @Test
    <%_ if (!reactive) { _%>
    @Throws(Exception::class)
    <%_ } _%>
    fun testJWTFilterWrongScheme() {
        val authentication = UsernamePasswordAuthenticationToken(
            "test-user",
            "test-password",
            listOf(SimpleGrantedAuthority(USER))
        )
        val jwt = tokenProvider.createToken(authentication, false)
        <%_ if (!reactive) { _%>
        val request = MockHttpServletRequest()
        request.addHeader(JWTFilter.AUTHORIZATION_HEADER, "Basic $jwt")
        request.requestURI = "/api/test"
        val response = MockHttpServletResponse()
        val filterChain = MockFilterChain()
        jwtFilter.doFilter(request, response, filterChain)
        assertThat(response.status).isEqualTo(HttpStatus.OK.value())
        assertThat(SecurityContextHolder.getContext().authentication).isNull()
        <%_ } else { _%>
        val request = MockServerHttpRequest
            .get("/api/test")
            .header(JWTFilter.AUTHORIZATION_HEADER, "Basic $jwt")
        val exchange = MockServerWebExchange.from(request)
        jwtFilter.filter(exchange) {
            Mono.subscriberContext()
                .flatMap { ReactiveSecurityContextHolder.getContext() }
                .map(SecurityContext::getAuthentication)
                .doOnSuccess { auth -> assertThat(auth).isNull() }
                .then()
        }.block()
        <%_ } _%>
    }

}
