<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://jhipster.github.io/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.security.oauth2

import <%=packageName%>.config.oauth2.OAuth2Properties
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.springframework.mock.web.MockHttpServletRequest
import org.springframework.test.util.ReflectionTestUtils

import org.assertj.core.api.Assertions.assertThat

private const val GET_COOKIE_DOMAIN_METHOD = "getCookieDomain"

/**
 * Tests helper functions around OAuth2 Cookies.
 *
 * @see OAuth2CookieHelper
 */
class OAuth2CookieHelperTest {

    private lateinit var oAuth2Properties: OAuth2Properties
    private lateinit var cookieHelper: OAuth2CookieHelper

    @BeforeEach
    @Throws(NoSuchMethodException::class)
    fun setUp() {
        oAuth2Properties = OAuth2Properties()
        cookieHelper = OAuth2CookieHelper(oAuth2Properties)
    }

    @Test
    fun testLocalhostDomain() {
        val request = MockHttpServletRequest()
        request.serverName = "localhost"
        val name = ReflectionTestUtils.invokeMethod<String>(cookieHelper, GET_COOKIE_DOMAIN_METHOD, request)
        assertThat(name).isNull()
    }

    @Test
    fun testComDomain() {
        val request = MockHttpServletRequest()
        request.serverName = "test.com"
        val name = ReflectionTestUtils.invokeMethod<String>(cookieHelper, GET_COOKIE_DOMAIN_METHOD, request)
        assertThat(name).isNull() // already top-level domain
    }

    @Test
    fun testWwwDomainCom() {
        val request = MockHttpServletRequest()
        request.serverName = "www.test.com"
        val name = ReflectionTestUtils.invokeMethod<String>(cookieHelper, GET_COOKIE_DOMAIN_METHOD, request)
        assertThat(name).isNull()
    }

    @Test
    fun testComSubDomain() {
        val request = MockHttpServletRequest()
        request.serverName = "abc.test.com"
        val name = ReflectionTestUtils.invokeMethod<String>(cookieHelper, GET_COOKIE_DOMAIN_METHOD, request)
        assertThat(name).isEqualTo(".test.com")
    }

    @Test
    fun testWwwSubDomainCom() {
        val request = MockHttpServletRequest()
        request.serverName = "www.abc.test.com"
        val name = ReflectionTestUtils.invokeMethod<String>(cookieHelper, GET_COOKIE_DOMAIN_METHOD, request)
        assertThat(name).isEqualTo(".test.com")
    }

    @Test
    fun testCoUkDomain() {
        val request = MockHttpServletRequest()
        request.serverName = "test.co.uk"
        val name = ReflectionTestUtils.invokeMethod<String>(cookieHelper, GET_COOKIE_DOMAIN_METHOD, request)
        assertThat(name).isNull() // already top-level domain
    }

    @Test
    fun testCoUkSubDomain() {
        val request = MockHttpServletRequest()
        request.serverName = "abc.test.co.uk"
        val name = ReflectionTestUtils.invokeMethod<String>(cookieHelper, GET_COOKIE_DOMAIN_METHOD, request)
        assertThat(name).isEqualTo(".test.co.uk")
    }

    @Test
    fun testNestedDomain() {
        val request = MockHttpServletRequest()
        request.serverName = "abc.xyu.test.co.uk"
        val name = ReflectionTestUtils.invokeMethod<String>(cookieHelper, GET_COOKIE_DOMAIN_METHOD, request)
        assertThat(name).isEqualTo(".test.co.uk")
    }

    @Test
    fun testIpAddress() {
        val request = MockHttpServletRequest()
        request.serverName = "127.0.0.1"
        val name = ReflectionTestUtils.invokeMethod<String>(cookieHelper, GET_COOKIE_DOMAIN_METHOD, request)
        assertThat(name).isNull()
    }
}
