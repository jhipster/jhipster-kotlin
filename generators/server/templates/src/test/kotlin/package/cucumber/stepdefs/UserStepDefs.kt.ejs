<%#
 Copyright 2013-2024 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.cucumber.stepdefs

import io.cucumber.java.Before
import io.cucumber.java.en.Then
import io.cucumber.java.en.When

import org.springframework.beans.factory.annotation.Autowired
import org.springframework.http.MediaType
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken
import org.springframework.security.core.Authentication
import org.springframework.security.core.GrantedAuthority
import org.springframework.security.core.authority.SimpleGrantedAuthority
import org.springframework.security.core.context.SecurityContext
import org.springframework.security.core.context.SecurityContextHolder
import org.springframework.security.core.userdetails.User

import <%= packageName %>.web.rest.UserResource
import <%= packageName %>.security.ADMIN

<%_ if (reactive) { _%>
import org.springframework.test.web.reactive.server.WebTestClient
import org.hamcrest.Matchers.`is`
<%_ } else { _%>
import org.springframework.test.web.servlet.setup.MockMvcBuilders
import org.springframework.test.web.servlet.MockMvc

import org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.*
<%_ } _%>

class UserStepDefs: StepDefs() {

    @Autowired
    private lateinit var userResource: UserResource



    <%_ if (reactive) { _%>
    private lateinit var userResourceMock: WebTestClient
    <%_ } else { _%>
    private lateinit var userResourceMock: MockMvc
    <%_ } _%>

    @Before
    fun setup() {
        val grantedAuthorities = mutableListOf<GrantedAuthority>()
        grantedAuthorities.add(SimpleGrantedAuthority(ADMIN))
        val principal = User("username", "", true, true, true, true, grantedAuthorities)
        val authentication = UsernamePasswordAuthenticationToken(
            principal,
            principal.password,
            principal.authorities
        )
        val context = SecurityContextHolder.createEmptyContext()
        context.setAuthentication(authentication)
        SecurityContextHolder.setContext(context)
        <%_ if (reactive) { _%>
        userResourceMock = WebTestClient.bindToController(userResource).build()
        <%_ } else { _%>
        userResourceMock = MockMvcBuilders.standaloneSetup(userResource).build()
        <%_ } _%>
    }

    @When("I search user {string}")
    fun i_search_user(userId: String) {
        <%_ if (reactive) { _%>
        actions = userResourceMock.get().uri("/api/admin/users/" + userId).accept(MediaType.APPLICATION_JSON).exchange()
        <%_ } else { _%>
        actions = userResourceMock.perform(get("/api/admin/users/" + userId).accept(MediaType.APPLICATION_JSON))
        <%_ } _%>
    }

    @Then("the user is found")
    fun the_user_is_found() {
<%_ if (reactive) { _%>
        actions?.let {
            it.expectStatus().isOk
                .expectHeader().contentTypeCompatibleWith(MediaType.APPLICATION_JSON_VALUE)
        }
<%_ } else { _%>
        actions?.let {
            it.andExpect(status().isOk)
                .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
        }
<%_ } _%>
    }

    @Then("his last name is {string}")
    fun his_last_name_is(lastName: String) {
        <%_ if (reactive) { _%>
        actions?.let {
            it.expectBody().jsonPath("\$.lastName").value(`is`(lastName))
        }
        <%_ } else { _%>
        actions?.let { it.andExpect(jsonPath("\$.lastName").value(lastName)) }
        <%_ } _%>

    }

}
