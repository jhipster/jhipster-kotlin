<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.service.mapper

import <%= packageName %>.domain.<%= asEntity('User') %>
import <%= packageName %>.service.dto.<%= asDto('AdminUser') %>
import <%= packageName %>.service.dto.<%= asDto('User') %>
<%_ if (authenticationType !== 'oauth2') { _%>
import org.apache.commons.lang3.RandomStringUtils
<%_ } _%>
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test

import org.assertj.core.api.Assertions.assertThat
import kotlin.test.assertNotNull
import kotlin.test.assertNull

private const val DEFAULT_LOGIN = "johndoe"
<%_ if (databaseType === 'sql' && authenticationType !== 'oauth2') { _%>
private const val DEFAULT_ID = 1L
<%_ } else if (databaseType === 'couchbase'){ _%>
private const val DEFAULT_ID = <%= asEntity('User') %>.PREFIX + DEFAULT_LOGIN
<%_ } else { _%>
private const val DEFAULT_ID = "id1"
<%_ } _%>

/**
 * Unit tests for [UserMapper].
 */
class UserMapperTest {

    private lateinit var userMapper: UserMapper

    private lateinit var user: <%= asEntity('User') %>
    private lateinit var userDto: <%= asDto('AdminUser') %>

    @BeforeEach
    fun init() {
        userMapper = UserMapper()
        user = <%= asEntity('User') %>(
            login = DEFAULT_LOGIN,
            <%_ if (authenticationType !== 'oauth2') { _%>
            password = RandomStringUtils.random(60),
            <%_ } _%>
            activated = true,
            email = "johndoe@localhost",
            firstName = "john",
            lastName = "doe",
            <%_ if (databaseType !== 'cassandra') { _%>
            imageUrl = "image_url",
            <%_ } _%>
            langKey = "en"
        )

        userDto = <%= asDto('AdminUser') %>(user)
    }

    @Test
    fun usersToUserDTOsShouldMapOnlyNonNullUsers() {
        val users = listOf(user, null)

        val userDTOS = userMapper.usersToUserDTOs(users)

        assertThat(userDTOS).isNotEmpty.size().isEqualTo(1)
    }

    @Test
    fun userDTOsToUsersShouldMapOnlyNonNullUsers() {
        val usersDto = mutableListOf(userDto, null)

        val users = userMapper.userDTOsToUsers(usersDto)

        assertThat(users).isNotEmpty.size().isEqualTo(1)
    }

    @Test
    fun userDTOsToUsersWithAuthoritiesStringShouldMapToUsersWithAuthoritiesDomain() {
        userDto.authorities = setOf("ADMIN")

        val usersDto = listOf(userDto)

        val users = userMapper.userDTOsToUsers(usersDto)

        assertThat(users).isNotEmpty.size().isEqualTo(1)
        assertThat(users[0].authorities).isNotNull
        assertThat(users[0].authorities).isNotEmpty
        <%_ if (databaseType === 'sql' || databaseType === 'mongodb') { _%>
        assertThat(users[0].authorities.first().name).isEqualTo("ADMIN")
        <%_ } _%>
        <%_ if (databaseType === 'cassandra' || databaseType === 'couchbase') { _%>
        assertThat(users[0].authorities.first()).isEqualTo("ADMIN")
        <%_ } _%>
    }

    @Test
    fun userDTOsToUsersMapWithNullAuthoritiesStringShouldReturnUserWithEmptyAuthorities() {
        userDto.authorities = null

        val usersDto = listOf(userDto)

        val users = userMapper.userDTOsToUsers(usersDto)

        assertThat(users).isNotEmpty.size().isEqualTo(1)
        assertThat(users[0].authorities).isNotNull
        assertThat(users[0].authorities).isEmpty()
    }

    @Test
    fun userDTOToUserMapWithAuthoritiesStringShouldReturnUserWithAuthorities() {
        userDto.authorities = setOf("ADMIN")

        val user = userMapper.userDTOToUser(userDto)

        assertNotNull(user)
        assertThat(user.authorities).isNotNull
        assertThat(user.authorities).isNotEmpty
        <%_ if (databaseType === 'sql' || databaseType === 'mongodb') { _%>
        assertThat(user.authorities.first().name).isEqualTo("ADMIN")
        <%_ } _%>
        <%_ if (databaseType === 'cassandra' || databaseType === 'couchbase') { _%>
        assertThat(user.authorities.first()).isEqualTo("ADMIN")
        <%_ } _%>
    }

    @Test
    fun userDTOToUserMapWithNullAuthoritiesStringShouldReturnUserWithEmptyAuthorities() {
        userDto.authorities = null

        val user = userMapper.userDTOToUser(userDto)

        assertNotNull(user)
        assertThat(user.authorities).isNotNull
        assertThat(user.authorities).isEmpty()
    }

    @Test
    fun userDTOToUserMapWithNullUserShouldReturnNull() {
        assertNull(userMapper.userDTOToUser(null))
    }

    @Test
    fun testUserFromId() {
        assertThat(userMapper.userFromId(DEFAULT_ID)?.id).isEqualTo(DEFAULT_ID)
        assertNull(userMapper.userFromId(null))
    }
}
