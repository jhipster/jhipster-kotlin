<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.service

<%_ if (databaseType === 'cassandra') { _%>
import <%= packageName %>.AbstractCassandraTest
<%_ } _%>
<%_ if (cacheProvider === 'redis') { _%>
import <%= packageName %>.RedisTestContainerExtension
<%_ } _%>
<%_ if (databaseType === 'neo4j') { _%>
import <%= packageName %>.AbstractNeo4jIT
<%_ } _%>
import <%= packageName %>.<%= mainClass %>
<%_ if (databaseType === 'sql' && reactive) { _%>
import <%= packageName %>.config.SYSTEM_ACCOUNT
<%_ } _%>
import <%= packageName %>.config.ANONYMOUS_USER
import <%= packageName %>.config.DEFAULT_LANGUAGE
<%_ if (authenticationType === 'oauth2') { _%>
import <%= packageName %>.config.TestSecurityConfiguration
<%_ } _%>
<%_ if ((databaseType === 'sql' || databaseType === 'mongodb' || databaseType === 'neo4j' || databaseType === 'couchbase') && authenticationType === 'session' && !reactive) { _%>
import <%= packageName %>.domain.PersistentToken
<%_ } _%>
<%_ if (databaseType !== 'no') { _%>
import <%= packageName %>.domain.<%= asEntity('User') %>
<%_ } _%>
<%_ if ((databaseType === 'sql' || databaseType === 'mongodb' || databaseType === 'neo4j' || databaseType === 'couchbase') && authenticationType === 'session' && !reactive) { _%>
import <%= packageName %>.repository.PersistentTokenRepository
<%_ } _%>
<%_ if (searchEngine === 'elasticsearch') { _%>
import <%= packageName %>.repository.search.UserSearchRepository
<%_ } _%>
<%_ if (databaseType !== 'no') { _%>
import <%= packageName %>.repository.UserRepository
<%_ } _%>
<%_ if (authenticationType === 'oauth2') { _%>
import <%= packageName %>.security.ANONYMOUS
<%_ } _%>
<%_ if (authenticationType !== 'oauth2' && (databaseType === 'sql' || databaseType === 'mongodb' || databaseType === 'neo4j' || databaseType === 'couchbase')) { _%>
import tech.jhipster.security.RandomUtil
<%_ } _%>

<%_ if (authenticationType !== 'oauth2') { _%>
import org.apache.commons.lang3.RandomStringUtils
<%_ } _%>
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
<%_ if (cacheProvider === 'redis') { _%>
import org.junit.jupiter.api.extension.ExtendWith
<%_ } _%>
<%_ if (databaseType === 'neo4j') { _%>
import org.junit.jupiter.api.extension.ExtendWith
<%_ } _%>
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.context.SpringBootTest
<%_ if (databaseType === 'sql' && !reactive && authenticationType !== 'oauth2') { _%>
import org.springframework.boot.test.mock.mockito.MockBean
import org.springframework.data.auditing.AuditingHandler
import org.springframework.data.auditing.DateTimeProvider
<%_ } _%>
<%_ if (databaseType === 'sql' || databaseType === 'mongodb' || databaseType === 'neo4j' || databaseType === 'couchbase') { _%>
import org.springframework.data.domain.PageRequest
<%_ } _%>
<%_ if (authenticationType === 'oauth2') { _%>
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken
import org.springframework.security.core.GrantedAuthority
import org.springframework.security.core.authority.SimpleGrantedAuthority
import org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken
import org.springframework.security.oauth2.core.user.DefaultOAuth2User
import org.springframework.security.oauth2.core.user.OAuth2User
<%_ } _%>
<%_ if (databaseType === 'couchbase') { _%>
import org.springframework.security.test.context.support.WithAnonymousUser
<%_ } _%>
<%_ if (databaseType === 'sql' && !reactive) { _%>
import org.springframework.transaction.annotation.Transactional
<%_ } _%>
<%_ if (searchEngine === 'elasticsearch' && reactive) { _%>
import reactor.core.publisher.Mono
<%_ } _%>

<%_ if (authenticationType !== 'oauth2' && (databaseType === 'sql' || databaseType === 'mongodb' || databaseType === 'couchbase')) { _%>
import java.time.Instant
import java.time.temporal.ChronoUnit
<%_ } _%>
<%_ if (databaseType === 'sql') { _%>
import java.time.temporal.TemporalAccessor
<%_ } _%>
<%_ if ((databaseType === 'sql' || databaseType === 'mongodb' || databaseType === 'neo4j' || databaseType === 'couchbase') && authenticationType === 'session' && !reactive) { _%>
import java.time.LocalDate
<%_ } _%>
<%_ if (databaseType === 'sql' && reactive) { _%>
import java.time.ZoneOffset
<%_ } _%>
<%_ if (databaseType === 'sql') { _%>
import java.time.LocalDateTime
<%_ } _%>
<%_ if (databaseType === 'cassandra') { _%>
import java.util.UUID
<%_ } _%>
<%_ if (databaseType === 'sql' && !reactive) { _%>
import java.util.Optional
<%_ } _%>
<%_ if (databaseType === 'couchbase') { _%>
import <%= packageName %>.web.rest.mockAuthentication
<%_ } _%>
import org.assertj.core.api.Assertions.assertThat
<%_ if (searchEngine === 'elasticsearch') { _%>
import org.mockito.Mockito.times
import org.mockito.Mockito.never
import org.mockito.Mockito.verify
<%_ } _%>
<%_ if (reactive && searchEngine === 'elasticsearch') { _%>
import org.mockito.Mockito.`when`
import org.mockito.Mockito.`any`
<%_ } _%>
<%_ if (databaseType === 'sql' && !reactive && authenticationType !== 'oauth2') { _%>
import org.mockito.Mockito.`when`
<%_ } _%>
import kotlin.test.assertNotNull

private const val DEFAULT_LOGIN = "johndoe"
private const val DEFAULT_EMAIL = "johndoe@localhost"
private const val DEFAULT_FIRSTNAME = "john"
private const val DEFAULT_LASTNAME = "doe"
<%_ if (databaseType !== 'cassandra') { _%>
private const val DEFAULT_IMAGEURL = "http://placehold.it/50x50"
<%_ } _%>
private const val DEFAULT_LANGKEY = "dummy"

/**
 * Integration tests for [UserService].
 */
<%_ if (authenticationType === 'oauth2') { _%>
@SpringBootTest(classes = [<%= mainClass %>::class, TestSecurityConfiguration::class])
<%_ } else { _%>
@SpringBootTest(classes = [<%= mainClass %>::class])
<%_ } _%>
<%_ if (cacheProvider === 'redis') { _%>
@ExtendWith(RedisTestContainerExtension::class)
<%_ } _%>
<%_ if (databaseType === 'neo4j') { _%>
@ExtendWith(AbstractNeo4jIT::class)
<%_ } _%>
<%_ if (databaseType === 'sql' && !reactive) { _%>
@Transactional
<%_ } _%>
class UserServiceIT <% if (databaseType === 'cassandra') { %>: AbstractCassandraTest() <% } %> {
    <%_ if ((databaseType === 'sql' || databaseType === 'mongodb' || databaseType === 'neo4j' || databaseType === 'couchbase') && authenticationType === 'session' && !reactive) { _%>

    @Autowired
    private lateinit var persistentTokenRepository: PersistentTokenRepository
    <%_ } _%>
    <%_ if (databaseType !== 'no') { _%>

    @Autowired
    private lateinit var userRepository: UserRepository
    <%_ } _%>

    @Autowired
    private lateinit var userService: UserService
    <%_ if (searchEngine === 'elasticsearch') { _%>

    /**
     * This repository is mocked in the <%= packageName %>.repository.search test package.
     *
     * @see <%= packageName %>.repository.search.UserSearchRepositoryMockConfiguration
     */
    @Autowired
    private lateinit var mockUserSearchRepository: UserSearchRepository
    <%_ } _%>
    <%_ if (databaseType === 'sql' && !reactive && authenticationType !== 'oauth2') { _%>

    @Autowired
    private lateinit var auditingHandler: AuditingHandler

    @MockBean
    private lateinit var dateTimeProvider: DateTimeProvider
    <%_ } _%>
    <%_ if (databaseType !== 'no') { _%>

    private lateinit var user: <%= asEntity('User') %>
    <%_ } _%>
    <%_ if (authenticationType === 'oauth2' ) { _%>

    private lateinit var userDetails: MutableMap<String, Any>
    <%_ } _%>

    @BeforeEach
    fun init() {
        <%_ if (databaseType === 'couchbase') { _%>
        mockAuthentication()
        <%_ } _%>
        <%_ if ((databaseType === 'sql' || databaseType === 'mongodb' || databaseType === 'neo4j' || databaseType === 'couchbase') && authenticationType === 'session' && !reactive) { _%>
        persistentTokenRepository.deleteAll()
        <%_ } _%>
        <%_ if (databaseType === 'sql' && reactive) { _%>
        userRepository.deleteAllUserAuthorities().block()
        <%_ } _%>
        <%_ if ((reactive && databaseType !== 'no') || databaseType === 'mongodb' || databaseType === 'neo4j' || databaseType === 'cassandra' || databaseType === 'couchbase') { _%>
        userRepository.deleteAll()<% if (reactive) { %>.block()<% } %>
        <%_ } _%>
        <%_ if (databaseType !== 'no') { _%>
        user = <%= asEntity('User') %>(
            <%_ if (databaseType === 'cassandra') { _%>
            id = UUID.randomUUID().toString(),
            <%_ } _%>
            login = DEFAULT_LOGIN,
            <%_ if (authenticationType !== 'oauth2') { _%>
            password = RandomStringUtils.random(60),
            <%_ } _%>
            activated = true,
            email = DEFAULT_EMAIL,
            firstName = DEFAULT_FIRSTNAME,
            lastName = DEFAULT_LASTNAME,
            <%_ if (databaseType !== 'cassandra') { _%>
            imageUrl = DEFAULT_IMAGEURL,
            <%_ } _%>
            <%_ if (databaseType === 'sql' && reactive) { _%>
            createdBy = SYSTEM_ACCOUNT,
            <%_ } _%>
            langKey = DEFAULT_LANGKEY
        )
        <%_ } _%>
        <%_ if (authenticationType === 'oauth2' ) { _%>
        userDetails = mutableMapOf(
            "sub" to DEFAULT_LOGIN,
            "email" to DEFAULT_EMAIL,
            "given_name" to DEFAULT_FIRSTNAME,
            "family_name" to DEFAULT_LASTNAME<% if (databaseType !== 'cassandra') { _%>,
            "picture" to DEFAULT_IMAGEURL
            <%_ } _%>
        )
        <%_ } _%>
        <%_ if (databaseType === 'sql' && !reactive && authenticationType !== 'oauth2' ) { _%>

        `when`<Optional<TemporalAccessor>>(dateTimeProvider.now).thenReturn(Optional.of(LocalDateTime.now()))
        auditingHandler.setDateTimeProvider(dateTimeProvider)
        <%_ } _%>
    }
    <%_ if ((databaseType === 'sql' || databaseType === 'neo4j' || databaseType === 'mongodb' || databaseType === 'couchbase') && authenticationType === 'session' && !reactive) { _%>

    @Test
        <%_ if (databaseType === 'sql' && !reactive) { _%>
    @Transactional
        <%_ } _%>
    fun testRemoveOldPersistentTokens() {
        userRepository.save<% if (databaseType === 'sql') { %>AndFlush<% } %>(user)
        val existingCount = persistentTokenRepository.findByUser(user).size
        val today = LocalDate.now()
        generateUserToken(user, "1111-1111", today)
        generateUserToken(user, "2222-2222", today.minusDays(32))
        assertThat(persistentTokenRepository.findByUser(user)).hasSize(existingCount + 2)
        userService.removeOldPersistentTokens()
        assertThat(persistentTokenRepository.findByUser(user)).hasSize(existingCount + 1)
    }
    <%_ } _%>
    <%_ if (authenticationType !== 'oauth2' && (databaseType === 'sql' || databaseType === 'neo4j' || databaseType === 'mongodb' || databaseType === 'couchbase')) { _%>

    @Test
        <%_ if (databaseType === 'sql' && !reactive) { _%>
    @Transactional
        <%_ } _%>
    fun assertThatUserMustExistToResetPassword() {
        userRepository.save<% if (databaseType === 'sql' && !reactive) { %>AndFlush<% } %>(user)<% if (reactive) { %>.block()<% } %>
        var maybeUser = userService.requestPasswordReset("invalid.login@localhost")<% if (reactive) { %>.blockOptional()<% } %>
        assertThat(maybeUser).isNotPresent

        maybeUser = userService.requestPasswordReset(user.email!!)<% if (reactive) { %>.blockOptional()<% } %>
        assertThat(maybeUser).isPresent
        assertThat(maybeUser.orElse(null).email).isEqualTo(user.email)
        assertThat(maybeUser.orElse(null).resetDate).isNotNull()
        assertThat(maybeUser.orElse(null).resetKey).isNotNull()
    }

    @Test
        <%_ if (databaseType === 'sql' && !reactive) { _%>
    @Transactional
        <%_ } _%>
    fun assertThatOnlyActivatedUserCanRequestPasswordReset() {
        user.activated = false
        userRepository.save<% if (databaseType === 'sql' && !reactive) { %>AndFlush<% } %>(user)<% if (reactive) { %>.block()<% } %>

        val maybeUser = userService.requestPasswordReset(user.login!!)<% if (reactive) { %>.blockOptional()<% } %>
        assertThat(maybeUser).isNotPresent
        userRepository.delete(user)<% if (reactive) { %>.block()<% } %>
    }

    @Test
    <%_ if (databaseType === 'sql' && !reactive) { _%>
    @Transactional
    <%_ } _%>
    fun assertThatResetKeyMustNotBeOlderThan24Hours() {
        val daysAgo = Instant.now().minus(25, ChronoUnit.HOURS)
        val resetKey = RandomUtil.generateResetKey()
        user.activated = true
        user.resetDate = daysAgo
        user.resetKey = resetKey
        userRepository.save<% if (databaseType === 'sql' && !reactive) { %>AndFlush<% } %>(user)<% if (reactive) { %>.block()<% } %>

        val maybeUser = userService.completePasswordReset("johndoe2", user.resetKey!!)<% if (reactive) { %>.blockOptional()<% } %>
        assertThat(maybeUser).isNotPresent
        userRepository.delete(user)<% if (reactive) { %>.block()<% } %>
    }

    @Test
    <%_ if (databaseType === 'sql' && !reactive) { _%>
    @Transactional
    <%_ } _%>
    fun assertThatResetKeyMustBeValid() {
        val daysAgo = Instant.now().minus(25, ChronoUnit.HOURS)
        user.activated = true
        user.resetDate = daysAgo
        user.resetKey = "1234"
        userRepository.save<% if (databaseType === 'sql' && !reactive) { %>AndFlush<% } %>(user)<% if (reactive) { %>.block()<% } %>

        val maybeUser = userService.completePasswordReset("johndoe2", user.resetKey!!)<% if (reactive) { %>.blockOptional()<% } %>
        assertThat(maybeUser).isNotPresent
        userRepository.delete(user)<% if (reactive) { %>.block()<% } %>
    }

    @Test
    <%_ if (databaseType === 'sql' && !reactive) { _%>
    @Transactional
    <%_ } _%>
    fun assertThatUserCanResetPassword() {
        val oldPassword = user.password
        val daysAgo = Instant.now().minus(2, ChronoUnit.HOURS)
        val resetKey = RandomUtil.generateResetKey()
        user.activated = true
        user.resetDate = daysAgo
        user.resetKey = resetKey
        userRepository.save<% if (databaseType === 'sql' && !reactive) { %>AndFlush<% } %>(user)<% if (reactive) { %>.block()<% } %>

        val maybeUser = userService.completePasswordReset("johndoe2", user.resetKey!!)<% if (reactive) { %>.blockOptional()<% } %>
        assertThat(maybeUser).isPresent
        assertThat(maybeUser.orElse(null).resetDate).isNull()
        assertThat(maybeUser.orElse(null).resetKey).isNull()
        assertThat(maybeUser.orElse(null).password).isNotEqualTo(oldPassword)

        userRepository.delete(user)<% if (reactive) { %>.block()<% } %>
    }

    @Test
    <%_ if (databaseType === 'sql' && !reactive) { _%>
    @Transactional
    <%_ } _%>
    fun assertThatNotActivatedUsersWithNotNullActivationKeyCreatedBefore3DaysAreDeleted() {
        val now = Instant.now()
        <%_ if (databaseType === 'sql' && !reactive) { _%>
        `when`<Optional<TemporalAccessor>>(dateTimeProvider.now).thenReturn(Optional.of(now.minus(4, ChronoUnit.DAYS)))
        <%_ } _%>
        <%_ if (searchEngine === 'elasticsearch' && reactive) { _%>
        // Configure the mock search repository
        `when`(mockUserSearchRepository.save(any(User::class.java)))
            .thenAnswer { Mono.just(it.arguments[0] as User) }
        `when`(mockUserSearchRepository.delete(any(User::class.java))).thenReturn(Mono.empty())
        <%_ } _%>
        user.activated = false
        user.activationKey = RandomStringUtils.random(20)
        val dbUser = userRepository.save<% if (databaseType === 'sql' && !reactive) { %>AndFlush<% } %>(user)<% if (reactive) { %>.block()<% } %>
        assertNotNull(dbUser)
        dbUser.createdDate = now.minus(4, ChronoUnit.DAYS)
        userRepository.save<% if (databaseType === 'sql' && !reactive) { %>AndFlush<% } %>(user)<% if (reactive) { %>.block()<% } %>
        <%_ if (databaseType === 'sql' && reactive) { _%>
        val threeDaysAgo = LocalDateTime.ofInstant(now.minus(3, ChronoUnit.DAYS), ZoneOffset.UTC)
        <%_ } else { _%>
        val threeDaysAgo = now.minus(3, ChronoUnit.DAYS)
        <%_ } _%>
        var users = userRepository.findAllByActivatedIsFalseAndActivationKeyIsNotNullAndCreatedDateBefore(
            threeDaysAgo
        )<% if (reactive) { %>.collectList().block()<% } %>
        assertThat(users).isNotEmpty
        userService.removeNotActivatedUsers()
        users =
            userRepository.findAllByActivatedIsFalseAndActivationKeyIsNotNullAndCreatedDateBefore(
                threeDaysAgo
            )<% if (reactive) { %>.collectList().block()<% } %>
        assertThat(users).isEmpty()
        <%_ if (searchEngine === 'elasticsearch') { _%>

        // Verify Elasticsearch mock
        verify(mockUserSearchRepository, times(1)).delete(user)
        <%_ } _%>
    }

    @Test
    <%_ if (databaseType === 'sql' && !reactive) { _%>
    @Transactional
    <%_ } _%>
    fun assertThatNotActivatedUsersWithNullActivationKeyCreatedBefore3DaysAreNotDeleted() {
        val now = Instant.now()
        <%_ if (databaseType === 'sql' && !reactive) { _%>
        `when`(dateTimeProvider.getNow()).thenReturn(Optional.of(now.minus(4, ChronoUnit.DAYS)<% if (databaseType === 'sql' && reactive) { %>.atOffset(ZoneOffset.UTC)<% } %>))
        <%_ } _%>
        user.activated = false
        val dbUser = userRepository.save<% if (databaseType === 'sql' && !reactive) { %>AndFlush<% } %>(user)<% if (reactive) { %>.block()<% } %>
        dbUser.createdDate = now.minus(4, ChronoUnit.DAYS)
        userRepository.save<% if (databaseType === 'sql' && !reactive) { %>AndFlush<% } %>(user)<% if (reactive) { %>.block()<% } %>
        <%_ if (databaseType === 'sql' && reactive) { _%>
        val threeDaysAgo = LocalDateTime.ofInstant(now.minus(3, ChronoUnit.DAYS), ZoneOffset.UTC)
        <%_ } else { _%>
        val threeDaysAgo = now.minus(3, ChronoUnit.DAYS)
        <%_ } _%>
        val users =
            userRepository.findAllByActivatedIsFalseAndActivationKeyIsNotNullAndCreatedDateBefore(
                threeDaysAgo
            )<% if (reactive) { %>.collectList().block()<% } %>
        assertThat(users).isEmpty()
        userService.removeNotActivatedUsers()
        val maybeDbUser = userRepository.findById(dbUser.id)<% if (reactive) { %>.blockOptional()<% } %>
        assertThat(maybeDbUser).contains(dbUser)
        <%_ if (searchEngine === 'elasticsearch') { _%>

        // Verify Elasticsearch mock
        verify(mockUserSearchRepository, never()).delete(user)
        <%_ } _%>
    }
    <%_ } _%>
    <%_ if ((databaseType === 'sql' || databaseType === 'neo4j' || databaseType === 'mongodb' || databaseType === 'couchbase') && authenticationType === 'session' && !reactive) { _%>

    private fun generateUserToken(user: <%= asEntity('User') %>, tokenSeries: String, localDate: LocalDate) {
        val token = PersistentToken(
            series = tokenSeries,
            <%_ if (databaseType === 'couchbase') { _%>
            login = user.login,
            <%_ } else { _%>
            user = user,
            <%_ } _%>
            tokenValue = "$tokenSeries-data",
            tokenDate = localDate,
            ipAddress = "127.0.0.1",
            userAgent = "Test agent"
        )
        persistentTokenRepository.save<% if (databaseType === 'sql' && !reactive) { %>AndFlush<% } %>(token)
    }
    <%_ } _%>
    <%_ if (databaseType !== 'no') { _%>

    @Test
    <%_ if (databaseType === 'sql' && !reactive) { _%>
    @Transactional
    <%_ } else if (databaseType === 'couchbase') { _%>
    @WithAnonymousUser
    <%_ } _%>
    fun assertThatAnonymousUserIsNotGet() {
        <%_ if (authenticationType === 'oauth2') { _%>
        user.id = ANONYMOUS_USER
        <%_ } _%>
        user.login = ANONYMOUS_USER
        if (!userRepository.findOneByLogin(ANONYMOUS_USER)<% if (reactive) { %>.blockOptional()<% } %>.isPresent) {
            userRepository.<% if (databaseType === 'sql' && reactive && authenticationType === 'oauth2') { %>create<% } else { %>save<% } %><% if (databaseType === 'sql' && !reactive) { %>AndFlush<% } %>(user)<% if (reactive) { %>.block()<% } %>
        }<% if (databaseType === 'sql' || databaseType === 'neo4j' || databaseType === 'mongodb' || databaseType === 'couchbase') { %>
        val pageable = PageRequest.of(0, userRepository.count()<% if (reactive) { %>.block()!!<% } %>.toInt())
        val allManagedUsers = userService.getAllManagedUsers(pageable)<% if (reactive) { %>
            .collectList().block()<% } %>
        assertNotNull(allManagedUsers)
        assertThat(allManagedUsers<% if (!reactive) { %>.content<% } %>.stream()<% } %><% if (databaseType === 'cassandra') { %>
        val allManagedUsers = userService.getAllManagedUsers()<% if (reactive) { %>.collectList().block()<% } %>
        assertThat(allManagedUsers.stream()<% } %>
            .noneMatch { user -> ANONYMOUS_USER == user.login })
            .isTrue()
    }
    <%_ } _%>
    <%_ if (authenticationType === 'oauth2') { _%>

    @Test
    <%_ if (databaseType === 'sql' && !reactive) { _%>
    @Transactional
    <%_ } _%>
    fun testDefaultUserDetails() {
        val authentication = createMockOAuth2AuthenticationToken(userDetails)
        val userDTO = userService.getUserFromAuthentication(authentication)<% if (reactive) { %>.block()<% } %>

        assertThat(userDTO.login).isEqualTo(DEFAULT_LOGIN)
        assertThat(userDTO.firstName).isEqualTo(DEFAULT_FIRSTNAME)
        assertThat(userDTO.lastName).isEqualTo(DEFAULT_LASTNAME)
        assertThat(userDTO.email).isEqualTo(DEFAULT_EMAIL)
        assertThat(userDTO.activated).isTrue()
        assertThat(userDTO.langKey).isEqualTo(DEFAULT_LANGUAGE)
        assertThat(userDTO.imageUrl).isEqualTo(DEFAULT_IMAGEURL)
        assertThat(userDTO.authorities).contains(ANONYMOUS)
    }

    @Test
    <%_ if (databaseType === 'sql' && !reactive) { _%>
    @Transactional
    <%_ } _%>
    fun testUserDetailsWithUsername() {
        userDetails["preferred_username"] = "TEST"
        val authentication = createMockOAuth2AuthenticationToken(userDetails)
        val userDTO = userService.getUserFromAuthentication(authentication)<% if (reactive) { %>.block()<% } %>
        assertThat(userDTO.login).isEqualTo("test")
    }

    @Test
    <%_ if (databaseType === 'sql' && !reactive) { _%>
    @Transactional
    <%_ } _%>
    fun testUserDetailsWithLangKey() {
        userDetails["langKey"] = DEFAULT_LANGKEY
        userDetails["locale"] = "en-US"
        val authentication = createMockOAuth2AuthenticationToken(userDetails)
        val userDTO = userService.getUserFromAuthentication(authentication)<% if (reactive) { %>.block()<% } %>
        assertThat(userDTO.langKey).isEqualTo(DEFAULT_LANGKEY)
    }

    @Test
    <%_ if (databaseType === 'sql' && !reactive) { _%>
    @Transactional
    <%_ } _%>
    fun testUserDetailsWithLocale() {
        userDetails["locale"] = "it-IT"
        val authentication = createMockOAuth2AuthenticationToken(userDetails)
        val userDTO = userService.getUserFromAuthentication(authentication)<% if (reactive) { %>.block()<% } %>
        assertThat(userDTO.langKey).isEqualTo("it")
    }

    @Test
    <%_ if (databaseType === 'sql' && !reactive) { _%>
    @Transactional
    <%_ } _%>
    fun testUserDetailsWithUSLocaleUnderscore() {
        userDetails["locale"] = "en_US"
        val authentication = createMockOAuth2AuthenticationToken(userDetails)
        val userDTO = userService.getUserFromAuthentication(authentication)<% if (reactive) { %>.block()<% } %>
        assertThat(userDTO.langKey).isEqualTo("en")
    }

    @Test
    <%_ if (databaseType === 'sql' && !reactive) { _%>
    @Transactional
    <%_ } _%>
    fun testUserDetailsWithUSLocaleDash() {
        userDetails["locale"] = "en-US"
        val authentication = createMockOAuth2AuthenticationToken(userDetails)
        val userDTO = userService.getUserFromAuthentication(authentication)<% if (reactive) { %>.block()<% } %>
        assertThat(userDTO.langKey).isEqualTo("en")
    }

    private fun createMockOAuth2AuthenticationToken(userDetails: Map<String, Any?>): OAuth2AuthenticationToken {
        val authorities = listOf(SimpleGrantedAuthority(ANONYMOUS))
        val usernamePasswordAuthenticationToken =
            UsernamePasswordAuthenticationToken(ANONYMOUS_USER, ANONYMOUS_USER, authorities)
        usernamePasswordAuthenticationToken.details = userDetails
        val user = DefaultOAuth2User(authorities, userDetails, "sub")

        return OAuth2AuthenticationToken(user, authorities, "oidc")
    }
    <%_ } _%>
}
