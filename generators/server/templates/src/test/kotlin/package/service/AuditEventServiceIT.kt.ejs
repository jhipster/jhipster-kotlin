
<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.service

import <%= packageName %>.domain.PersistentAuditEvent
<%_ if (cacheProvider === 'redis') { _%>
import <%= packageName %>.RedisTestContainerExtension
<%_ } _%>
<%_ if (databaseType === 'neo4j') { _%>
import <%= packageName %>.AbstractNeo4jIT
<%_ } _%>
import <%= packageName %>.repository.PersistenceAuditEventRepository
import <%= packageName %>.<%= mainClass %>
import tech.jhipster.config.JHipsterProperties
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
<%_ if (cacheProvider === 'redis') { _%>
import org.junit.jupiter.api.extension.ExtendWith
<%_ } _%>
<%_ if (databaseType === 'neo4j') { _%>
import org.junit.jupiter.api.extension.ExtendWith
<%_ } _%>
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.context.SpringBootTest
<%_ if (databaseType === 'sql' && !reactive) { _%>
import org.springframework.transaction.annotation.Transactional
<%_ } _%>
<%_ if (databaseType === 'couchbase') { _%>
import <%= packageName %>.web.rest.mockAuthentication
<%_ } _%>
<%_ if (authenticationType === 'oauth2') { _%>
import <%= packageName %>.config.TestSecurityConfiguration
<%_ } _%>
import java.time.Instant
import java.time.temporal.ChronoUnit

import org.assertj.core.api.Assertions.assertThat

/**
 * Integration tests for {@link AuditEventService}.
 */
<%_ if (authenticationType === 'oauth2') { _%>
@SpringBootTest(classes = [<%= mainClass %>::class, TestSecurityConfiguration::class])
<%_ } else { _%>
@SpringBootTest(classes = [<%= mainClass %>::class])
<%_ } _%>
<%_ if (cacheProvider === 'redis') { _%>
@ExtendWith(RedisTestContainerExtension::class)
<%_ } _%>
<%_ if (databaseType === 'neo4j') { _%>
@ExtendWith(AbstractNeo4jIT::class)
<%_ } _%>
<%_ if (databaseType === 'sql' && !reactive) { _%>
@Transactional
<%_ } _%>
class AuditEventServiceIT {
    @Autowired
    private lateinit var auditEventService: AuditEventService

    @Autowired
    private lateinit var persistenceAuditEventRepository: PersistenceAuditEventRepository

    @Autowired
    private lateinit var jHipsterProperties: JHipsterProperties

    private lateinit var auditEventOld: PersistentAuditEvent

    private lateinit var auditEventWithinRetention: PersistentAuditEvent

    private lateinit var auditEventNew: PersistentAuditEvent

    @BeforeEach
    fun init() {
        <%_ if (databaseType === 'couchbase') { _%>
        mockAuthentication()
        <%_ } _%>
        auditEventOld = PersistentAuditEvent()
        auditEventOld.auditEventDate = Instant.now().minus((jHipsterProperties.auditEvents.retentionPeriod + 1).toLong(), ChronoUnit.DAYS)
        auditEventOld.principal = "test-user-old"
        auditEventOld.auditEventType = "test-type"

        auditEventWithinRetention = PersistentAuditEvent()
        auditEventWithinRetention.auditEventDate = Instant.now().minus((jHipsterProperties.auditEvents.retentionPeriod - 1).toLong(), ChronoUnit.DAYS)
        auditEventWithinRetention.principal = "test-user-retention"
        auditEventWithinRetention.auditEventType = "test-type"

        auditEventNew = PersistentAuditEvent()
        auditEventNew.auditEventDate = Instant.now()
        auditEventNew.principal = "test-user-new"
        auditEventNew.auditEventType = "test-type"
    }

    @Test
    <%_ if (databaseType === 'sql' && !reactive) { _%>
    @Transactional
    <%_ } _%>
    fun verifyOldAuditEventsAreDeleted() {
        persistenceAuditEventRepository.deleteAll()<% if (reactive) { %>.block()<% } %>
        persistenceAuditEventRepository.save(auditEventOld)<% if (reactive) { %>.block()<% } %>
        persistenceAuditEventRepository.save(auditEventWithinRetention)<% if (reactive) { %>.block()<% } %>
        persistenceAuditEventRepository.save(auditEventNew)<% if (reactive) { %>.block()<% } %>
        <%_ if (databaseType === 'sql' && !reactive) { _%>
        persistenceAuditEventRepository.flush()
        <%_ } _%>
        auditEventService.removeOldAuditEvents()
        <%_ if (databaseType === 'sql' && !reactive) { _%>
        persistenceAuditEventRepository.flush()
        <%_ } _%>

        assertThat(persistenceAuditEventRepository.findAll()<% if (reactive) { %>.collectList().block()<% } %>.size).isEqualTo(2)
        assertThat(persistenceAuditEventRepository.findByPrincipal("test-user-old")<% if (reactive) { %>.collectList().block()<% } %>).isEmpty()
        assertThat(persistenceAuditEventRepository.findByPrincipal("test-user-retention")<% if (reactive) { %>.collectList().block()<% } %>).isNotEmpty()
        assertThat(persistenceAuditEventRepository.findByPrincipal("test-user-new")<% if (reactive) { %>.collectList().block()<% } %>).isNotEmpty()
    }
}
