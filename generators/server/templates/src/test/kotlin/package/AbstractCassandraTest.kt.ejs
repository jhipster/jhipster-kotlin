<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>

import tech.jhipster.config.JHipsterConstants

import com.datastax.driver.core.Cluster
import com.datastax.driver.core.Session
import org.apache.cassandra.exceptions.ConfigurationException
import org.apache.thrift.transport.TTransportException
import org.cassandraunit.CQLDataLoader
import org.cassandraunit.dataset.cql.ClassPathCQLDataSet
import org.junit.jupiter.api.BeforeAll
import org.springframework.test.context.ActiveProfiles
import org.testcontainers.containers.GenericContainer
import org.testcontainers.containers.wait.strategy.Wait

import java.io.IOException
import java.net.URISyntaxException
import java.nio.file.Files
import java.nio.file.Paths
import java.time.Duration


/**
 * Base class for starting/stopping Cassandra during tests.
 */
@ActiveProfiles(JHipsterConstants.SPRING_PROFILE_TEST)
open class AbstractCassandraTest {
    companion object {

        const val CASSANDRA_UNIT_KEYSPACE = "cassandra_unit_keyspace"
        const val CASSANDRA_TEST_PORT = 9042

        @JvmField
        val CASSANDRA_CONTAINER = KGenericContainer("<%= DOCKER_CASSANDRA %>")
            .waitingFor(Wait.forListeningPort().withStartupTimeout(Duration.ofSeconds(30)))
            .withExposedPorts(CASSANDRA_TEST_PORT)

        private var started = false

        @JvmStatic
        @BeforeAll
        @Throws(
            TTransportException::class, ConfigurationException::class, IOException::class, URISyntaxException::class
        )
        fun startServer() {
            if (!started) {
                CASSANDRA_CONTAINER.start()
                val cluster = Cluster.Builder()
                    .addContactPoint("127.0.0.1")
                    .withPort(CASSANDRA_CONTAINER.getMappedPort(CASSANDRA_TEST_PORT))
                    .withoutMetrics()
                    .withoutJMXReporting()
                    .build()

                val session = cluster.connect()
                createTestKeyspace(session)
                val dataLoader = CQLDataLoader(session)
                applyScripts(dataLoader, "config/cql/changelog/", "*.cql")

                started = true
            }
        }

        @JvmStatic
        private fun createTestKeyspace(session: Session) {
            val createQuery =
                "CREATE KEYSPACE $CASSANDRA_UNIT_KEYSPACE WITH replication={'class' : 'SimpleStrategy', 'replication_factor':1}"
            session.execute(createQuery)
            val useKeyspaceQuery = "USE $CASSANDRA_UNIT_KEYSPACE"
            session.execute(useKeyspaceQuery)
        }

        @JvmStatic
        @Throws(IOException::class, URISyntaxException::class)
        private fun applyScripts(dataLoader: CQLDataLoader, cqlDir: String, pattern: String) {
            // protect for empty directory
            val dirUrl = ClassLoader.getSystemResource(cqlDir) ?: return

            val scripts = mutableListOf<String>()
            Files.newDirectoryStream(Paths.get(dirUrl.toURI()), pattern).use { stream ->
                for (entry in stream) {
                    scripts.add(entry.fileName.toString())
                }
            }
            scripts.sort()

            for (fileName in scripts) {
                dataLoader.load(ClassPathCQLDataSet(cqlDir + fileName, false, false, CASSANDRA_UNIT_KEYSPACE))
            }
        }
    }

    // Workaround for Testcointainers issue https://github.com/testcontainers/testcontainers-java/issues/318#issuecomment-290692749
    class KGenericContainer(imageName: String) : GenericContainer<KGenericContainer>(imageName)
}
