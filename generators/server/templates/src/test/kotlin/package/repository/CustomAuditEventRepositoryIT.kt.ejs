<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.repository

import <%=packageName%>.<%= mainClass %>
import <%=packageName%>.config.Constants
<%_ if (authenticationType === 'oauth2') { _%>
import <%=packageName%>.config.TestSecurityConfiguration
<%_ } _%>
import <%=packageName%>.config.audit.AuditEventConverter
import <%=packageName%>.domain.PersistentAuditEvent
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.actuate.audit.AuditEvent
import org.springframework.boot.test.context.SpringBootTest
<%_ if (!reactive) { _%>
import org.springframework.mock.web.MockHttpServletRequest
import org.springframework.mock.web.MockHttpSession
import org.springframework.security.web.authentication.WebAuthenticationDetails
<%_ } _%>
import org.springframework.test.context.junit4.SpringRunner
<%_ if (databaseType === 'sql') { _%>
import org.springframework.transaction.annotation.Transactional
<%_ } _%>

import java.time.Instant
import java.time.temporal.ChronoUnit;

<%_ if (databaseType === 'couchbase') { _%>
import <%= packageName %>.web.rest.TestUtil.mockAuthentication
<%_ } _%>
import org.assertj.core.api.Assertions.assertThat

/**
 * Integration tests for [CustomAuditEventRepository].
 */
@RunWith(SpringRunner::class)
<%_ if (authenticationType === 'oauth2') { _%>
@SpringBootTest(classes = [<%= mainClass %>::class, TestSecurityConfiguration::class])
<%_ } else { _%>
@SpringBootTest(classes = [<%= mainClass %>::class])
<%_ } _%>
<%_ if (databaseType === 'sql') { _%>
@Transactional
<%_ } _%>
class CustomAuditEventRepositoryIT {

    @Autowired
    private lateinit var persistenceAuditEventRepository: PersistenceAuditEventRepository

    @Autowired
    private lateinit var auditEventConverter: AuditEventConverter

    private lateinit var customAuditEventRepository: CustomAuditEventRepository

    private lateinit var testUserEvent: PersistentAuditEvent

    private lateinit var testOtherUserEvent: PersistentAuditEvent

    private lateinit var testOldUserEvent: PersistentAuditEvent

    @Before
    fun setup() {
        <%_ if (databaseType === 'couchbase') { _%>
        mockAuthentication()
        <%_ } _%>
        customAuditEventRepository = CustomAuditEventRepository(persistenceAuditEventRepository, auditEventConverter)
        persistenceAuditEventRepository.deleteAll()
        val oneHourAgo = Instant.now().minusSeconds(3600)

        testUserEvent = PersistentAuditEvent()
        testUserEvent.principal = "test-user"
        testUserEvent.auditEventType = "test-type"
        testUserEvent.auditEventDate = oneHourAgo
        val data = mutableMapOf<String, String?>()
        data["test-key"] = "test-value"
        testUserEvent.data = data

        testOldUserEvent = PersistentAuditEvent()
        testOldUserEvent.principal = "test-user"
        testOldUserEvent.auditEventType = "test-type"
        testOldUserEvent.auditEventDate = oneHourAgo.minusSeconds(10000)

        testOtherUserEvent = PersistentAuditEvent()
        testOtherUserEvent.principal = "other-test-user"
        testOtherUserEvent.auditEventType = "test-type"
        testOtherUserEvent.auditEventDate = oneHourAgo
    }

    @Test
    fun addAuditEvent() {
        val data = mutableMapOf<String, Any>()
        data["test-key"] = "test-value"
        val event = AuditEvent("test-user", "test-type", data)
        customAuditEventRepository.add(event)
        val persistentAuditEvents = persistenceAuditEventRepository.findAll()
        assertThat(persistentAuditEvents).hasSize(1)
        val persistentAuditEvent = persistentAuditEvents[0]
        assertThat(persistentAuditEvent.principal).isEqualTo(event.principal)
        assertThat(persistentAuditEvent.auditEventType).isEqualTo(event.type)
        assertThat(persistentAuditEvent.data).containsKey("test-key")
        assertThat(persistentAuditEvent.data["test-key"]).isEqualTo("test-value")
        assertThat(persistentAuditEvent.auditEventDate!!.truncatedTo(ChronoUnit.MILLIS))
            .isEqualTo(event.timestamp!!.truncatedTo(ChronoUnit.MILLIS))
    }

    @Test
    fun addAuditEventTruncateLargeData() {
        val data = mutableMapOf<String, Any>()
        val largeData = StringBuilder()
        for (i in 0 until CustomAuditEventRepository.EVENT_DATA_COLUMN_MAX_LENGTH + 10) {
            largeData.append("a")
        }
        data["test-key"] = largeData
        val event = AuditEvent("test-user", "test-type", data)
        customAuditEventRepository.add(event)
        val persistentAuditEvents = persistenceAuditEventRepository.findAll()
        assertThat(persistentAuditEvents).hasSize(1)
        val persistentAuditEvent = persistentAuditEvents[0]
        assertThat(persistentAuditEvent.principal).isEqualTo(event.principal)
        assertThat(persistentAuditEvent.auditEventType).isEqualTo(event.type)
        assertThat(persistentAuditEvent.data).containsKey("test-key")
        val actualData = persistentAuditEvent.data["test-key"]
        assertThat(actualData!!.length).isEqualTo(CustomAuditEventRepository.EVENT_DATA_COLUMN_MAX_LENGTH)
        assertThat(actualData).isSubstringOf(largeData)
        assertThat(persistentAuditEvent.auditEventDate!!.truncatedTo(ChronoUnit.MILLIS))
            .isEqualTo(event.timestamp!!.truncatedTo(ChronoUnit.MILLIS))
    }
    <%_ if (!reactive) { _%>

    @Test
    fun testAddEventWithWebAuthenticationDetails() {
        val session = MockHttpSession(null, "test-session-id")
        val request = MockHttpServletRequest()
        request.session = session
        request.remoteAddr = "1.2.3.4"
        val details = WebAuthenticationDetails(request)
        val data = mutableMapOf<String, Any>()
        data["test-key"] = details
        val event = AuditEvent("test-user", "test-type", data)
        customAuditEventRepository.add(event)
        val persistentAuditEvents = persistenceAuditEventRepository.findAll()
        assertThat(persistentAuditEvents).hasSize(1)
        val persistentAuditEvent = persistentAuditEvents[0]
        assertThat(persistentAuditEvent.data["remoteAddress"]).isEqualTo("1.2.3.4")
        assertThat(persistentAuditEvent.data["sessionId"]).isEqualTo("test-session-id")
    }
    <%_ } _%>

    @Test
    fun testAddEventWithNullData() {
        val data = mutableMapOf<String, Any?>()
        data["test-key"] = null
        val event = AuditEvent("test-user", "test-type", data)
        customAuditEventRepository.add(event)
        val persistentAuditEvents = persistenceAuditEventRepository.findAll()
        assertThat(persistentAuditEvents).hasSize(1)
        val persistentAuditEvent = persistentAuditEvents[0]
        assertThat(persistentAuditEvent.data["test-key"]).isNull()
    }

    @Test
    fun addAuditEventWithAnonymousUser() {
        val data = mutableMapOf<String, Any>()
        data["test-key"] = "test-value"
        val event = AuditEvent(Constants.ANONYMOUS_USER, "test-type", data)
        customAuditEventRepository.add(event)
        val persistentAuditEvents = persistenceAuditEventRepository.findAll()
        assertThat(persistentAuditEvents).hasSize(0)
    }

    @Test
    fun addAuditEventWithAuthorizationFailureType() {
        val data = mutableMapOf<String, Any>()
        data["test-key"] = "test-value"
        val event = AuditEvent("test-user", "AUTHORIZATION_FAILURE", data)
        customAuditEventRepository.add(event)
        val persistentAuditEvents = persistenceAuditEventRepository.findAll()
        assertThat(persistentAuditEvents).hasSize(0)
    }
}
