<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.repository

import <%=packageName%>.<%= mainClass %>
import <%=packageName%>.config.Constants
import <%=packageName%>.config.audit.AuditEventConverter
import <%=packageName%>.domain.PersistentAuditEvent
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.actuate.audit.AuditEvent
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.mock.web.MockHttpServletRequest
import org.springframework.mock.web.MockHttpSession
import org.springframework.security.web.authentication.WebAuthenticationDetails
import org.springframework.test.context.junit4.SpringRunner<% if (databaseType === 'sql') { %>
import org.springframework.transaction.annotation.Transactional<% } %>

import javax.servlet.http.HttpSession
import java.time.Instant
import java.util.HashMap
import java.util.List
import java.util.Map

<%_ if (databaseType === 'couchbase') { _%>
import static <%= packageName %>.web.rest.TestUtil.mockAuthentication
<%_ } _%>
import static org.assertj.core.api.Assertions.assertThat
import static <%=packageName%>.repository.CustomAuditEventRepository.EVENT_DATA_COLUMN_MAX_LENGTH

/**
 * Test class for the CustomAuditEventRepository class.
 *
 * @see CustomAuditEventRepository
 */
@RunWith(SpringRunner.class)
@SpringBootTest(classes = <%= mainClass %>.class)<% if (databaseType === 'sql') { %>
@Transactional<% } %>
public class CustomAuditEventRepositoryIntTest {

    @Autowired
    private PersistenceAuditEventRepository persistenceAuditEventRepository

    @Autowired
    private AuditEventConverter auditEventConverter

    private CustomAuditEventRepository customAuditEventRepository

    private PersistentAuditEvent testUserEvent

    private PersistentAuditEvent testOtherUserEvent

    private PersistentAuditEvent testOldUserEvent

    @Before
    public void setup() {
        <%_ if (databaseType === 'couchbase') { _%>
        mockAuthentication()
        <%_ } _%>
        customAuditEventRepository = new CustomAuditEventRepository(persistenceAuditEventRepository, auditEventConverter)
        persistenceAuditEventRepository.deleteAll()
        Instant oneHourAgo = Instant.now().minusSeconds(3600)

        testUserEvent = new PersistentAuditEvent()
        testUserEvent.setPrincipal("test-user")
        testUserEvent.setAuditEventType("test-type")
        testUserEvent.setAuditEventDate(oneHourAgo)
        Map<String, String> data = new HashMap<>()
        data.put("test-key", "test-value")
        testUserEvent.setData(data)

        testOldUserEvent = new PersistentAuditEvent()
        testOldUserEvent.setPrincipal("test-user")
        testOldUserEvent.setAuditEventType("test-type")
        testOldUserEvent.setAuditEventDate(oneHourAgo.minusSeconds(10000))

        testOtherUserEvent = new PersistentAuditEvent()
        testOtherUserEvent.setPrincipal("other-test-user")
        testOtherUserEvent.setAuditEventType("test-type")
        testOtherUserEvent.setAuditEventDate(oneHourAgo)
    }

    @Test
    fun addAuditEvent() {
        val data = HashMap<String, Any>()
        data["test-key"] = "test-value"
        val event = AuditEvent("test-user", "test-type", data)
        customAuditEventRepository!!.add(event)
        val persistentAuditEvents = persistenceAuditEventRepository!!.findAll()
        assertThat(persistentAuditEvents).hasSize(1)
        val persistentAuditEvent = persistentAuditEvents[0]
        assertThat(persistentAuditEvent.principal).isEqualTo(event.principal)
        assertThat(persistentAuditEvent.auditEventType).isEqualTo(event.type)
        assertThat(persistentAuditEvent.data).containsKey("test-key")
        assertThat(persistentAuditEvent.data["test-key"]).isEqualTo("test-value")
        assertThat(persistentAuditEvent.auditEventDate).isEqualTo(event.timestamp)
    }

    @Test
    fun addAuditEventTruncateLargeData() {
        val data = HashMap<String, Any>()
        val largeData = StringBuilder()
        for (i in 0 until EVENT_DATA_COLUMN_MAX_LENGTH + 10) {
            largeData.append("a")
        }
        data["test-key"] = largeData
        val event = AuditEvent("test-user", "test-type", data)
        customAuditEventRepository!!.add(event)
        val persistentAuditEvents = persistenceAuditEventRepository!!.findAll()
        assertThat(persistentAuditEvents).hasSize(1)
        val persistentAuditEvent = persistentAuditEvents[0]
        assertThat(persistentAuditEvent.principal).isEqualTo(event.principal)
        assertThat(persistentAuditEvent.auditEventType).isEqualTo(event.type)
        assertThat(persistentAuditEvent.data).containsKey("test-key")
        val actualData = persistentAuditEvent.data["test-key"]
        assertThat(actualData!!.length).isEqualTo(EVENT_DATA_COLUMN_MAX_LENGTH)
        assertThat(actualData).isSubstringOf(largeData)
        assertThat(persistentAuditEvent.auditEventDate).isEqualTo(event.timestamp)
    }

    @Test
    fun testAddEventWithWebAuthenticationDetails() {
        val session = MockHttpSession(null, "test-session-id")
        val request = MockHttpServletRequest()
        request.setSession(session)
        request.remoteAddr = "1.2.3.4"
        val details = WebAuthenticationDetails(request)
        val data = HashMap<String, Any>()
        data["test-key"] = details
        val event = AuditEvent("test-user", "test-type", data)
        customAuditEventRepository!!.add(event)
        val persistentAuditEvents = persistenceAuditEventRepository!!.findAll()
        assertThat(persistentAuditEvents).hasSize(1)
        val persistentAuditEvent = persistentAuditEvents[0]
        assertThat(persistentAuditEvent.data["remoteAddress"]).isEqualTo("1.2.3.4")
        assertThat(persistentAuditEvent.data["sessionId"]).isEqualTo("test-session-id")
    }

    @Test
    fun testAddEventWithNullData() {
        val data = HashMap<String, Any?>()
        data["test-key"] = null
        val event = AuditEvent("test-user", "test-type", data)
        customAuditEventRepository!!.add(event)
        val persistentAuditEvents = persistenceAuditEventRepository!!.findAll()
        assertThat(persistentAuditEvents).hasSize(1)
        val persistentAuditEvent = persistentAuditEvents[0]
        assertThat(persistentAuditEvent.data["test-key"]).isEqualTo("null")
    }

    @Test
    fun addAuditEventWithAnonymousUser() {
        val data = HashMap<String, Any>()
        data["test-key"] = "test-value"
        val event = AuditEvent(Constants.ANONYMOUS_USER, "test-type", data)
        customAuditEventRepository!!.add(event)
        val persistentAuditEvents = persistenceAuditEventRepository!!.findAll()
        assertThat(persistentAuditEvents).hasSize(0)
    }

    @Test
    fun addAuditEventWithAuthorizationFailureType() {
        val data = HashMap<String, Any>()
        data["test-key"] = "test-value"
        val event = AuditEvent("test-user", "AUTHORIZATION_FAILURE", data)
        customAuditEventRepository!!.add(event)
        val persistentAuditEvents = persistenceAuditEventRepository!!.findAll()
        assertThat(persistentAuditEvents).hasSize(0)
    }

}
