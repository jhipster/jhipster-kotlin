<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

This file is part of the JHipster project, see https://jhipster.github.io/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License")
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.web.rest

import <%= packageName %>.IntegrationTest
<%_ if (reactive) { _%>
import <%= packageName %>.IntegrationTest.Companion.DEFAULT_TIMEOUT
<%_ } _%>
<%_ if (reactive && searchEngineElasticsearch) { _%>
import <%= packageName %>.repository.search.UserSearchRepository
<%_ } _%>
import org.junit.jupiter.api.Test
import org.springframework.beans.factory.annotation.Autowired
<%_ if (!reactive) { _%>
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc
<%_ } else { _%>
import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient
<%_ } _%>
import org.springframework.http.MediaType
import org.springframework.security.test.context.support.WithMockUser
<%_ if (reactive) { _%>
import org.springframework.test.web.reactive.server.WebTestClient
<%_ } else { _%>
import org.springframework.test.web.servlet.MockMvc

import org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.*
<%_ } _%>
<%_ if (reactive && searchEngineElasticsearch) { _%>
import reactor.core.publisher.Mono

import org.mockito.Mockito.*
<%_ } _%>
import <%= packageName %>.web.rest.TEST_USER_LOGIN

/**
 * Integration tests for the {@link AccountResource} REST controller.
 */
 <%_ if (reactive) { _%>
@AutoConfigureWebTestClient(timeout = IntegrationTest.DEFAULT_TIMEOUT)
<%_ } else { _%>
@AutoConfigureMockMvc
<%_ } _%>
@WithMockUser(value = TEST_USER_LOGIN)
@IntegrationTest
class AccountResourceIT {

    @Autowired
    <%_ if (reactive) { _%>
    private lateinit var accountWebTestClient: WebTestClient
    <%_ } else { _%>
    private lateinit var restAccountMockMvc: MockMvc
    <%_ } _%>

    @Test
    <% if (!reactive) { %>@Throws(Exception::class)<% } %>
    @WithMockUser(username = TEST_USER_LOGIN, authorities = [ADMIN])
    fun testGetExistingAccount() {
        <%_ if (reactive) { _%>
        accountWebTestClient.get().uri("/api/account")
            .accept(MediaType.APPLICATION_JSON)
            .exchange()
            .expectStatus().isOk
            .expectHeader().contentType(MediaType.APPLICATION_JSON)
            .expectBody()
            .jsonPath("$.login").isEqualTo(TEST_USER_LOGIN)
            .jsonPath("$.authorities").isEqualTo(ADMIN)
        <%_ } else { _%>
        restAccountMockMvc.perform(
            get("/api/account")
                .accept(MediaType.APPLICATION_JSON)
        )
            .andExpect(status().isOk)
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
            .andExpect(jsonPath("\$.login").value(TEST_USER_LOGIN))
            .andExpect(jsonPath("\$.authorities").value(ADMIN))
        <%_ } _%>
    }

    @Test
    @WithUnauthenticatedMockUser
    <% if (!reactive) { %>@Throws(Exception::class)<% } %>
    <%_ if (reactive) { _%>
    fun testNonAuthenticatedUser() {
        accountWebTestClient.get().uri("/api/authenticate")
            .accept(MediaType.APPLICATION_JSON)
            .exchange()
            .expectStatus().isOk
            .expectBody().isEmpty
    <%_ } else { _%>
    fun testNonAuthenticatedUser(){
        restAccountMockMvc.perform(get("/api/authenticate")
            .accept(MediaType.APPLICATION_JSON))
            .andExpect(status().isOk)
            .andExpect(content().string(""))
    <%_ } _%>
    }

    @Test
    <% if (!reactive) { %>@Throws(Exception::class)<% } %>
    <%_ if (reactive) { _%>
    fun testAuthenticatedUser() {
        accountWebTestClient
            .get().uri("/api/authenticate")
            .accept(MediaType.APPLICATION_JSON)
            .exchange()
            .expectStatus().isOk
            .expectBody<String>().isEqualTo(TEST_USER_LOGIN)
    <%_ } else { _%>
    fun testAuthenticatedUser() {
        restAccountMockMvc.perform(get("/api/authenticate")
            .with(request -> {
                request.setRemoteUser(TEST_USER_LOGIN)
                return request
            })
            .accept(MediaType.APPLICATION_JSON))
            .andExpect(status().isOk)
            .andExpect(content().string(TEST_USER_LOGIN))
    <%_ } _%>
    }
}
