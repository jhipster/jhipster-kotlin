<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.web.rest

<%_ if (databaseType === 'cassandra') { _%>
import <%= packageName %>.AbstractCassandraTest
<%_ } _%>
<%_ if (cacheProvider === 'redis') { _%>
import <%=packageName%>.RedisTestContainerExtension
<%_ } _%>
import <%= packageName %>.<%= mainClass %>
<%_ if (authenticationType === 'oauth2') { _%>
import <%=packageName%>.config.TestSecurityConfiguration
<%_ } _%>
<%_ if (reactive) { _%>
import <%= packageName %>.config.ReactivePageableHandlerMethodArgumentResolver
<%_ } _%>
<%_ if (databaseType !== 'cassandra' && databaseType !== 'couchbase') { _%>
import <%= packageName %>.domain.Authority
<%_ } _%>
import <%= packageName %>.domain.<%= asEntity('User') %>
import <%= packageName %>.repository.UserRepository
<%_ if (searchEngine === 'elasticsearch') { _%>
import <%= packageName %>.repository.search.UserSearchRepository
<%_ } _%>
import <%= packageName %>.security.ADMIN
import <%= packageName %>.security.USER
<%_ if (authenticationType !== 'oauth2') { _%>
import <%= packageName %>.service.MailService<% } %>
import <%= packageName %>.service.UserService
import <%= packageName %>.service.dto.<%= asDto('User') %>
import <%= packageName %>.service.mapper.UserMapper
import <%= packageName %>.web.rest.errors.ExceptionTranslator
<%_ if (authenticationType !== 'oauth2') { _%>
import <%= packageName %>.web.rest.vm.ManagedUserVM
<%_ } _%>
import org.apache.commons.lang3.RandomStringUtils
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
<%_ if (cacheProvider === 'redis') { _%>
import org.junit.jupiter.api.extension.ExtendWith
<%_ } _%>
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.context.SpringBootTest
<%_ if (cacheManagerIsAvailable === true) { _%>
import org.springframework.cache.CacheManager
<%_ } _%>
<%_ if (cacheProvider === 'memcached' ) { _%>
import org.springframework.cache.support.NoOpCacheManager
<%_ } _%>
<%_ if (!reactive) { _%>
import org.springframework.data.web.PageableHandlerMethodArgumentResolver
<%_ } _%>
import org.springframework.http.MediaType
<%_ if (!reactive) { _%>
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter
<%_ } _%>
<%_ if (reactive) { _%>
import org.springframework.test.web.reactive.server.WebTestClient
<%_ } _%>
<%_ if (!reactive) { _%>
import org.springframework.test.web.servlet.MockMvc
import org.springframework.test.web.servlet.setup.MockMvcBuilders
<%_ } _%>
<%_ if (databaseType === 'sql') { _%>
import org.springframework.transaction.annotation.Transactional
<%_ } _%>

<%_ if (databaseType === 'sql') { _%>
import javax.persistence.EntityManager
<%_ } _%>
<%_ if (databaseType !== 'cassandra') { _%>
import java.time.Instant
<%_ } _%>
<%_ if (databaseType === 'cassandra' || (authenticationType === 'oauth2' && databaseType !== 'couchbase')) { _%>
import java.util.UUID
<%_ } _%>

import org.assertj.core.api.Assertions.assertThat
<%_ if (!reactive) { _%>
    <%_ if (databaseType === 'sql' || databaseType === 'mongodb' || databaseType === 'couchbase') { _%>
import org.hamcrest.Matchers.hasItems
    <%_ } _%>
import org.hamcrest.Matchers.hasItem
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.content
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.status
<%_ } _%>
import kotlin.test.assertNotNull
<%_ if (cacheManagerIsAvailable === true) { _%>
import kotlin.test.assertNull
<%_ } _%>

/**
 * Integration tests for the [UserResource] REST controller.
 */
<%_ if (authenticationType === 'oauth2') { _%>
@SpringBootTest(classes = [<%= mainClass %>::class, TestSecurityConfiguration::class])
<%_ } else { _%>
@SpringBootTest(classes = [<%= mainClass %>::class])
<%_ } _%>
<%_ if (cacheProvider === 'redis') { _%>
@ExtendWith(RedisTestContainerExtension::class)
<%_ } _%>
class UserResourceIT <% if (databaseType === 'cassandra') { %>: AbstractCassandraTest() <% } %>{

    @Autowired
    private lateinit var userRepository: UserRepository
    <%_ if (searchEngine === 'elasticsearch') { _%>

    /**
     * This repository is mocked in the <%=packageName%>.repository.search test package.
     *
     * @see <%= packageName %>.repository.search.UserSearchRepositoryMockConfiguration
     */
    @Autowired
    private lateinit var mockUserSearchRepository: UserSearchRepository
    <%_ } _%>
    <%_ if (authenticationType !== 'oauth2') { _%>

    @Autowired
    private lateinit var mailService: MailService
    <%_ } _%>

    @Autowired
    private lateinit var userService: UserService

    @Autowired
    private lateinit var userMapper: UserMapper

    <%_ if (!reactive) { _%>
    @Autowired
    private lateinit var jacksonMessageConverter: MappingJackson2HttpMessageConverter

    @Autowired
    private lateinit var pageableArgumentResolver: PageableHandlerMethodArgumentResolver

    <%_ } _%>
    @Autowired
    private lateinit var exceptionTranslator: ExceptionTranslator
    <%_ if (databaseType === 'sql') { _%>

    @Autowired
    private lateinit var em: EntityManager
    <%_ } _%>
    <%_ if (cacheManagerIsAvailable === true) { _%>

    @Autowired
    private lateinit var cacheManager: CacheManager
    <%_ } _%>

    <%_ if (reactive) { _%>
    private lateinit var webTestClient: WebTestClient
    <%_ } else { _%>
    private lateinit var restUserMockMvc: MockMvc
    <%_ } _%>

    private lateinit var user: <%= asEntity('User') %>

    @BeforeEach
    fun setup() {
        <%_ if (cacheManagerIsAvailable === true) { _%>
        cacheManager.getCache(UserRepository.USERS_BY_LOGIN_CACHE)!!.clear()
        cacheManager.getCache(UserRepository.USERS_BY_EMAIL_CACHE)!!.clear()
        <%_ } _%>
        val userResource = UserResource(userService<% if (authenticationType !== 'oauth2') { %>, userRepository, mailService<% } %><% if (searchEngine === 'elasticsearch') { %>, mockUserSearchRepository<% } %>)

        <%_ if (reactive) { _%>
        this.webTestClient = WebTestClient.bindToController(userResource)
            .argumentResolvers { configurer -> configurer.addCustomResolver(ReactivePageableHandlerMethodArgumentResolver()) }
            .controllerAdvice(exceptionTranslator)
        <%_ } else { _%>
        this.restUserMockMvc = MockMvcBuilders.standaloneSetup(userResource)
            .setCustomArgumentResolvers(pageableArgumentResolver)
            .setControllerAdvice(exceptionTranslator)
            .setMessageConverters(jacksonMessageConverter)
        <%_ } _%>
            .build()
    }

    @BeforeEach
    fun initTest() {
        <%_ if (databaseType === 'couchbase') { _%>
        mockAuthentication()
        <%_ } _%>
        <%_ if (databaseType !== 'sql') { _%>
        userRepository.deleteAll()<% if (reactive) { %>.block()<% } %>
        user = createEntity()
        <%_ } _%>
        <%_ if (databaseType === 'sql') { _%>
        user = createEntity(em).apply {
            login = DEFAULT_LOGIN
            email = DEFAULT_EMAIL
        }
        <%_ } _%>
    }
<%_ if (authenticationType !== 'oauth2') { _%>

    @Test
    <%_ if (databaseType === 'sql') { _%>
    @Transactional
    <%_ } _%>
    @Throws(Exception::class)
    fun createUser() {
        val databaseSizeBeforeCreate = userRepository.findAll()<% if (reactive) { %>
            .collectList().block()!!<% } %>.size

        // Create the User
        val managedUserVM = ManagedUserVM().apply {
            login = DEFAULT_LOGIN
            password = DEFAULT_PASSWORD
            firstName = DEFAULT_FIRSTNAME
            lastName = DEFAULT_LASTNAME
            email = DEFAULT_EMAIL
            activated = true
            <%_ if (databaseType !== 'cassandra') { _%>
            imageUrl = DEFAULT_IMAGEURL
            <%_ } _%>
            langKey = DEFAULT_LANGKEY
            authorities = setOf(USER)
        }

        <%_ if (!reactive) { _%>
        restUserMockMvc.perform(
            post("/api/users")
                .contentType(APPLICATION_JSON_UTF8)
                .content(convertObjectToJsonBytes(managedUserVM))
        )
            .andExpect(status().isCreated)
        <%_ } else { _%>
        webTestClient.post().uri("/api/users")
            .contentType(APPLICATION_JSON_UTF8)
            .syncBody(convertObjectToJsonBytes(managedUserVM))
            .exchange()
            .expectStatus().isCreated
        <%_ } _%>

        // Validate the User in the database
        val userList = userRepository.findAll()<% if (reactive) { %>.collectList().block()
        assertNotNull(userList)<% } %>
        assertThat(userList).hasSize(databaseSizeBeforeCreate + 1)
        val testUser = userList[userList.size - 1]
        assertThat(testUser.login).isEqualTo(DEFAULT_LOGIN)
        assertThat(testUser.firstName).isEqualTo(DEFAULT_FIRSTNAME)
        assertThat(testUser.lastName).isEqualTo(DEFAULT_LASTNAME)
        assertThat(testUser.email).isEqualTo(DEFAULT_EMAIL)
        <%_ if (databaseType !== 'cassandra') { _%>
        assertThat(testUser.imageUrl).isEqualTo(DEFAULT_IMAGEURL)
        <%_ } _%>
        assertThat(testUser.langKey).isEqualTo(DEFAULT_LANGKEY)
    }

    @Test
    <%_ if (databaseType === 'sql') { _%>
    @Transactional
    <%_ } _%>
    @Throws(Exception::class)
    fun createUserWithExistingId() {
        val databaseSizeBeforeCreate = userRepository.findAll()<% if (reactive) { %>
            .collectList().block()!!<% } %>.size

        val managedUserVM = ManagedUserVM().apply {
            <%_ if (databaseType === 'cassandra') { _%>
            id = UUID.randomUUID().toString()
            <%_ } else if (databaseType === 'mongodb' || databaseType === 'couchbase') { _%>
            id = "1L"
            <%_ } else { _%>
            id = 1L
            <%_ } _%>
            login = DEFAULT_LOGIN
            password = DEFAULT_PASSWORD
            firstName = DEFAULT_FIRSTNAME
            lastName = DEFAULT_LASTNAME
            email = DEFAULT_EMAIL
            activated = true
            <%_ if (databaseType !== 'cassandra') { _%>
            imageUrl = DEFAULT_IMAGEURL
            <%_ } _%>
            langKey = DEFAULT_LANGKEY
            authorities = setOf(USER)
        }

        // An entity with an existing ID cannot be created, so this API call must fail
        <%_ if (!reactive) { _%>
        restUserMockMvc.perform(
            post("/api/users")
                .contentType(APPLICATION_JSON_UTF8)
                .content(convertObjectToJsonBytes(managedUserVM))
        )
            .andExpect(status().isBadRequest)
        <%_ } else { _%>
        webTestClient.post().uri("/api/users")
            .contentType(APPLICATION_JSON_UTF8)
            .syncBody(convertObjectToJsonBytes(managedUserVM))
            .exchange()
            .expectStatus().isBadRequest
        <%_ } _%>

        // Validate the User in the database
        val userList = userRepository.findAll()<% if (reactive) { %>.collectList().block()<% } %>
        assertThat(userList).hasSize(databaseSizeBeforeCreate)
    }

    @Test
    <%_ if (databaseType === 'sql') { _%>
    @Transactional
    <%_ } _%>
    @Throws(Exception::class)
    fun createUserWithExistingLogin() {
        // Initialize the database
        userRepository.save<% if (databaseType === 'sql') { %>AndFlush<% } %>(user)<% if (reactive) { %>.block()<% } %>
        <%_ if (searchEngine === 'elasticsearch') { _%>
        mockUserSearchRepository.save(user)
        <%_ } _%>
        val databaseSizeBeforeCreate = userRepository.findAll()<% if (reactive) { %>
            .collectList().block()!!<% } %>.size

        val managedUserVM = ManagedUserVM().apply {
            login = DEFAULT_LOGIN // this login should already be used
            password = DEFAULT_PASSWORD
            firstName = DEFAULT_FIRSTNAME
            lastName = DEFAULT_LASTNAME
            email = "anothermail@localhost"
            activated = true
            <%_ if (databaseType !== 'cassandra') { _%>
            imageUrl = DEFAULT_IMAGEURL
            <%_ } _%>
            langKey = DEFAULT_LANGKEY
            authorities = setOf(USER)
        }

        // Create the User
        <%_ if (!reactive) { _%>
        restUserMockMvc.perform(
            post("/api/users")
                .contentType(APPLICATION_JSON_UTF8)
                .content(convertObjectToJsonBytes(managedUserVM))
        )
            .andExpect(status().isBadRequest)
        <%_ } else { _%>
        webTestClient.post().uri("/api/users")
            .contentType(APPLICATION_JSON_UTF8)
            .syncBody(convertObjectToJsonBytes(managedUserVM))
            .exchange()
            .expectStatus().isBadRequest
        <%_ } _%>

        // Validate the User in the database
        val userList = userRepository.findAll()<% if (reactive) { %>.collectList().block()<% } %>
        assertThat(userList).hasSize(databaseSizeBeforeCreate)
    }

    @Test
    <%_ if (databaseType === 'sql') { _%>
    @Transactional
    <%_ } _%>
    @Throws(Exception::class)
    fun createUserWithExistingEmail() {
        // Initialize the database
        userRepository.save<% if (databaseType === 'sql') { %>AndFlush<% } %>(user)<% if (reactive) { %>.block()<% } %>
        <%_ if (searchEngine === 'elasticsearch') { _%>
        mockUserSearchRepository.save(user)
        <%_ } _%>
        val databaseSizeBeforeCreate = userRepository.findAll()<% if (reactive) { %>
            .collectList().block()!!<% } %>.size

        val managedUserVM = ManagedUserVM().apply {
            login = "anotherlogin"
            password = DEFAULT_PASSWORD
            firstName = DEFAULT_FIRSTNAME
            lastName = DEFAULT_LASTNAME
            email = DEFAULT_EMAIL // this email should already be used
            activated = true
            <%_ if (databaseType !== 'cassandra') { _%>
            imageUrl = DEFAULT_IMAGEURL
            <%_ } _%>
            langKey = DEFAULT_LANGKEY
            authorities = setOf(USER)
        }

        // Create the User
        <%_ if (!reactive) { _%>
        restUserMockMvc.perform(
            post("/api/users")
                .contentType(APPLICATION_JSON_UTF8)
                .content(convertObjectToJsonBytes(managedUserVM))
        )
            .andExpect(status().isBadRequest)
        <%_ } else { _%>
        webTestClient.post().uri("/api/users")
            .contentType(APPLICATION_JSON_UTF8)
            .syncBody(convertObjectToJsonBytes(managedUserVM))
            .exchange()
            .expectStatus().isBadRequest
        <%_ } _%>

        // Validate the User in the database
        val userList = userRepository.findAll()<% if (reactive) { %>.collectList().block()<% } %>
        assertThat(userList).hasSize(databaseSizeBeforeCreate)
    }
<%_ } _%>

    @Test
    <%_ if (databaseType === 'sql') { _%>
    @Transactional
    <%_ } _%>
    <%_ if (!reactive) { _%>
    @Throws(Exception::class)
    <%_ } _%>
    fun getAllUsers() {
        // Initialize the database
        userRepository.save<% if (databaseType === 'sql') { %>AndFlush<% } %>(user)<% if (reactive) { %>.block()<% } %>
        <%_ if (searchEngine === 'elasticsearch') { _%>
        mockUserSearchRepository.save(user)
        <%_ } _%>

        // Get all the users
        <%_ if (!reactive) { _%>
        restUserMockMvc.perform(
            get("/api/users<% if (databaseType === 'sql') { %>?sort=id,desc<% } %>")
                .accept(MediaType.APPLICATION_JSON)
        )
            .andExpect(status().isOk)
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
            .andExpect(jsonPath("\$.[*].login").value(hasItem(DEFAULT_LOGIN)))
            .andExpect(jsonPath("\$.[*].firstName").value(hasItem(DEFAULT_FIRSTNAME)))
            .andExpect(jsonPath("\$.[*].lastName").value(hasItem(DEFAULT_LASTNAME)))
            .andExpect(jsonPath("\$.[*].email").value(hasItem(DEFAULT_EMAIL)))
            <%_ if (databaseType !== 'cassandra') { _%>
            .andExpect(jsonPath("\$.[*].imageUrl").value(hasItem(DEFAULT_IMAGEURL)))
            <%_ } _%>
            .andExpect(jsonPath("\$.[*].langKey").value(hasItem(DEFAULT_LANGKEY)))
        <%_ } else { _%>
        val foundUser = webTestClient.get().uri("/api/users?sort=createdDate,DESC")
            .accept(MediaType.APPLICATION_JSON)
            .exchange()
            .expectStatus().isOk
            .expectHeader().contentType(MediaType.APPLICATION_JSON_UTF8)
            .returnResult(<%= asDto('User') %>::class.java).responseBody.blockFirst()

        assertNotNull(foundUser)
        assertThat(foundUser.login).isEqualTo(DEFAULT_LOGIN)
        assertThat(foundUser.firstName).isEqualTo(DEFAULT_FIRSTNAME)
        assertThat(foundUser.lastName).isEqualTo(DEFAULT_LASTNAME)
        assertThat(foundUser.email).isEqualTo(DEFAULT_EMAIL)
        <%_ if (databaseType !== 'cassandra') { _%>
        assertThat(foundUser.imageUrl).isEqualTo(DEFAULT_IMAGEURL)
        <%_ } _%>
        assertThat(foundUser.langKey).isEqualTo(DEFAULT_LANGKEY)
        <%_ } _%>
    }

    @Test
    <%_ if (databaseType === 'sql') { _%>
    @Transactional
    <%_ } _%>
    <%_ if (!reactive) { _%>
    @Throws(Exception::class)
    <%_ } _%>
    fun getUser() {
        // Initialize the database
        userRepository.save<% if (databaseType === 'sql') { %>AndFlush<% } %>(user)<% if (reactive) { %>.block()<% } %>
        <%_ if (searchEngine === 'elasticsearch') { _%>
        mockUserSearchRepository.save(user)
        <%_ } _%>
        <%_ if (cacheManagerIsAvailable === true) { _%>

        assertNull(cacheManager.getCache(UserRepository.USERS_BY_LOGIN_CACHE)!!.get(user.login!!))
        <%_ } _%>

        // Get the user
        <%_ if (!reactive) { _%>
        restUserMockMvc.perform(get("/api/users/{login}", user.login))
            .andExpect(status().isOk)
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
            .andExpect(jsonPath("\$.login").value(user.login!!))
            .andExpect(jsonPath("\$.firstName").value(DEFAULT_FIRSTNAME))
            .andExpect(jsonPath("\$.lastName").value(DEFAULT_LASTNAME))
            .andExpect(jsonPath("\$.email").value(DEFAULT_EMAIL))
            <%_ if (databaseType !== 'cassandra') { _%>
            .andExpect(jsonPath("\$.imageUrl").value(DEFAULT_IMAGEURL))
            <%_ } _%>
            .andExpect(jsonPath("\$.langKey").value(DEFAULT_LANGKEY))
        <%_ } else { _%>
        webTestClient.get().uri("/api/users/{login}", user.login)
            .exchange()
            .expectStatus().isOk
            .expectHeader().contentType(MediaType.APPLICATION_JSON_UTF8)
            .expectBody()
            .jsonPath("\$.login").isEqualTo(user.login)
            .jsonPath("\$.firstName").isEqualTo(DEFAULT_FIRSTNAME)
            .jsonPath("\$.lastName").isEqualTo(DEFAULT_LASTNAME)
            .jsonPath("\$.email").isEqualTo(DEFAULT_EMAIL)
            <%_ if (databaseType !== 'cassandra') { _%>
            .jsonPath("\$.imageUrl").isEqualTo(DEFAULT_IMAGEURL)
            <%_ } _%>
            .jsonPath("\$.langKey").isEqualTo(DEFAULT_LANGKEY)
        <%_ } _%>
        <%_ if (cacheProvider === 'memcached') { _%>
        if (cacheManager !is NoOpCacheManager) {
            assertThat(cacheManager.getCache(UserRepository.USERS_BY_LOGIN_CACHE)!!.get(user.login!!)).isNotNull
        }
        <%_ } else if (cacheManagerIsAvailable === true) { _%>

        assertNotNull(cacheManager.getCache(UserRepository.USERS_BY_LOGIN_CACHE)!!.get(user.login!!))
        <%_ } _%>
    }

    @Test
    <%_ if (databaseType === 'sql') { _%>
    @Transactional
    <%_ } _%>
    <%_ if (!reactive) { _%>
    @Throws(Exception::class)
    <%_ } _%>
    fun getNonExistingUser() {
        <%_ if (!reactive) { _%>
        restUserMockMvc.perform(get("/api/users/unknown"))
            .andExpect(status().isNotFound)
        <%_ } else { _%>
        webTestClient.get().uri("/api/users/unknown")
            .exchange()
            .expectStatus().isNotFound
        <%_ } _%>
    }
<%_ if (authenticationType !== 'oauth2') { _%>

    @Test
    <%_ if (databaseType === 'sql') { _%>
    @Transactional
    <%_ } _%>
    @Throws(Exception::class)
    fun updateUser() {
        // Initialize the database
        userRepository.save<% if (databaseType === 'sql') { %>AndFlush<% } %>(user)<% if (reactive) { %>.block()<% } %>
        <%_ if (searchEngine === 'elasticsearch') { _%>
        mockUserSearchRepository.save(user)
        <%_ } _%>
        val databaseSizeBeforeUpdate = userRepository.findAll()<% if (reactive) { %>
            .collectList().block()!!<% } %>.size

        // Update the user
        val updatedUser = userRepository.findById(user.id!!).<% if (reactive) { %>block<% } else { %>get<% } %>()
        assertNotNull(updatedUser)

        val managedUserVM = ManagedUserVM().apply {
            id = updatedUser.id
            login = updatedUser.login
            password = UPDATED_PASSWORD
            firstName = UPDATED_FIRSTNAME
            lastName = UPDATED_LASTNAME
            email = UPDATED_EMAIL
            activated = updatedUser.activated
            <%_ if (databaseType !== 'cassandra') { _%>
            imageUrl = UPDATED_IMAGEURL
            <%_ } _%>
            langKey = UPDATED_LANGKEY
            <%_ if (databaseType !== 'cassandra') { _%>
            createdBy = updatedUser.createdBy
            createdDate = updatedUser.createdDate
            lastModifiedBy = updatedUser.lastModifiedBy
            lastModifiedDate = updatedUser.lastModifiedDate
            <%_ } _%>
            authorities = setOf(USER)
        }

        <%_ if (!reactive) { _%>
        restUserMockMvc.perform(
            put("/api/users")
                .contentType(APPLICATION_JSON_UTF8)
                .content(convertObjectToJsonBytes(managedUserVM))
        )
            .andExpect(status().isOk)
        <%_ } else { _%>
        webTestClient.put().uri("/api/users")
            .contentType(APPLICATION_JSON_UTF8)
            .syncBody(convertObjectToJsonBytes(managedUserVM))
            .exchange()
            .expectStatus().isOk
        <%_ } _%>

        // Validate the User in the database
        val userList = userRepository.findAll()<% if (reactive) { %>.collectList().block()
        assertNotNull(userList)<% } %>
        assertThat(userList).hasSize(databaseSizeBeforeUpdate)
        val testUser = userList[userList.size - 1]
        assertThat(testUser.firstName).isEqualTo(UPDATED_FIRSTNAME)
        assertThat(testUser.lastName).isEqualTo(UPDATED_LASTNAME)
        assertThat(testUser.email).isEqualTo(UPDATED_EMAIL)
        <%_ if (databaseType !== 'cassandra') { _%>
        assertThat(testUser.imageUrl).isEqualTo(UPDATED_IMAGEURL)
        <%_ } _%>
        assertThat(testUser.langKey).isEqualTo(UPDATED_LANGKEY)
    }

    @Test
    <%_ if (databaseType === 'sql') { _%>
    @Transactional
    <%_ } _%>
    @Throws(Exception::class)
    fun updateUserLogin() {
        // Initialize the database
        userRepository.save<% if (databaseType === 'sql') { %>AndFlush<% } %>(user)<% if (reactive) { %>.block()<% } %>
        <%_ if (searchEngine === 'elasticsearch') { _%>
        mockUserSearchRepository.save(user)
        <%_ } _%>
        val databaseSizeBeforeUpdate = userRepository.findAll()<% if (reactive) { %>
            .collectList().block()!!<% } %>.size

        // Update the user
        val updatedUser = userRepository.findById(user.id!!).<% if (reactive) { %>block<% } else { %>get<% } %>()
        assertNotNull(updatedUser)

        val managedUserVM = ManagedUserVM().apply {
            id = updatedUser.id
            login = UPDATED_LOGIN
            password = UPDATED_PASSWORD
            firstName = UPDATED_FIRSTNAME
            lastName = UPDATED_LASTNAME
            email = UPDATED_EMAIL
            activated = updatedUser.activated
            <%_ if (databaseType !== 'cassandra') { _%>
            imageUrl = UPDATED_IMAGEURL
            <%_ } _%>
            langKey = UPDATED_LANGKEY
            <%_ if (databaseType !== 'cassandra') { _%>
            createdBy = updatedUser.createdBy
            createdDate = updatedUser.createdDate
            lastModifiedBy = updatedUser.lastModifiedBy
            lastModifiedDate = updatedUser.lastModifiedDate
            <%_ } _%>
            authorities = setOf(USER)
        }

        <%_ if (!reactive) { _%>
        restUserMockMvc.perform(
            put("/api/users")
                .contentType(APPLICATION_JSON_UTF8)
                .content(convertObjectToJsonBytes(managedUserVM))
        )
            .andExpect(status().isOk)
        <%_ } else { _%>
        webTestClient.put().uri("/api/users")
            .contentType(APPLICATION_JSON_UTF8)
            .syncBody(convertObjectToJsonBytes(managedUserVM))
            .exchange()
            .expectStatus().isOk
        <%_ } _%>

        // Validate the User in the database
        val userList = userRepository.findAll()<% if (reactive) { %>.collectList().block()
        assertNotNull(userList)<% } %>
        assertThat(userList).hasSize(databaseSizeBeforeUpdate)
        val testUser = userList[userList.size - 1]
        assertThat(testUser.login).isEqualTo(UPDATED_LOGIN)
        assertThat(testUser.firstName).isEqualTo(UPDATED_FIRSTNAME)
        assertThat(testUser.lastName).isEqualTo(UPDATED_LASTNAME)
        assertThat(testUser.email).isEqualTo(UPDATED_EMAIL)
        <%_ if (databaseType !== 'cassandra') { _%>
        assertThat(testUser.imageUrl).isEqualTo(UPDATED_IMAGEURL)
        <%_ } _%>
        assertThat(testUser.langKey).isEqualTo(UPDATED_LANGKEY)
    }

    @Test
    <%_ if (databaseType === 'sql') { _%>
    @Transactional
    <%_ } _%>
    @Throws(Exception::class)
    fun updateUserExistingEmail() {
        // Initialize the database with 2 users
        userRepository.save<% if (databaseType === 'sql') { %>AndFlush<% } %>(user)<% if (reactive) { %>.block()<% } %>
        <%_ if (searchEngine === 'elasticsearch') { _%>
        mockUserSearchRepository.save(user)
        <%_ } _%>

        val anotherUser = <%= asEntity('User') %>(
            <%_ if (databaseType === 'cassandra') { _%>
            id = UUID.randomUUID().toString(),
            <%_ } _%>
            login = "jhipster",
            password = RandomStringUtils.random(60),
            activated = true,
            email = "jhipster@localhost",
            firstName = "java",
            lastName = "hipster",
            <%_ if (databaseType !== 'cassandra') { _%>
            imageUrl = "",
            <%_ } _%>
            langKey = "en"
        )
        userRepository.save<% if (databaseType === 'sql') { %>AndFlush<% } %>(anotherUser)<% if (reactive) { %>.block()<% } %>
        <%_ if (searchEngine === 'elasticsearch') { _%>
        mockUserSearchRepository.save(anotherUser)
        <%_ } _%>

        // Update the user
        val updatedUser = userRepository.findById(user.id!!).<% if (reactive) { %>block<% } else { %>get<% } %>()
        assertNotNull(updatedUser)

        val managedUserVM = ManagedUserVM().apply {
            id = updatedUser.id
            login = updatedUser.login
            password = updatedUser.password
            firstName = updatedUser.firstName
            lastName = updatedUser.lastName
            email = "jhipster@localhost" // this email should already be used by anotherUser
            activated = updatedUser.activated
            <%_ if (databaseType !== 'cassandra') { _%>
            imageUrl = updatedUser.imageUrl
            <%_ } _%>
            langKey = updatedUser.langKey
            <%_ if (databaseType !== 'cassandra') { _%>
            createdBy = updatedUser.createdBy
            createdDate = updatedUser.createdDate
            lastModifiedBy = updatedUser.lastModifiedBy
            lastModifiedDate = updatedUser.lastModifiedDate
            <%_ } _%>
            authorities = setOf(USER)
        }

        <%_ if (!reactive) { _%>
        restUserMockMvc.perform(
            put("/api/users")
                .contentType(APPLICATION_JSON_UTF8)
                .content(convertObjectToJsonBytes(managedUserVM))
        )
            .andExpect(status().isBadRequest)
        <%_ } else { _%>
        webTestClient.put().uri("/api/users")
            .contentType(APPLICATION_JSON_UTF8)
            .syncBody(convertObjectToJsonBytes(managedUserVM))
            .exchange()
            .expectStatus().isBadRequest
        <%_ } _%>
    }

    @Test
    <%_ if (databaseType === 'sql') { _%>
    @Transactional
    <%_ } _%>
    @Throws(Exception::class)
    fun updateUserExistingLogin() {
        // Initialize the database
        userRepository.save<% if (databaseType === 'sql') { %>AndFlush<% } %>(user)<% if (reactive) { %>.block()<% } %>
        <%_ if (searchEngine === 'elasticsearch') { _%>
        mockUserSearchRepository.save(user)
        <%_ } _%>

        val anotherUser = <%= asEntity('User') %>(
            <%_ if (databaseType === 'cassandra') { _%>
            id = UUID.randomUUID().toString(),
            <%_ } _%>
            login = "jhipster",
            password = RandomStringUtils.random(60),
            activated = true,
            email = "jhipster@localhost",
            firstName = "java",
            lastName = "hipster",
            <%_ if (databaseType !== 'cassandra') { _%>
            imageUrl = "",
            <%_ } _%>
            langKey = "en"
        )
        userRepository.save<% if (databaseType === 'sql') { %>AndFlush<% } %>(anotherUser)<% if (reactive) { %>.block()<% } %>
        <%_ if (searchEngine === 'elasticsearch') { _%>
        mockUserSearchRepository.save(anotherUser)
        <%_ } _%>

        // Update the user
        val updatedUser = userRepository.findById(user.id!!).<% if (reactive) { %>block<% } else { %>get<% } %>()
        assertNotNull(updatedUser)

        val managedUserVM = ManagedUserVM().apply {
            id = updatedUser.id
            login = "jhipster" // this login should already be used by anotherUser
            password = updatedUser.password
            firstName = updatedUser.firstName
            lastName = updatedUser.lastName
            email = updatedUser.email
            activated = updatedUser.activated
            <%_ if (databaseType !== 'cassandra') { _%>
            imageUrl = updatedUser.imageUrl
            <%_ } _%>
            langKey = updatedUser.langKey
            <%_ if (databaseType !== 'cassandra') { _%>
            createdBy = updatedUser.createdBy
            createdDate = updatedUser.createdDate
            lastModifiedBy = updatedUser.lastModifiedBy
            lastModifiedDate = updatedUser.lastModifiedDate
            <%_ } _%>
            authorities = setOf(USER)
        }

        <%_ if (!reactive) { _%>
        restUserMockMvc.perform(
            put("/api/users")
                .contentType(APPLICATION_JSON_UTF8)
                .content(convertObjectToJsonBytes(managedUserVM))
        )
            .andExpect(status().isBadRequest)
        <%_ } else { _%>
        webTestClient.put().uri("/api/users")
            .contentType(APPLICATION_JSON_UTF8)
            .syncBody(convertObjectToJsonBytes(managedUserVM))
            .exchange()
            .expectStatus().isBadRequest
        <%_ } _%>
    }

    @Test
    <%_ if (databaseType === 'sql') { _%>
    @Transactional
    <%_ } _%>
    <%_ if (!reactive) { _%>
    @Throws(Exception::class)
    <%_ } _%>
    fun deleteUser() {
        // Initialize the database
        userRepository.save<% if (databaseType === 'sql') { %>AndFlush<% } %>(user)<% if (reactive) { %>.block()<% } %>
        <%_ if (searchEngine === 'elasticsearch') { _%>
        mockUserSearchRepository.save(user)
        <%_ } _%>
        val databaseSizeBeforeDelete = userRepository.findAll()<% if (reactive) { %>
            .collectList().block()!!<% } %>.size

        // Delete the user
        <%_ if (!reactive) { _%>
        restUserMockMvc.perform(
            delete("/api/users/{login}", user.login)
                .accept(APPLICATION_JSON_UTF8)
        )
            .andExpect(status().isNoContent)
        <%_ } else { _%>
        webTestClient.delete().uri("/api/users/{login}", user.login)
            .accept(APPLICATION_JSON_UTF8)
            .exchange()
            .expectStatus().isNoContent
        <%_ } _%>
        <%_ if (cacheManagerIsAvailable === true) { _%>

        assertNull(cacheManager.getCache(UserRepository.USERS_BY_LOGIN_CACHE)!!.get(user.login!!))
        <%_ } _%>

        // Validate the database is empty
        val userList = userRepository.findAll()<% if (reactive) { %>.collectList().block()<% } %>
        assertThat(userList).hasSize(databaseSizeBeforeDelete - 1)
    }
    <%_ } _%>
    <%_ if ((databaseType === 'sql' || databaseType === 'mongodb' || databaseType === 'couchbase')
        && (!(authenticationType === 'oauth2' && applicationType === 'microservice'))) { _%>

    @Test
    <%_ if (databaseType === 'sql') { _%>
    @Transactional
    <%_ } _%>
    <%_ if (!reactive) { _%>
    @Throws(Exception::class)
    <%_ } _%>
    fun getAllAuthorities() {
        <%_ if (!reactive) { _%>
        restUserMockMvc.perform(
            get("/api/users/authorities")
                .accept(APPLICATION_JSON_UTF8)
                .contentType(APPLICATION_JSON_UTF8)
        )
            .andExpect(status().isOk)
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
            .andExpect(jsonPath("\$").isArray)
            .andExpect(jsonPath("\$").value(hasItems(USER, ADMIN)))
        <%_ } else { _%>
        webTestClient.get().uri("/api/users/authorities")
            .accept(APPLICATION_JSON_UTF8)
            .exchange()
            .expectStatus().isOk
            .expectHeader().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE)
            .expectBody()
            .jsonPath("\$").isArray
            .jsonPath("\$[?(@=='" + ADMIN + "')]").hasJsonPath()
            .jsonPath("\$[?(@=='" + USER + "')]").hasJsonPath()
        <%_ } _%>
    }
    <%_ } _%>

    @Test
    <%_ if (databaseType === 'sql') { _%>
    @Transactional
    <%_ } _%>
    @Throws(Exception::class)
    fun testUserEquals() {
        equalsVerifier(<%= asEntity('User') %>::class)
        val user1 = <%= asEntity('User') %>(id = <% if (databaseType === 'sql' && authenticationType !== 'oauth2') { %>1L<% } else { %>"id1"<% } %>)
        val user2 = <%= asEntity('User') %>(id = user1.id)
        assertThat(user1).isEqualTo(user2)
        user2.id = <% if (databaseType === 'sql' && authenticationType !== 'oauth2') { %>2L<% } else { %>"id2"<% } %>
        assertThat(user1).isNotEqualTo(user2)
        user1.id = null
        assertThat(user1).isNotEqualTo(user2)
    }

    @Test
    fun testUserDTOtoUser() {
        val userDTO = <%= asDto('User') %>(
            id = DEFAULT_ID,
            login = DEFAULT_LOGIN,
            firstName = DEFAULT_FIRSTNAME,
            lastName = DEFAULT_LASTNAME,
            email = DEFAULT_EMAIL,
            activated = true,
            <%_ if (databaseType !== 'cassandra') { _%>
            imageUrl = DEFAULT_IMAGEURL,
            <%_ } _%>
            langKey = DEFAULT_LANGKEY,
            <%_ if (databaseType !== 'cassandra') { _%>
            createdBy = DEFAULT_LOGIN,
            lastModifiedBy = DEFAULT_LOGIN,
            <%_ } _%>
            authorities = setOf(USER)
        )

        val user = userMapper.userDTOToUser(userDTO)
        assertNotNull(user)
        assertThat(user.id).isEqualTo(DEFAULT_ID)
        assertThat(user.login).isEqualTo(DEFAULT_LOGIN)
        assertThat(user.firstName).isEqualTo(DEFAULT_FIRSTNAME)
        assertThat(user.lastName).isEqualTo(DEFAULT_LASTNAME)
        assertThat(user.email).isEqualTo(DEFAULT_EMAIL)
        assertThat(user.activated).isEqualTo(true)
        <%_ if (databaseType !== 'cassandra') { _%>
        assertThat(user.imageUrl).isEqualTo(DEFAULT_IMAGEURL)
        <%_ } _%>
        assertThat(user.langKey).isEqualTo(DEFAULT_LANGKEY)
        <%_ if (databaseType !== 'cassandra') { _%>
        assertThat(user.createdBy).isNull()
        assertThat(user.createdDate).isNotNull()
        assertThat(user.lastModifiedBy).isNull()
        assertThat(user.lastModifiedDate).isNotNull()
        <%_ } _%>
        assertThat(user.authorities)<% if (databaseType !== 'cassandra' && databaseType !== 'couchbase') { %>.extracting("name")<%_ } _%>.containsExactly(USER)
    }

    @Test
    fun testUserToUserDTO() {
        user.id = DEFAULT_ID
        <%_ if (databaseType !== 'cassandra') { _%>
        user.createdBy = DEFAULT_LOGIN
        user.createdDate = Instant.now()
        user.lastModifiedBy = DEFAULT_LOGIN
        user.lastModifiedDate = Instant.now()
        <%_ } _%>
        <%_ if (databaseType !== 'cassandra' && databaseType !== 'couchbase') { _%>
        user.authorities = mutableSetOf(Authority(name = USER))
        <%_ } else { _%>
        user.authorities = mutableSetOf(USER)
        <%_ } _%>

        val userDTO = userMapper.userToUserDTO(user)

        assertThat(userDTO.id).isEqualTo(DEFAULT_ID)
        assertThat(userDTO.login).isEqualTo(DEFAULT_LOGIN)
        assertThat(userDTO.firstName).isEqualTo(DEFAULT_FIRSTNAME)
        assertThat(userDTO.lastName).isEqualTo(DEFAULT_LASTNAME)
        assertThat(userDTO.email).isEqualTo(DEFAULT_EMAIL)
        assertThat(userDTO.isActivated()).isEqualTo(true)
        <%_ if (databaseType !== 'cassandra') { _%>
        assertThat(userDTO.imageUrl).isEqualTo(DEFAULT_IMAGEURL)
        <%_ } _%>
        assertThat(userDTO.langKey).isEqualTo(DEFAULT_LANGKEY)
        <%_ if (databaseType !== 'cassandra') { _%>
        assertThat(userDTO.createdBy).isEqualTo(DEFAULT_LOGIN)
        assertThat(userDTO.createdDate).isEqualTo(user.createdDate)
        assertThat(userDTO.lastModifiedBy).isEqualTo(DEFAULT_LOGIN)
        assertThat(userDTO.lastModifiedDate).isEqualTo(user.lastModifiedDate)
        <%_ } _%>
        assertThat(userDTO.authorities).containsExactly(USER)
        assertThat(userDTO.toString()).isNotNull()
    }
    <%_ if (databaseType === 'sql' || databaseType === 'mongodb') { _%>

    @Test
    fun testAuthorityEquals() {
        val authorityA = Authority()
        assertThat(authorityA).isEqualTo(authorityA)
        assertThat(authorityA).isNotEqualTo(null)
        assertThat(authorityA).isNotEqualTo(Any())
        assertThat(authorityA.hashCode()).isEqualTo(31)
        assertThat(authorityA.toString()).isNotNull()

        val authorityB = Authority()
        assertThat(authorityA.name).isEqualTo(authorityB.name)

        authorityB.name = ADMIN
        assertThat(authorityA).isNotEqualTo(authorityB)

        authorityA.name = USER
        assertThat(authorityA).isNotEqualTo(authorityB)

        authorityB.name = USER
        assertThat(authorityA).isEqualTo(authorityB)
        assertThat(authorityA.hashCode()).isEqualTo(authorityB.hashCode())
    }
    <%_ } _%>

    companion object {

        private const val DEFAULT_LOGIN = "johndoe"
        <%_ if (authenticationType !== 'oauth2') { _%>
        private const val UPDATED_LOGIN = "jhipster"
        <%_ } _%>

        <%_ if (databaseType === 'sql' && authenticationType !== 'oauth2') { _%>
        private const val DEFAULT_ID = 1L
        <%_ } else if (databaseType === 'couchbase'){ _%>
        private const val DEFAULT_ID = <%= asEntity('User') %>.PREFIX + DEFAULT_LOGIN
        <%_ } else { _%>
        private const val DEFAULT_ID = "id1"
        <%_ } _%>

        private const val DEFAULT_PASSWORD = "passjohndoe"
        <%_ if (authenticationType !== 'oauth2') { _%>
        private const val UPDATED_PASSWORD = "passjhipster"
        <%_ } _%>

        private const val DEFAULT_EMAIL = "johndoe@localhost"
        <%_ if (authenticationType !== 'oauth2') { _%>
        private const val UPDATED_EMAIL = "jhipster@localhost"
        <%_ } _%>

        private const val DEFAULT_FIRSTNAME = "john"
        <%_ if (authenticationType !== 'oauth2') { _%>
        private const val UPDATED_FIRSTNAME = "jhipsterFirstName"
        <%_ } _%>

        private const val DEFAULT_LASTNAME = "doe"
        <%_ if (authenticationType !== 'oauth2') { _%>
        private const val UPDATED_LASTNAME = "jhipsterLastName"
        <%_ } _%>

        <%_ if (databaseType !== 'cassandra') { _%>
        private const val DEFAULT_IMAGEURL = "http://placehold.it/50x50"
        <%_ if (authenticationType !== 'oauth2') { _%>
        private const val UPDATED_IMAGEURL = "http://placehold.it/40x40"
        <%_ } _%>

        <%_ } _%>
        private const val DEFAULT_LANGKEY = "en"
        <%_ if (authenticationType !== 'oauth2') { _%>
        private const val UPDATED_LANGKEY = "fr"
        <%_ } _%>

        /**
         * Create a User.
         *
         * This is a static method, as tests for other entities might also need it,
         * if they test an entity which has a required relationship to the User entity.
         */
        @JvmStatic
        fun createEntity(<% if (databaseType === 'sql') { %>em: EntityManager?<% } %>): <%= asEntity('User') %> {
            return <%= asEntity('User') %>(
                <%_ if (databaseType === 'cassandra' || (authenticationType === 'oauth2' && databaseType !== 'couchbase')) { _%>
                id = UUID.randomUUID().toString(),
                <%_ } _%>
                login = DEFAULT_LOGIN<% if (databaseType === 'sql') { %> + RandomStringUtils.randomAlphabetic(5)<% } %>,
                <%_ if (authenticationType !== 'oauth2') { _%>
                password = RandomStringUtils.random(60),
                <%_ } _%>
                activated = true,
                email = <% if (databaseType === 'sql') { %>RandomStringUtils.randomAlphabetic(5) + <% } %>DEFAULT_EMAIL,
                firstName = DEFAULT_FIRSTNAME,
                lastName = DEFAULT_LASTNAME,
                <%_ if (databaseType !== 'cassandra') { _%>
                imageUrl = DEFAULT_IMAGEURL,
                <%_ } _%>
                langKey = DEFAULT_LANGKEY
            )
        }
    }
}
