<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.web.rest

import <%= packageName %>.<%= mainClass %>
<%_ if (cacheProvider === 'redis') { _%>
import <%=packageName%>.RedisTestContainerExtension
<%_ } _%>
<%_ if (authenticationType === 'uaa') { _%>
import <%=packageName%>.config.SecurityBeanOverrideConfiguration
<%_ } _%>
<%_ if (authenticationType === 'oauth2') { _%>
import <%=packageName%>.config.TestSecurityConfiguration
<%_ } _%>
import <%= packageName %>.service.<%= upperFirstCamelCase(baseName) %>KafkaProducer
import <%= packageName %>.service.<%= upperFirstCamelCase(baseName) %>KafkaConsumer
import org.assertj.core.api.Assertions
import org.junit.jupiter.api.BeforeAll
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.TestInstance
import org.springframework.beans.factory.annotation.Autowired
<%_ if (cacheProvider === 'redis') { _%>
import org.junit.jupiter.api.extension.ExtendWith
<%_ } _%>
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.test.annotation.DirtiesContext
import org.springframework.test.web.servlet.MockMvc
import org.springframework.test.web.servlet.setup.MockMvcBuilders
import org.testcontainers.containers.KafkaContainer

import org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.status

<%_ if (authenticationType === 'oauth2') { _%>
@SpringBootTest(classes = [<%= mainClass %>::class, TestSecurityConfiguration::class])
<%_ } else if (authenticationType === 'uaa' && applicationType !== 'uaa') { _%>
@SpringBootTest(classes = [SecurityBeanOverrideConfiguration::class, <%= mainClass %>::class])
<%_ } else { _%>
@SpringBootTest(classes = [<%= mainClass %>::class])
<%_ } _%>
@DirtiesContext(classMode = DirtiesContext.ClassMode.BEFORE_CLASS)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
<%_ if (cacheProvider === 'redis') { _%>
@ExtendWith(RedisTestContainerExtension::class)
<%_ } _%>
class <%= upperFirstCamelCase(baseName) %>KafkaResourceIT {

    @Autowired
    private lateinit var producer: <%= upperFirstCamelCase(baseName) %>KafkaProducer
    
    @Autowired
    private lateinit var consumer: <%= upperFirstCamelCase(baseName) %>KafkaConsumer

    private lateinit var restMockMvc: MockMvc

    private var started = false

    private lateinit var kafkaContainer: KafkaContainer

    private var MAX_ATTEMPT = 5

    @BeforeAll
    fun startServer() {
        if (!started) {
            startTestcontainer()
            started = true
        }
    }

    private fun startTestcontainer() {
        kafkaContainer = KafkaContainer("<%= KAFKA_VERSION %>")
        kafkaContainer.start()
        System.setProperty("kafkaBootstrapServers", kafkaContainer.getBootstrapServers())
    }


    @BeforeEach
    fun setup() {
        val kafkaResource = <%= upperFirstCamelCase(baseName) %>KafkaResource(producer)

        this.restMockMvc = MockMvcBuilders.standaloneSetup(kafkaResource)
            .build()

        producer.init()
        consumer.start()
    }

    @Test
    @Throws(Exception::class)
    fun producedMessageHasBeenConsumed() {
        restMockMvc.perform(post("/api/<%= dasherizedBaseName %>-kafka/publish?message=test"))
            .andExpect(status().isOk)

        val metrics = consumer.getKafkaConsumer().metrics();

        val recordsConsumedTotalMetric =
            metrics.entries.first { "records-consumed-total" == it.key.name() }.value

        val expectedTotalConsumedMessage = 1.0
        var totalConsumedMessage: Double
        var attempt = 0

        do {
            totalConsumedMessage = recordsConsumedTotalMetric.metricValue() as Double
            Thread.sleep(200)
        } while(!totalConsumedMessage.equals(expectedTotalConsumedMessage) && attempt++ < MAX_ATTEMPT)

        Assertions.assertThat(attempt).isLessThan(MAX_ATTEMPT)
        Assertions.assertThat(totalConsumedMessage).isEqualTo(expectedTotalConsumedMessage)
    }

}
