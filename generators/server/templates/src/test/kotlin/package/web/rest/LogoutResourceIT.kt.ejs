<%#
 Copyright 2013-2018 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.web.rest

import <%=packageName%>.<%= mainClass %>
<%_ if (cacheProvider === 'redis') { _%>
import <%=packageName%>.RedisTestContainerExtension
<%_ } _%>
import <%=packageName%>.config.TestSecurityConfiguration
import <%=packageName%>.security.USER
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
<%_ if (cacheProvider === 'redis') { _%>
import org.junit.jupiter.api.extension.ExtendWith
<%_ } _%>
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.http.MediaType
import org.springframework.security.core.GrantedAuthority
import org.springframework.security.core.authority.SimpleGrantedAuthority
import org.springframework.security.core.context.SecurityContextHolder
import org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken
import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository
import org.springframework.security.oauth2.core.oidc.OidcIdToken
import org.springframework.security.oauth2.core.oidc.user.DefaultOidcUser
import org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter
import org.springframework.test.web.servlet.MockMvc
import org.springframework.test.web.servlet.setup.MockMvcBuilders
import org.springframework.web.context.WebApplicationContext

import java.time.Instant

import org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.content
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.status

private const val ID_TOKEN = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9" +
    ".eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsIm" +
    "p0aSI6ImQzNWRmMTRkLTA5ZjYtNDhmZi04YTkzLTdjNmYwMzM5MzE1OSIsImlhdCI6MTU0M" +
    "Tk3MTU4MywiZXhwIjoxNTQxOTc1MTgzfQ.QaQOarmV8xEUYV7yvWzX3cUE_4W1luMcWCwpr" +
    "oqqUrg"

/**
 * Integration tests for the [LogoutResource] REST controller.
 */
@SpringBootTest(classes = [<%= mainClass %>::class, TestSecurityConfiguration::class])
<%_ if (cacheProvider === 'redis') { _%>
@ExtendWith(RedisTestContainerExtension::class)
<%_ } _%>
class LogoutResourceIT {

    @Autowired
    private lateinit var registrations: ClientRegistrationRepository

    @Autowired
    private lateinit var context: WebApplicationContext

    private lateinit var restLogoutMockMvc: MockMvc

    @BeforeEach
    fun before() {
        val claims = mapOf(
            "groups" to "ROLE_USER",
            "sub" to 123
        )
        val idToken = OidcIdToken(ID_TOKEN, Instant.now(), Instant.now().plusSeconds(60), claims)
        SecurityContextHolder.getContext().authentication = authenticationToken(idToken)
        val authInjector = SecurityContextHolderAwareRequestFilter()
        authInjector.afterPropertiesSet()

        restLogoutMockMvc = MockMvcBuilders.webAppContextSetup(this.context).build()
    }

    @Test
    @Throws(Exception::class)
    fun getLogoutInformation() {
        val logoutUrl = this.registrations.findByRegistrationId("oidc").providerDetails
            .configurationMetadata["end_session_endpoint"].toString()
        restLogoutMockMvc.perform(post("/api/logout"))
            .andExpect(status().isOk)
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
            .andExpect(jsonPath("\$.logoutUrl").value(logoutUrl))
            .andExpect(jsonPath("\$.idToken").value(ID_TOKEN))
    }
}

private fun authenticationToken(idToken: OidcIdToken): OAuth2AuthenticationToken {
    val authorities = listOf(SimpleGrantedAuthority(USER))
    val user = DefaultOidcUser(authorities, idToken)
    return OAuth2AuthenticationToken(user, authorities, "oidc")
}
