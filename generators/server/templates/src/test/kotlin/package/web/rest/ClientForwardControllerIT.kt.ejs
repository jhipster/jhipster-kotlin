<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.web.rest

<%_ if (databaseType === 'cassandra') { _%>
import <%= packageName %>.AbstractCassandraTest
<%_ } _%>
import <%=packageName%>.<%= mainClass %>
<%_ if (authenticationType === 'oauth2') { _%>
import <%=packageName%>.config.TestSecurityConfiguration
<%_ } _%>
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.http.MediaType
<%_ if (messageBroker === 'kafka') { _%>
import org.springframework.kafka.test.context.EmbeddedKafka
<%_ } _%>
import org.springframework.test.context.junit4.SpringRunner
import org.springframework.test.web.servlet.MockMvc
import org.springframework.test.web.servlet.setup.MockMvcBuilders
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RestController

import org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.content
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.forwardedUrl
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.status

/**
 * Integration tests for the [ClientForwardController] REST controller.
 */
<%_ if (messageBroker === 'kafka') { _%>
@EmbeddedKafka
<%_ } _%>
<%_ if (authenticationType === 'oauth2') { _%>
@SpringBootTest(classes = [<%= mainClass %>::class, TestSecurityConfiguration::class])
<%_ } else { _%>
@SpringBootTest(classes = [<%= mainClass %>::class])
<%_ } _%>
class ClientForwardControllerIT <% if (databaseType === 'cassandra') { %>: AbstractCassandraTest() <% } %>{

    private lateinit var restMockMvc: MockMvc

    @BeforeEach
    fun setup() {
        val clientForwardController = ClientForwardController()
        this.restMockMvc = MockMvcBuilders
            .standaloneSetup(clientForwardController, TestController())
            .build()
    }

    @Test
    @Throws(Exception::class)
    fun getBackendEndpoint() {
        restMockMvc.perform(get("/test"))
            .andExpect(status().isOk)
            .andExpect(content().contentTypeCompatibleWith(MediaType.TEXT_PLAIN_VALUE))
            .andExpect(content().string("test"))
    }

    @Test
    @Throws(Exception::class)
    fun getClientEndpoint() {
        val perform = restMockMvc.perform(get("/non-existant-mapping"))
        perform
            .andExpect(status().isOk)
            .andExpect(forwardedUrl("/"))
    }

    @Test
    @Throws(Exception::class)
    fun getNestedClientEndpoint() {
        restMockMvc.perform(get("/admin/user-management"))
            .andExpect(status().isOk)
            .andExpect(forwardedUrl("/"))
    }

    @RestController
    inner class TestController {
        @RequestMapping(value = ["/test"])
        fun test() = "test"
    }
}
