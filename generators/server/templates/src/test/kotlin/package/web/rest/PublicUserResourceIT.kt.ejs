<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

This file is part of the JHipster project, see https://jhipster.github.io/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License")
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.web.rest

<%_ if (databaseType === 'cassandra') { _%>
import <%= packageName %>.AbstractCassandraTest
<%_ } _%>
import <%= packageName %>.IntegrationTest
<%_ if (databaseType === 'sql' && reactive) { _%>
import <%= packageName %>.config.Constants
<%_ } _%>
<%_ if (authenticationType === 'oauth2') { _%>
import <%= packageName %>.config.TestSecurityConfiguration
<%_ } _%>
import <%= packageName %>.domain.<%= asEntity('User') %>
import <%= packageName %>.repository.UserRepository
<%_ if (searchEngine === 'elasticsearch') { _%>
import <%= packageName %>.repository.search.UserSearchRepository
<%_ } _%>
import <%= packageName %>.security.AuthoritiesConstants
<%_ if (databaseType === 'sql' && reactive) { _%>
import <%= packageName %>.service.EntityManager
<%_ } _%>
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.springframework.beans.factory.annotation.Autowired
<%_ if (!reactive) { _%>
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc
<%_ } else { _%>
import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient
<%_ } _%>
<%_ if (cacheManagerIsAvailable === true) { _%>
import org.springframework.cache.CacheManager
<%_ } _%>
<%_ if (cacheProvider === 'memcached' ) { _%>
import org.springframework.cache.support.NoOpCacheManager
<%_ } _%>
import org.springframework.http.MediaType
<%_ if (databaseType === 'couchbase') { _%>
import org.springframework.security.core.context.SecurityContextHolder
import org.springframework.security.test.context.TestSecurityContextHolder
<%_ } _%>
import org.springframework.security.test.context.support.WithMockUser
<%_ if (reactive) { _%>
import <%= packageName %>.service.dto.<%= asDto('User') %>
import org.springframework.test.web.reactive.server.WebTestClient
<%_ } _%>
<%_ if (!reactive) { _%>
import org.springframework.test.web.servlet.MockMvc
<%_ } _%>
<%_ if (databaseType === 'sql' && !reactive) { _%>
import org.springframework.transaction.annotation.Transactional
<%_ } _%>
<%_ if (reactive && searchEngine === 'elasticsearch') { _%>
import reactor.core.publisher.Mono
<%_ } _%>

<%_ if (databaseType === 'sql' && !reactive) { _%>
import javax.persistence.EntityManager
<%_ } _%>
<%_ if (databaseType === 'cassandra' || databaseType === 'couchbase') { _%>
import java.util.stream.Collectors
import java.util.stream.Stream
<%_ } _%>
<%_ if (databaseType === 'cassandra') { _%>
import java.util.UUID
<%_ } _%>

<%_ if (reactive) { _%>
import org.assertj.core.api.Assertions.assertThat
<%_ } _%>
<%_ if (reactive && searchEngine === 'elasticsearch') { _%>
import org.mockito.Mockito.*
<%_ } _%>
<%_ if (!reactive) { _%>
    <%_ if (databaseType === 'sql' || databaseType === 'mongodb' || databaseType === 'neo4j' || databaseType === 'couchbase') { _%>
import org.hamcrest.Matchers.hasItems
    <%_ } _%>
import org.hamcrest.Matchers.hasItem
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.*
<%_ } else if (testsNeedCsrf) { _%>
import org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers.csrf
<%_ } _%>

/**
 * Integration tests for the {@link UserResource} REST controller.
 */
<%_ if (!reactive) { _%>
@AutoConfigureMockMvc
<%_ } else { _%>
@AutoConfigureWebTestClient
<%_ } _%>
@WithMockUser(authorities = AuthoritiesConstants.ADMIN)
@IntegrationTest
class PublicUserResourceIT <% if (databaseType === 'cassandra') { %>: AbstractCassandraTest() <% } %>{

    private static final String DEFAULT_LOGIN = "johndoe"

    @Autowired
    private lateinit var userRepository: UserRepository
    <%_ if (searchEngine === 'elasticsearch') { _%>

    /**
     * This repository is mocked in the <%= packageName %>.repository.search test package.
     *
     * @see <%= packageName %>.repository.search.UserSearchRepositoryMockConfiguration
     */
    @Autowired
    private lateinit var mockUserSearchRepository: UserSearchRepository
    <%_ } _%>
    <%_ if (databaseType === 'sql') { _%>

    @Autowired
    private lateinit var em: EntityManager
    <%_ } _%>
    <%_ if (cacheManagerIsAvailable === true) { _%>

    @Autowired
    private lateinit var cacheManager: CacheManager
    <%_ } _%>

    @Autowired
    <%_ if (reactive) { _%>
    private lateinit var webTestClient: WebTestClient
    <%_ } else { _%>
    private lateinit var restUserMockMvc: MockMvc
    <%_ } _%>

    private val user: <%= asEntity('User') %>

    <%_ if (cacheManagerIsAvailable === true) { _%>
    @BeforeEach
    fun setup() {
        cacheManager.getCache(UserRepository.USERS_BY_LOGIN_CACHE).clear()
        cacheManager.getCache(UserRepository.USERS_BY_EMAIL_CACHE).clear()
    }

    <%_ } _%>
    <%_ if (reactive && testsNeedCsrf) { _%>
    @BeforeEach
    fun setupCsrf() {
        webTestClient = webTestClient.mutateWith(csrf())
    }

    <%_ } _%>
    @BeforeEach
    fun initTest() {
        user = UserResourceIT.initTestUser(userRepository<% if (databaseType === 'sql') { %>, em<% } %>)
    }

    @Test
    <%_ if (databaseType === 'sql' && !reactive) { _%>
    @Transactional
    <%_ } _%>
    <%_ if (!reactive) { _%> 
    @Throws(Exception::class)
    <%_ } _%> 
    fun getAllPublicUsers() {
        // Initialize the database
        userRepository.<% if (databaseType === 'sql' && reactive && authenticationType === 'oauth2') { %>create<% } else { %>save<% } %><% if (databaseType === 'sql' && !reactive) { %>AndFlush<% } %>(user)<% if (reactive) { %>.block()<% } %>

        // Get all the users
        <%_ if (!reactive) { _%>
        restUserMockMvc.perform(get("/api/users<% if (databaseType === 'sql') { %>?sort=id,desc<% } %>")
            .accept(MediaType.APPLICATION_JSON))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
            .andExpect(jsonPath("$.[*].login").value(hasItem(DEFAULT_LOGIN)))
            .andExpect(jsonPath("$.[*].email").doesNotExist())
            <%_ if (databaseType !== 'cassandra') { _%>
            .andExpect(jsonPath("$.[*].imageUrl").doesNotExist())
            <%_ } _%>
            .andExpect(jsonPath("$.[*].langKey").doesNotExist())
        <%_ } else { _%>
        <%= asDto('User') %> foundUser = webTestClient.get().uri("/api/users?sort=id,DESC")
            .accept(MediaType.APPLICATION_JSON)
            .exchange()
            .expectStatus().isOk()
            .expectHeader().contentType(MediaType.APPLICATION_JSON)
            .returnResult(<%= asDto('User') %>.class).getResponseBody().blockFirst()

        assertThat(foundUser.getLogin()).isEqualTo(DEFAULT_LOGIN)
        <% } _%>
    }

    <%_ if ((databaseType === 'sql' || databaseType === 'mongodb' || databaseType === 'neo4j' || databaseType === 'couchbase')
            && (!(authenticationType === 'oauth2' && applicationType === 'microservice'))) { _%>
    @Test
    <%_ if (databaseType === 'sql' && !reactive) { _%>
    @Transactional
    <%_ } _%>
    <%_ if (!reactive) { _%> 
    @Throws(Exception::class)
    <%_ } _%> 
    fun getAllAuthorities() {
        <%_ if (!reactive) { _%>
        restUserMockMvc.perform(get("/api/authorities")
            .accept(MediaType.APPLICATION_JSON)
            .contentType(MediaType.APPLICATION_JSON))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
            .andExpect(jsonPath("$").isArray())
            .andExpect(jsonPath("$").value(hasItems(AuthoritiesConstants.USER, AuthoritiesConstants.ADMIN)))
        <%_ } else { _%>
        webTestClient.get().uri("/api/authorities")
            .accept(MediaType.APPLICATION_JSON)
            .exchange()
            .expectStatus().isOk()
            .expectHeader().contentType(MediaType.APPLICATION_JSON_VALUE)
            .expectBody()
            .jsonPath("$").isArray()
            .jsonPath("$[?(@=='" + AuthoritiesConstants.ADMIN + "')]").hasJsonPath()
            .jsonPath("$[?(@=='" + AuthoritiesConstants.USER + "')]").hasJsonPath()
        <%_ } _%>
    }
    <%_ } _%>

    <%_ if (databaseType === 'sql' && authenticationType !== 'oauth2') { _%>
    @Test
    <%_ if (!reactive) { _%>
    @Transactional
    <%_ } _%>
    @Throws(Exception::class)
    void getAllUsersSortedByParameters() {
        // Initialize the database
        userRepository.<% if (reactive) { %>save<% } else { %>saveAndFlush<% } %>(user)<% if (reactive) { %>.block()<% } %>

        <%_ if (!reactive) { _%>
            restUserMockMvc.perform(get("/api/users?sort=resetKey,desc").accept(MediaType.APPLICATION_JSON)).andExpect(status().isBadRequest())
            restUserMockMvc.perform(get("/api/users?sort=password,desc").accept(MediaType.APPLICATION_JSON)).andExpect(status().isBadRequest())
            restUserMockMvc.perform(get("/api/users?sort=resetKey,id,desc").accept(MediaType.APPLICATION_JSON)).andExpect(status().isBadRequest())
            restUserMockMvc.perform(get("/api/users?sort=id,desc").accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
        <%_ } else { _%>
            webTestClient.get().uri("/api/users?sort=resetKey,DESC").accept(MediaType.APPLICATION_JSON).exchange().expectStatus().isBadRequest()
            webTestClient.get().uri("/api/users?sort=password,DESC").accept(MediaType.APPLICATION_JSON).exchange().expectStatus().isBadRequest()
            webTestClient.get().uri("/api/users?sort=resetKey,id,DESC").accept(MediaType.APPLICATION_JSON).exchange().expectStatus().isBadRequest()
            webTestClient.get().uri("/api/users?sort=id,DESC").accept(MediaType.APPLICATION_JSON).exchange().expectStatus().isOk()
        <%_ } _%>
    }
    <%_ } _%>
}
