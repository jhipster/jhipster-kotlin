<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.web.rest.errors

<%_ if (databaseType === 'cassandra') { _%>
import <%= packageName %>.AbstractCassandraTest
<%_ } _%>
import <%= packageName %>.<%= mainClass %>
<%_ if (authenticationType === 'uaa') { _%>
import <%= packageName %>.config.SecurityBeanOverrideConfiguration
<%_ } _%>
<%_ if (authenticationType === 'oauth2') { _%>
import <%= packageName %>.config.TestSecurityConfiguration
<%_ } _%>
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.context.SpringBootTest
<%_ if (messageBroker === 'kafka') { _%>
import org.springframework.kafka.test.context.EmbeddedKafka
<%_ } _%>
<%_ if (!reactive) { _%>
import org.springframework.http.MediaType
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter
import org.springframework.test.web.servlet.MockMvc
import org.springframework.test.web.servlet.setup.MockMvcBuilders

import org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.content
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.status

/**
 * Integration tests [ExceptionTranslator] controller advice.
 */
<%_ if (messageBroker === 'kafka') { _%>
@EmbeddedKafka
<%_ } _%>
<%_ if (authenticationType === 'uaa' && applicationType !== 'uaa') { _%>
@SpringBootTest(classes = [SecurityBeanOverrideConfiguration::class, <%= mainClass %>::class])
<%_ } else if (authenticationType === 'oauth2') { _%>
@SpringBootTest(classes = [<%= mainClass %>::class, TestSecurityConfiguration::class])
<%_ } else { _%>
@SpringBootTest(classes = [<%= mainClass %>::class])
<%_ } _%>
class ExceptionTranslatorIT <% if (databaseType === 'cassandra') { %>: AbstractCassandraTest() <% } %>{

    @Autowired
    private lateinit var controller: ExceptionTranslatorTestController

    @Autowired
    private lateinit var exceptionTranslator: ExceptionTranslator

    @Autowired
    private lateinit var jacksonMessageConverter: MappingJackson2HttpMessageConverter

    private lateinit var mockMvc: MockMvc

    @BeforeEach
    fun setup() {
        mockMvc = MockMvcBuilders.standaloneSetup(controller)
            .setControllerAdvice(exceptionTranslator)
            .setMessageConverters(jacksonMessageConverter)
            .build()
    }
    <%_ if (databaseType !== 'no' && databaseType !== 'cassandra') { _%>

    @Test
    @Throws(Exception::class)
    fun testConcurrencyFailure() {
        mockMvc.perform(get("/test/concurrency-failure"))
            .andExpect(status().isConflict)
            .andExpect(content().contentType(MediaType.APPLICATION_PROBLEM_JSON))
            .andExpect(jsonPath("\$.message").value(ERR_CONCURRENCY_FAILURE))
    }
    <%_ } _%>

    @Test
    @Throws(Exception::class)
    fun testMethodArgumentNotValid() {
        mockMvc.perform(post("/test/method-argument").content("{}").contentType(MediaType.APPLICATION_JSON))
            .andExpect(status().isBadRequest)
            .andExpect(content().contentType(MediaType.APPLICATION_PROBLEM_JSON))
            .andExpect(jsonPath("\$.message").value(ERR_VALIDATION))
            .andExpect(jsonPath("\$.fieldErrors.[0].objectName").value("test"))
            .andExpect(jsonPath("\$.fieldErrors.[0].field").value("test"))
            .andExpect(jsonPath("\$.fieldErrors.[0].message").value("NotNull"))
    }

    @Test
    @Throws(Exception::class)
    fun testMissingServletRequestPartException() {
        mockMvc.perform(get("/test/missing-servlet-request-part"))
            .andExpect(status().isBadRequest)
            .andExpect(content().contentType(MediaType.APPLICATION_PROBLEM_JSON))
            .andExpect(jsonPath("\$.message").value("error.http.400"))
    }

    @Test
    @Throws(Exception::class)
    fun testMissingServletRequestParameterException() {
        mockMvc.perform(get("/test/missing-servlet-request-parameter"))
            .andExpect(status().isBadRequest)
            .andExpect(content().contentType(MediaType.APPLICATION_PROBLEM_JSON))
            .andExpect(jsonPath("\$.message").value("error.http.400"))
    }

    @Test
    @Throws(Exception::class)
    fun testAccessDenied() {
        mockMvc.perform(get("/test/access-denied"))
            .andExpect(status().isForbidden)
            .andExpect(content().contentType(MediaType.APPLICATION_PROBLEM_JSON))
            .andExpect(jsonPath("\$.message").value("error.http.403"))
            .andExpect(jsonPath("\$.detail").value("test access denied!"))
    }

    @Test
    @Throws(Exception::class)
    fun testUnauthorized() {
        mockMvc.perform(get("/test/unauthorized"))
            .andExpect(status().isUnauthorized)
            .andExpect(content().contentType(MediaType.APPLICATION_PROBLEM_JSON))
            .andExpect(jsonPath("\$.message").value("error.http.401"))
            .andExpect(jsonPath("\$.path").value("/test/unauthorized"))
            .andExpect(jsonPath("\$.detail").value("test authentication failed!"))
    }

    @Test
    @Throws(Exception::class)
    fun testMethodNotSupported() {
        mockMvc.perform(post("/test/access-denied"))
            .andExpect(status().isMethodNotAllowed)
            .andExpect(content().contentType(MediaType.APPLICATION_PROBLEM_JSON))
            .andExpect(jsonPath("\$.message").value("error.http.405"))
            .andExpect(jsonPath("\$.detail").value("Request method 'POST' not supported"))
    }

    @Test
    @Throws(Exception::class)
    fun testExceptionWithResponseStatus() {
        mockMvc.perform(get("/test/response-status"))
            .andExpect(status().isBadRequest)
            .andExpect(content().contentType(MediaType.APPLICATION_PROBLEM_JSON))
            .andExpect(jsonPath("\$.message").value("error.http.400"))
            .andExpect(jsonPath("\$.title").value("test response status"))
    }

    @Test
    @Throws(Exception::class)
    fun testInternalServerError() {
        mockMvc.perform(get("/test/internal-server-error"))
            .andExpect(status().isInternalServerError)
            .andExpect(content().contentType(MediaType.APPLICATION_PROBLEM_JSON))
            .andExpect(jsonPath("\$.message").value("error.http.500"))
            .andExpect(jsonPath("\$.title").value("Internal Server Error"))
    }
}
<%_ } _%>
<%_ if (reactive) { _%>
import org.springframework.boot.web.codec.CodecCustomizer
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
<%_ if (messageBroker === 'kafka') { _%>
import org.springframework.kafka.test.context.EmbeddedKafka
<%_ } _%>
import org.springframework.test.web.reactive.server.MockServerConfigurer
import org.springframework.test.web.reactive.server.WebTestClient
import org.springframework.web.server.WebExceptionHandler
import org.springframework.web.server.adapter.WebHttpHandlerBuilder

/**
 * Integration tests [ExceptionTranslator] controller advice.
 */
<%_ if (messageBroker === 'kafka') { _%>
@EmbeddedKafka
<%_ } _%>
@SpringBootTest(classes = [<%= mainClass %>::class])
class ExceptionTranslatorIT {

    @Autowired
    private lateinit var controller: ExceptionTranslatorTestController

    @Autowired
    private lateinit var exceptionTranslator: ExceptionTranslator

    @Autowired
    private lateinit var jacksonCodecCustomizer: CodecCustomizer

    @Autowired
    private lateinit var exceptionHandlers: List<WebExceptionHandler>

    private lateinit var webTestClient: WebTestClient

    @BeforeEach
    fun setup() {
        webTestClient = WebTestClient.bindToController(controller)
            .controllerAdvice(exceptionTranslator)
            .httpMessageCodecs(jacksonCodecCustomizer::customize)
            .apply<WebTestClient.ControllerSpec>(object : MockServerConfigurer {
                override fun beforeServerCreated(builder: WebHttpHandlerBuilder?) {
                    builder!!
                        .exceptionHandlers(MutableList<WebExceptionHandler>::clear)
                        .exceptionHandlers { handlers -> handlers.addAll(exceptionHandlers) }
                }
            })
            .build()
    }
    <%_ if (databaseType !== 'no' && databaseType !== 'cassandra') { _%>

    @Test
    fun testConcurrencyFailure() {
        webTestClient.get().uri("/test/concurrency-failure")
            .exchange()
            .expectStatus().isEqualTo(HttpStatus.CONFLICT)
            .expectHeader().contentType(MediaType.APPLICATION_PROBLEM_JSON)
            .expectBody()
            .jsonPath("\$.message").isEqualTo(ERR_CONCURRENCY_FAILURE)
    }
    <%_ } _%>

    @Test
    fun testMethodArgumentNotValid() {
        webTestClient.post().uri("/test/method-argument")
            .contentType(MediaType.APPLICATION_JSON)
            .syncBody("{}")
            .exchange()
            .expectHeader().contentType(MediaType.APPLICATION_PROBLEM_JSON)
            .expectBody()
            .jsonPath("\$.message").isEqualTo(ERR_VALIDATION)
            .jsonPath("\$.fieldErrors.[0].objectName").isEqualTo("test")
            .jsonPath("\$.fieldErrors.[0].field").isEqualTo("test")
            .jsonPath("\$.fieldErrors.[0].message").isEqualTo("NotNull")
    }

    @Test
    fun testMissingRequestPart() {
        webTestClient.get().uri("/test/missing-servlet-request-part")
            .exchange()
            .expectStatus().isBadRequest
            .expectHeader().contentType(MediaType.APPLICATION_PROBLEM_JSON)
            .expectBody()
            .jsonPath("\$.message").isEqualTo("error.http.400")
    }

    @Test
    fun testMissingRequestParameter() {
        webTestClient.get().uri("/test/missing-servlet-request-parameter")
            .exchange()
            .expectStatus().isBadRequest
            .expectHeader().contentType(MediaType.APPLICATION_PROBLEM_JSON)
            .expectBody()
            .jsonPath("\$.message").isEqualTo("error.http.400")
    }

    @Test
    fun testAccessDenied() {
        webTestClient.get().uri("/test/access-denied")
            .exchange()
            .expectStatus().isForbidden
            .expectHeader().contentType(MediaType.APPLICATION_PROBLEM_JSON)
            .expectBody()
            .jsonPath("\$.message").isEqualTo("error.http.403")
            .jsonPath("\$.detail").isEqualTo("test access denied!")
    }

    @Test
    fun testUnauthorized() {
        webTestClient.get().uri("/test/unauthorized")
            .exchange()
            .expectStatus().isUnauthorized
            .expectHeader().contentType(MediaType.APPLICATION_PROBLEM_JSON)
            .expectBody()
            .jsonPath("\$.message").isEqualTo("error.http.401")
            .jsonPath("\$.path").isEqualTo("/test/unauthorized")
            .jsonPath("\$.detail").isEqualTo("test authentication failed!")
    }

    @Test
    fun testMethodNotSupported() {
        webTestClient.post().uri("/test/access-denied")
            .exchange()
            .expectStatus().isEqualTo(HttpStatus.METHOD_NOT_ALLOWED)
            .expectHeader().contentType(MediaType.APPLICATION_PROBLEM_JSON)
            .expectBody()
            .jsonPath("\$.message").isEqualTo("error.http.405")
            .jsonPath("\$.detail").isEqualTo("405 METHOD_NOT_ALLOWED \"Request method 'POST' not supported\"")
    }

    @Test
    fun testExceptionWithResponseStatus() {
        webTestClient.get().uri("/test/response-status")
            .exchange()
            .expectStatus().isBadRequest
            .expectHeader().contentType(MediaType.APPLICATION_PROBLEM_JSON)
            .expectBody()
            .jsonPath("\$.message").isEqualTo("error.http.400")
            .jsonPath("\$.title").isEqualTo("test response status")
    }

    @Test
    fun testInternalServerError() {
        webTestClient.get().uri("/test/internal-server-error")
            .exchange()
            .expectHeader().contentType(MediaType.APPLICATION_PROBLEM_JSON)
            .expectBody()
            .jsonPath("\$.message").isEqualTo("error.http.500")
            .jsonPath("\$.title").isEqualTo("Internal Server Error")
    }
}
<%_ } _%>
