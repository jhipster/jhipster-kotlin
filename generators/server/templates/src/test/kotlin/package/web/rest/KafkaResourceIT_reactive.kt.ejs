<%#
 Copyright 2013-2024 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License")
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.web.rest

import org.assertj.core.api.Assertions.assertThat

import java.time.Duration
import java.util.HashMap
import java.util.Map
import java.util.concurrent.BlockingQueue

import org.junit.jupiter.api.Test
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.beans.factory.annotation.Qualifier
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc
import org.springframework.cloud.stream.test.binder.MessageCollector
import org.springframework.http.MediaType
import org.springframework.messaging.Message
import org.springframework.messaging.MessageChannel
import org.springframework.messaging.MessageHeaders
import org.springframework.messaging.support.GenericMessage
import org.springframework.security.test.context.support.WithMockUser
import org.springframework.test.web.reactive.server.WebTestClient
import org.springframework.util.MimeTypeUtils
import <%= packageName %>.IntegrationTest
import <%= packageName %>.config.EmbeddedKafka
import <%= packageName %>.config.KafkaSseConsumer
import <%= packageName %>.config.KafkaSseProducer

@IntegrationTest
@AutoConfigureMockMvc
@WithMockUser
@EmbeddedKafka
class <%= upperFirstCamelCase(baseName) %>KafkaResourceIT {

    @Autowired
    private lateinit var client: WebTestClient

    @Autowired
    @Qualifier(KafkaSseProducer.CHANNELNAME)
    private lateinit var output: MessageChannel

    @Autowired
    @Qualifier(KafkaSseConsumer.CHANNELNAME)
    private lateinit var input: MessageChannel

    @Autowired
    private lateinit var collector: MessageCollector

    @Test
    @Throws(InterruptedException::class)
    fun producesMessages() {
        client.post().uri("/api/<%= dasherizedBaseName %>-kafka/publish?message=value-produce")
            .exchange()
            .expectStatus()
            .isNoContent

        val messages = collector.forChannel(output)
        val payload = messages.take() as (GenericMessage<String>)
        assertThat(payload.payload).isEqualTo("value-produce")
    }

    @Test
    fun consumesMessages() {
        val map = hashMapOf<String, Any>()
        map[MessageHeaders.CONTENT_TYPE] = MimeTypeUtils.TEXT_PLAIN_VALUE
        val headers = MessageHeaders(map)
        val testMessage = GenericMessage<String>("value-consume", headers)
        input.send(testMessage)
        val value = client
            .get()
            .uri("/api/<%= dasherizedBaseName %>-kafka/consume")
            .accept(MediaType.TEXT_EVENT_STREAM)
            .exchange()
            .expectStatus()
            .isOk
            .expectHeader()
            .contentTypeCompatibleWith(MediaType.TEXT_EVENT_STREAM)
            .returnResult(String::class.java)
            .responseBody
            .blockFirst(Duration.ofSeconds(10))
        assertThat(value).isEqualTo("value-consume")
    }
}
