<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
@file:JvmName("TestUtil")

package <%= packageName %>.web.rest

import com.fasterxml.jackson.annotation.JsonInclude
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.databind.SerializationFeature
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule
import org.hamcrest.Description
import org.hamcrest.TypeSafeDiagnosingMatcher
import org.hamcrest.TypeSafeMatcher
<%_ if (!reactive) { _%>
import org.springframework.format.datetime.standard.DateTimeFormatterRegistrar
import org.springframework.format.support.DefaultFormattingConversionService
import org.springframework.format.support.FormattingConversionService
<%_ } _%>
<%_ if (databaseTypeCouchbase) { _%>
import org.springframework.security.authentication.TestingAuthenticationToken
import org.springframework.security.test.context.TestSecurityContextHolder
<%_ } _%>   

<%_ if (databaseTypeSql) { _%>
import javax.persistence.EntityManager
<%_ } _%>

<%_ if (searchEngineCouchbase) { _%>
import java.util.NoSuchElementException
import java.util.concurrent.Callable
<%_ } _%>

import java.io.IOException
import java.math.BigDecimal
import java.time.ZonedDateTime
import java.time.format.DateTimeParseException

import kotlin.reflect.KClass
import kotlin.reflect.full.createInstance

<%_ if (searchEngineCouchbase) { _%>
import java.util.NoSuchElementException
import java.util.concurrent.Callable
import java.util.concurrent.TimeUnit
import java.util.function.Function
import java.time.Duration
import reactor.core.publisher.Mono
import reactor.util.retry.Retry
<%_ } _%>

import org.assertj.core.api.Assertions.assertThat

private val mapper = createObjectMapper()

private fun createObjectMapper() =
    ObjectMapper().apply {
        configure(SerializationFeature.WRITE_DURATIONS_AS_TIMESTAMPS, false)
        setSerializationInclusion(JsonInclude.Include.NON_EMPTY)
        registerModule(JavaTimeModule())
    }

/**
 * Convert an object to JSON byte array.
 *
 * @param object the object to convert.
 * @return the JSON byte array.
 * @throws IOException
 */
@Throws(IOException::class)
fun convertObjectToJsonBytes(`object`: Any): ByteArray = mapper.writeValueAsBytes(`object`)

/**
 * Create a byte array with a specific size filled with specified data.
 *
 * @param size the size of the byte array.
 * @param data the data to put in the byte array.
 * @return the JSON byte array.
 */
fun createByteArray(size: Int, data: String) = ByteArray(size) { java.lang.Byte.parseByte(data, 2) }
<%_ if (databaseTypeCouchbase) { _%>

/**
 * Mock user authentication
 */
fun mockAuthentication() {
    TestSecurityContextHolder.getContext().authentication = TestingAuthenticationToken("user", null)
}
<%_ } _%>

/**
 * A matcher that tests that the examined string represents the same instant as the reference datetime.
 */
class ZonedDateTimeMatcher(private val date: ZonedDateTime) : TypeSafeDiagnosingMatcher<String>() {

    override fun matchesSafely(item: String, mismatchDescription: Description): Boolean {
        try {
            if (!date.isEqual(ZonedDateTime.parse(item))) {
                mismatchDescription.appendText("was ").appendValue(item)
                return false
            }
            return true
        } catch (e: DateTimeParseException) {
            mismatchDescription.appendText("was ").appendValue(item)
                .appendText(", which could not be parsed as a ZonedDateTime")
            return false
        }
    }

    override fun describeTo(description: Description) {
        description.appendText("a String representing the same Instant as ").appendValue(date)
    }
}

/**
 * Creates a matcher that matches when the examined string represents the same instant as the reference datetime.
 * @param date the reference datetime against which the examined string is checked.
 */
fun sameInstant(date: ZonedDateTime) = ZonedDateTimeMatcher(date)

/**
* A matcher that tests that the examined number represents the same value - it can be Long, Double, etc - as the reference BigDecimal.
*/
class NumberMatcher(private val value: BigDecimal):TypeSafeMatcher<Number>() {
    override fun describeTo(description: Description) {
        description.appendText("a numeric value is ").appendValue(value)
    }

    override fun matchesSafely(item: Number): Boolean {
        val bigDecimal = asDecimal(item)
        return value.compareTo(bigDecimal) == 0
    }

    fun asDecimal(item: Number?): BigDecimal? {
        if (item == null) {
            return null
        }

        return when (item) {
            is BigDecimal -> item
            is Long -> item.toBigDecimal()
            is Int -> item.toLong().toBigDecimal()
            is Float -> item.toBigDecimal()
            is Double -> item.toBigDecimal()
            else -> item.toDouble().toBigDecimal()
        }
    }
}

/**
* Creates a matcher that matches when the examined number represents the same value as the reference BigDecimal.
*
* @param number the reference BigDecimal against which the examined number is checked.
*/
fun sameNumber(number: BigDecimal): NumberMatcher = NumberMatcher(number)

/**
 * Verifies the equals/hashcode contract on the domain object.
 */
fun <T : Any> equalsVerifier(clazz: KClass<T>) {
    val domainObject1 = clazz.createInstance()
    assertThat(domainObject1.toString()).isNotNull()
    assertThat(domainObject1).isEqualTo(domainObject1)
    assertThat(domainObject1).hasSameHashCodeAs(domainObject1)
    // Test with an instance of another class
    val testOtherObject = Any()
    assertThat(domainObject1).isNotEqualTo(testOtherObject)
    assertThat(domainObject1).isNotEqualTo(null)
    // Test with an instance of the same class
    val domainObject2 = clazz.createInstance()
    assertThat(domainObject1).isNotEqualTo(domainObject2)
    <%_ if (databaseTypeSql || databaseTypeMongodb || databaseTypeCouchbase) { _%>
    // HashCodes are equals because the objects are not persisted yet
    assertThat(domainObject1).hasSameHashCodeAs(domainObject2)
    <%_ } _%>
}
<%_ if (!reactive) { _%>

/**
 * Create a [FormattingConversionService] which use ISO date format, instead of the localized one.
 * @return the created [FormattingConversionService].
 */
fun createFormattingConversionService(): FormattingConversionService {
    val dfcs = DefaultFormattingConversionService()
    val registrar = DateTimeFormatterRegistrar()
    registrar.setUseIsoFormat(true)
    registrar.registerFormatters(dfcs)
    return dfcs
}
<%_ } _%>
<%_ if (databaseTypeSql) { _%>
/**
 * Finds stored objects of the specified type.
 * @param clazz the class type to be searched.
 * @return a list of all found objects.
 * @param <T> the type of objects to be searched.
 */
fun <T : Any> findAll(em: EntityManager, clazz: KClass<T>): List<T> {
    val cb = em.criteriaBuilder
    val cq = cb.createQuery(clazz.java)
    val rootEntry = cq.from(clazz.java)
    val all = cq.select(rootEntry)
    return em.createQuery(all).resultList
}
<%_ } _%>

<%_ if (searchEngineCouchbase) { _%>

fun <T> retryUntilNotEmpty(iterableCallable: Callable<Iterable<T>>) {
    Mono.defer {
        Mono.fromCallable(iterableCallable)
            .flatMapIterable(Function.identity())
            .next()
            .switchIfEmpty(Mono.error(NoSuchElementException()))
    }
        .retry()
        .timeout(Duration.ofMinutes(15))
        .block()
}
<%_ } _%>

const val TEST_USER_LOGIN = "test"
