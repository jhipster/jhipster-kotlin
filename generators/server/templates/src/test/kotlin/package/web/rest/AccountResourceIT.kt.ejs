<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.web.rest

<%_ if (databaseType === 'cassandra') { _%>
import <%= packageName %>.AbstractCassandraTest
<%_ } _%>
import <%= packageName %>.IntegrationTest
import <%= packageName %>.config.DEFAULT_LANGUAGE
<%_ if (authenticationType === 'session' && !reactive) { _%>
import <%= packageName %>.domain.PersistentToken
<%_ } _%>
import <%= packageName %>.domain.<%= asEntity('User') %>

<%_ if (databaseType === 'sql' || databaseType === 'mongodb' || databaseType === 'neo4j' || databaseType === 'couchbase') { _%>
import <%= packageName %>.repository.AuthorityRepository
<%_ } _%>
<%_ if (authenticationType === 'session' && !reactive) { _%>
import <%= packageName %>.repository.PersistentTokenRepository
<%_ } _%>
import <%= packageName %>.repository.UserRepository
<%_ if (reactive && searchEngine === 'elasticsearch') { _%>
import <%= packageName %>.repository.search.UserSearchRepository
<%_ } _%>
import <%= packageName %>.security.ADMIN
import <%= packageName %>.security.USER
import <%= packageName %>.service.UserService
import <%= packageName %>.service.dto.PasswordChangeDTO
import <%= packageName %>.service.dto.<%= asDto('User') %>
import <%= packageName %>.service.dto.<%= asDto('AdminUser') %>
import <%= packageName %>.web.rest.vm.KeyAndPasswordVM
import <%= packageName %>.web.rest.vm.ManagedUserVM
import org.apache.commons.lang3.RandomStringUtils
<%_ if (reactive && testsNeedCsrf || databaseType === 'mongodb' || databaseType === 'neo4j') { _%>
import org.junit.jupiter.api.BeforeEach
<%_ } _%>
import org.junit.jupiter.api.Test
import org.springframework.beans.factory.annotation.Autowired
<%_ if (!reactive) { _%>
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc
<%_ } else { _%>
import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient
<%_ } _%>
<%_ if (reactive) { _%>
import org.springframework.test.web.reactive.server.expectBody
import org.springframework.http.HttpStatus
<%_ } _%>
import org.springframework.http.MediaType
import org.springframework.security.crypto.password.PasswordEncoder
import org.springframework.security.test.context.support.WithMockUser
<%_ if (reactive) { _%>
import org.springframework.test.web.reactive.server.WebTestClient
<%_ } _%>
<%_ if (!reactive) { _%>
import org.springframework.test.web.servlet.MockMvc
<%_ } _%>
<%_ if (databaseType === 'sql' && !reactive) { _%>
import org.springframework.transaction.annotation.Transactional
<%_ } _%>
<%_ if (reactive && searchEngine === 'elasticsearch') { _%>
import reactor.core.publisher.Mono
<%_ } _%>

import java.time.Instant
<%_ if (authenticationType === 'session' && !reactive && ['sql', 'mongodb', 'neo4j', 'couchbase'].includes(databaseType)) { _%>
import java.time.LocalDate
<%_ } _%>
<%_ if (!(databaseType === 'sql' || databaseType === 'mongodb' || databaseType === 'couchbase')) { _%>
import java.util.Date
<%_ } _%>
import java.util.Optional
<%_ if (databaseType === 'cassandra') { _%>
import java.util.UUID
<%_ } _%>

import org.assertj.core.api.Assertions.assertThat
<%_ if (reactive && searchEngine === 'elasticsearch') { _%>
import org.mockito.Mockito.*
<%_ } _%>
<%_ if (authenticationType === 'session' && !reactive) { _%>
import org.hamcrest.Matchers.containsString
import org.hamcrest.Matchers.hasItem
<%_ } _%>
import <%= packageName %>.web.rest.TEST_USER_LOGIN
<%_ if (!reactive) { _%>
    <%_ if (testsNeedCsrf) { _%>
import org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.csrf
    <%_ } _%>
    <%_ if (authenticationType === 'session') { _%>
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete
    <%_ } _%>
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.content
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.status
<%_ } else if (testsNeedCsrf) { _%>
import org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers.csrf
<%_ } _%>

<%_ if (reactive) { _%>

import kotlin.test.assertNotNull
<%_ } _%>
<%_ if (databaseType === 'sql' && reactive) { _%>
import <%= packageName %>.config.SYSTEM_ACCOUNT
<%_ } _%>

/**
 * Integrations tests for the [AccountResource] REST controller.
 */
 <%_ if (!reactive) { _%>
@AutoConfigureMockMvc
<%_ } else { _%>
@AutoConfigureWebTestClient
<%_ } _%>
@WithMockUser(value = TEST_USER_LOGIN)
@IntegrationTest
class AccountResourceIT <% if (databaseType === 'cassandra') { %>: AbstractCassandraTest() <% } %>{

    @Autowired
    private lateinit var userRepository: UserRepository
<%_ if (databaseType === 'sql' || databaseType === 'mongodb' || databaseType === 'neo4j') { _%>

    @Autowired
    private lateinit var authorityRepository: AuthorityRepository
<%_ } _%>

    @Autowired
    private lateinit var userService: UserService
<%_ if (authenticationType === 'session' && !reactive) { _%>

    @Autowired
    private lateinit var persistentTokenRepository: PersistentTokenRepository
<%_ } _%>

    <%_ if (searchEngine === 'elasticsearch' && reactive) { _%>

    @Autowired
    private lateinit var  mockUserSearchRepository: UserSearchRepository
    <%_ } _%>

    @Autowired
    private lateinit var passwordEncoder: PasswordEncoder

    @Autowired
<%_ if (!reactive) { _%>
    private lateinit var restAccountMockMvc: MockMvc
<%_ } else { _%>
    private lateinit var accountWebTestClient: WebTestClient
<%_ } _%>

    <%_ if (databaseType === 'mongodb' || databaseType === 'neo4j') { _%>
    @BeforeEach
    fun setup() {
        userRepository.deleteAll()<% if (reactive) { %>.block()<% } %>
    }
    <%_ } _%>
    <%_ if (reactive && testsNeedCsrf) { _%>

    @BeforeEach
    fun setupCsrf() {
        accountWebTestClient = accountWebTestClient.mutateWith(csrf())
    }

    <%_ } _%>

    @Test
    @WithUnauthenticatedMockUser
    <%_ if (!reactive) { _%>
    @Throws(Exception::class)
    fun testNonAuthenticatedUser() {
        restAccountMockMvc.perform(
            get("/api/authenticate")
                .accept(MediaType.APPLICATION_JSON)
        )
            .andExpect(status().isOk)
            .andExpect(content().string(""))
    <%_ } else { _%>
    fun testNonAuthenticatedUser() {
        accountWebTestClient.get().uri("/api/authenticate")
            .accept(MediaType.APPLICATION_JSON)
            .exchange()
            .expectStatus().isOk
            .expectBody().isEmpty
    <%_ } _%>
    }

    @Test
    <%_ if (!reactive) { _%>
    @Throws(Exception::class)
    fun testAuthenticatedUser() {
        restAccountMockMvc.perform(get("/api/authenticate")
            .with { request ->
                request.remoteUser = TEST_USER_LOGIN
                request
            }
            .accept(MediaType.APPLICATION_JSON))
            .andExpect(status().isOk)
            .andExpect(content().string(TEST_USER_LOGIN))
    <%_ } else { _%>
    fun testAuthenticatedUser() {
        accountWebTestClient
            .get().uri("/api/authenticate")
            .accept(MediaType.APPLICATION_JSON)
            .exchange()
            .expectStatus().isOk
            .expectBody<String>().isEqualTo(TEST_USER_LOGIN)
    <%_ } _%>
    }

    @Test
    <%_ if (!reactive) { _%>
    @Throws(Exception::class)
    <%_ } _%>
    fun testGetExistingAccount() {
        <%_ if (searchEngine === 'elasticsearch' && reactive) { _%>

        // Configure the mock search repository
        `when`(mockUserSearchRepository.save(any(User::class.java)))
            .thenAnswer { Mono.just(it.arguments[0] as User) }
        <%_ } _%>

        val authorities = mutableSetOf(ADMIN)

        val user = <%= asDto('AdminUser') %>(
            login = TEST_USER_LOGIN,
            firstName = "john",
            lastName = "doe",
            email = "john.doe@jhipster.com",
            <%_ if (['sql',  'mongodb',  'couchbase',  'neo4j'].includes(databaseType)) { _%>
            imageUrl = "http://placehold.it/50x50",
            <%_ } _%>
            langKey = "en",
            authorities = authorities
        )
        userService.createUser(user)<% if (reactive) { %>.block()<% } %>

        <%_ if (!reactive) { _%>
        restAccountMockMvc.perform(
            get("/api/account")
                .accept(MediaType.APPLICATION_JSON)
        )
            .andExpect(status().isOk)
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
            .andExpect(jsonPath("\$.login").value(TEST_USER_LOGIN))
            .andExpect(jsonPath("\$.firstName").value("john"))
            .andExpect(jsonPath("\$.lastName").value("doe"))
            .andExpect(jsonPath("\$.email").value("john.doe@jhipster.com"))
            <%_ if (['sql',  'mongodb',  'couchbase',  'neo4j'].includes(databaseType)) { _%>
            .andExpect(jsonPath("\$.imageUrl").value("http://placehold.it/50x50"))
            <%_ } _%>
            .andExpect(jsonPath("\$.langKey").value("en"))
            .andExpect(jsonPath("\$.authorities").value(ADMIN))
        <%_ } else { _%>
        accountWebTestClient.get().uri("/api/account")
            .accept(MediaType.APPLICATION_JSON)
            .exchange()
            .expectStatus().isOk
            .expectHeader().contentType(MediaType.APPLICATION_JSON_VALUE)
            .expectBody()
            .jsonPath("\$.login").isEqualTo(TEST_USER_LOGIN)
            .jsonPath("\$.firstName").isEqualTo("john")
            .jsonPath("\$.lastName").isEqualTo("doe")
            .jsonPath("\$.email").isEqualTo("john.doe@jhipster.com")
            <%_ if (['sql',  'mongodb',  'couchbase',  'neo4j'].includes(databaseType)) { _%>
            .jsonPath("\$.imageUrl").isEqualTo("http://placehold.it/50x50")
            <%_ } _%>
            .jsonPath("\$.langKey").isEqualTo("en")
            .jsonPath("\$.authorities").isEqualTo(ADMIN)
        <%_ } _%>
    }

    @Test
    <%_ if (!reactive) { _%>
    @Throws(Exception::class)
    fun testGetUnknownAccount() {
        restAccountMockMvc.perform(get("/api/account")
            .accept(MediaType.APPLICATION_PROBLEM_JSON))
            .andExpect(status().isInternalServerError)
    <%_ } else { _%>
    fun testGetUnknownAccount() {
        accountWebTestClient.get().uri("/api/account")
            .accept(MediaType.APPLICATION_JSON)
            .exchange()
            .expectStatus().isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR)
    <%_ } _%>
    }

    @Test<% if (databaseType === 'sql' && !reactive) { %>
    @Transactional<% } %>
    @Throws(Exception::class)
    fun testRegisterValid() {
        <%_ if (searchEngine === 'elasticsearch' && reactive) { _%>
        // Configure the mock search repository
        `when`(mockUserSearchRepository.save(any(User::class.java)))
            .thenAnswer { Mono.just(it.arguments[0] as User) }
    
        <%_ } _%>
        val validUser = ManagedUserVM().apply {
            login = "test-register-valid"
            password = "password"
            firstName = "Alice"
            lastName = "Test"
            email = "test-register-valid@example.com"
            <%_ if (['sql',  'mongodb',  'couchbase',  'neo4j'].includes(databaseType)) { _%>
            imageUrl = "http://placehold.it/50x50"
            <%_ } _%>
            langKey = DEFAULT_LANGUAGE
            authorities = mutableSetOf(USER)
        }
        assertThat(userRepository.findOneByLogin("test-register-valid")<% if (reactive) { %>.blockOptional()<% } %>).isEmpty

        <%_ if (!reactive) { _%>
        restAccountMockMvc.perform(
            post("/api/register")
                .contentType(MediaType.APPLICATION_JSON)
                .content(convertObjectToJsonBytes(validUser))<% if (testsNeedCsrf) { %>
                .with(csrf())<% } %>
        )
            .andExpect(status().isCreated)
        <%_ } else { _%>
        accountWebTestClient.post().uri("/api/register")
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(convertObjectToJsonBytes(validUser))
            .exchange()
            .expectStatus().isCreated
        <%_ } _%>

        assertThat(userRepository.findOneByLogin("test-register-valid")<% if (reactive) { %>.blockOptional()<% } %>).isPresent
    }

    @Test<% if (databaseType === 'sql' && !reactive) { %>
    @Transactional<% } %>
    @Throws(Exception::class)
    fun testRegisterInvalidLogin() {
        val invalidUser = ManagedUserVM().apply {
            login = "funky-log(n" // <-- invalid
            password = "password"
            firstName = "Funky"
            lastName = "One"
            email = "funky@example.com"
            activated = true
            <%_ if (['sql',  'mongodb',  'couchbase',  'neo4j'].includes(databaseType)) { _%>
            imageUrl = "http://placehold.it/50x50"
            <%_ } _%>
            langKey = DEFAULT_LANGUAGE
            authorities = mutableSetOf(USER)
        }

        <%_ if (!reactive) { _%>
        restAccountMockMvc.perform(
            post("/api/register")
                .contentType(MediaType.APPLICATION_JSON)
                .content(convertObjectToJsonBytes(invalidUser))<% if (testsNeedCsrf) { %>
                .with(csrf())<% } %>
        )
            .andExpect(status().isBadRequest)
        <%_ } else { _%>
        accountWebTestClient.post().uri("/api/register")
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(convertObjectToJsonBytes(invalidUser))
            .exchange()
            .expectStatus().isBadRequest
        <%_ } _%>

        val user = userRepository.findOneByEmailIgnoreCase("funky@example.com")<% if (reactive) { %>.blockOptional()<% } %>
        assertThat(user).isEmpty
    }

    @Test<% if (databaseType === 'sql' && !reactive) { %>
    @Transactional<% } %>
    @Throws(Exception::class)
    fun testRegisterInvalidEmail() {
        val invalidUser = ManagedUserVM().apply {
            login = "bob"
            password = "password"
            firstName = "Bob"
            lastName = "Green"
            email = "invalid" // <-- invalid
            activated = true
            <%_ if (['sql',  'mongodb',  'couchbase',  'neo4j'].includes(databaseType)) { _%>
            imageUrl = "http://placehold.it/50x50"
            <%_ } _%>
            langKey = DEFAULT_LANGUAGE
            authorities = mutableSetOf(USER)
        }

        <%_ if (!reactive) { _%>
        restAccountMockMvc.perform(
            post("/api/register")
                .contentType(MediaType.APPLICATION_JSON)
                .content(convertObjectToJsonBytes(invalidUser))<% if (testsNeedCsrf) { %>
                .with(csrf())<% } %>
        )
            .andExpect(status().isBadRequest)
        <%_ } else { _%>
        accountWebTestClient.post().uri("/api/register")
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(convertObjectToJsonBytes(invalidUser))
            .exchange()
            .expectStatus().isBadRequest
        <%_ } _%>

        val user = userRepository.findOneByLogin("bob")<% if (reactive) { %>.blockOptional()<% } %>
        assertThat(user).isEmpty
    }

    @Test<% if (databaseType === 'sql' && !reactive) { %>
    @Transactional<% } %>
    @Throws(Exception::class)
    fun testRegisterInvalidPassword() {
        val invalidUser = ManagedUserVM().apply {
            login = "bob"
            password = "123" // password with only 3 digits
            firstName = "Bob"
            lastName = "Green"
            email = "bob@example.com"
            activated = true
            <%_ if (['sql',  'mongodb',  'couchbase',  'neo4j'].includes(databaseType)) { _%>
            imageUrl = "http://placehold.it/50x50"
            <%_ } _%>
            langKey = DEFAULT_LANGUAGE
            authorities = mutableSetOf(USER)
        }

        <%_ if (!reactive) { _%>
        restAccountMockMvc.perform(
            post("/api/register")
                .contentType(MediaType.APPLICATION_JSON)
                .content(convertObjectToJsonBytes(invalidUser))<% if (testsNeedCsrf) { %>
                .with(csrf())<% } %>
        )
            .andExpect(status().isBadRequest)
        <%_ } else { _%>
        accountWebTestClient.post().uri("/api/register")
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(convertObjectToJsonBytes(invalidUser))
            .exchange()
            .expectStatus().isBadRequest
        <%_ } _%>

        val user = userRepository.findOneByLogin("bob")<% if (reactive) { %>.blockOptional()<% } %>
        assertThat(user).isEmpty
    }

    @Test<% if (databaseType === 'sql' && !reactive) { %>
    @Transactional<% } %>
    @Throws(Exception::class)
    fun testRegisterNullPassword() {
        val invalidUser = ManagedUserVM().apply {
            login = "bob"
            password = null // invalid null password
            firstName = "Bob"
            lastName = "Green"
            email = "bob@example.com"
            activated = true
            <%_ if (['sql',  'mongodb',  'couchbase',  'neo4j'].includes(databaseType)) { _%>
            imageUrl = "http://placehold.it/50x50"
            <%_ } _%>
            langKey = DEFAULT_LANGUAGE
            authorities = mutableSetOf(USER)
        }

        <%_ if (!reactive) { _%>
        restAccountMockMvc.perform(
            post("/api/register")
                .contentType(MediaType.APPLICATION_JSON)
                .content(convertObjectToJsonBytes(invalidUser))<% if (testsNeedCsrf) { %>
                .with(csrf())<% } %>
        )
            .andExpect(status().isBadRequest)
        <%_ } else { _%>
        accountWebTestClient.post().uri("/api/register")
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(convertObjectToJsonBytes(invalidUser))
            .exchange()
            .expectStatus().isBadRequest
        <%_ } _%>

        val user = userRepository.findOneByLogin("bob")<% if (reactive) { %>.blockOptional()<% } %>
        assertThat(user).isEmpty
    }

    @Test<% if (databaseType === 'sql' && !reactive) { %>
    @Transactional<% } %>
    @Throws(Exception::class)
    fun testRegisterDuplicateLogin() {
        <%_ if (searchEngine === 'elasticsearch' && reactive) { _%>
        // Configure the mock search repository
        `when`(mockUserSearchRepository.save(any(User::class.java)))
            .thenAnswer { Mono.just(it.arguments[0] as User) }
    
        <%_ } _%>
        // First registration
        val firstUser = ManagedUserVM().apply {
            login = "alice"
            password = "password"
            firstName = "Alice"
            lastName = "Something"
            email = "alice@example.com"
            <%_ if (['sql',  'mongodb',  'couchbase',  'neo4j'].includes(databaseType)) { _%>
            imageUrl = "http://placehold.it/50x50"
            <%_ } _%>
            langKey = DEFAULT_LANGUAGE
            authorities = mutableSetOf(USER)
        }

        // Duplicate login, different email
        val secondUser = ManagedUserVM().apply {
            login = firstUser.login
            password = firstUser.password
            firstName = firstUser.firstName
            lastName = firstUser.lastName
            email = "alice2@example.com"
            <%_ if (['sql',  'mongodb',  'couchbase',  'neo4j'].includes(databaseType)) { _%>
            imageUrl = firstUser.imageUrl
            <%_ } _%>
            langKey = firstUser.langKey
            <%_ if (['sql',  'mongodb',  'couchbase',  'neo4j'].includes(databaseType)) { _%>
            createdBy = firstUser.createdBy
            createdDate = firstUser.createdDate
            lastModifiedBy = firstUser.lastModifiedBy
            lastModifiedDate = firstUser.lastModifiedDate
            <%_ } _%>
            authorities = firstUser.authorities?.toMutableSet()
        }

        // First user
        <%_ if (!reactive) { _%>
        restAccountMockMvc.perform(
            post("/api/register")
                .contentType(MediaType.APPLICATION_JSON)
                .content(convertObjectToJsonBytes(firstUser))<% if (testsNeedCsrf) { %>
                .with(csrf())<% } %>
        )
            .andExpect(status().isCreated)
        <%_ } else { _%>
        accountWebTestClient.post().uri("/api/register")
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(convertObjectToJsonBytes(firstUser))
            .exchange()
            .expectStatus().isCreated
        <%_ } _%>

        // Second (non activated) user
        <%_ if (!reactive) { _%>
        restAccountMockMvc.perform(
            post("/api/register")
                .contentType(MediaType.APPLICATION_JSON)
                .content(convertObjectToJsonBytes(secondUser))<% if (testsNeedCsrf) { %>
                .with(csrf())<% } %>
        )
            .andExpect(status().isCreated)
        <%_ } else { _%>
        accountWebTestClient.post().uri("/api/register")
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(convertObjectToJsonBytes(secondUser))
            .exchange()
            .expectStatus().isCreated
        <%_ } _%>

        val testUser = userRepository.findOneByEmailIgnoreCase("alice2@example.com")<% if (reactive) { %>.blockOptional()<% } %>
        assertThat(testUser).isPresent
        testUser.get().activated = true
        userRepository.save(testUser.get())<% if (reactive) { %>.block()<% } %>

        // Second (already activated) user
        <%_ if (!reactive) { _%>
        restAccountMockMvc.perform(
            post("/api/register")
                .contentType(MediaType.APPLICATION_JSON)
                .content(convertObjectToJsonBytes(secondUser))<% if (testsNeedCsrf) { %>
                .with(csrf())<% } %>
        )
            .andExpect(status().is4xxClientError)
        <%_ } else { _%>
        accountWebTestClient.post().uri("/api/register")
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(convertObjectToJsonBytes(secondUser))
            .exchange()
            .expectStatus().isBadRequest
        <%_ } _%>
    }

    @Test<% if (databaseType === 'sql' && !reactive) { %>
    @Transactional<% } %>
    @Throws(Exception::class)
    fun testRegisterDuplicateEmail() {
        <%_ if (searchEngine === 'elasticsearch' && reactive) { _%>
        // Configure the mock search repository
        `when`(mockUserSearchRepository.save(any(User::class.java)))
            .thenAnswer { Mono.just(it.arguments[0] as User) }
    
        <%_ } _%>
        // First user
        val firstUser = ManagedUserVM().apply {
            login = "test-register-duplicate-email"
            password = "password"
            firstName = "Alice"
            lastName = "Test"
            email = "test-register-duplicate-email@example.com"
            <%_ if (['sql',  'mongodb',  'couchbase',  'neo4j'].includes(databaseType)) { _%>
            imageUrl = "http://placehold.it/50x50"
            <%_ } _%>
            langKey = DEFAULT_LANGUAGE
            authorities = mutableSetOf(USER)
        }

        // Register first user
        <%_ if (!reactive) { _%>
        restAccountMockMvc.perform(
            post("/api/register")
                .contentType(MediaType.APPLICATION_JSON)
                .content(convertObjectToJsonBytes(firstUser))<% if (testsNeedCsrf) { %>
                .with(csrf())<% } %>
        )
            .andExpect(status().isCreated)
        <%_ } else { _%>
        accountWebTestClient.post().uri("/api/register")
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(convertObjectToJsonBytes(firstUser))
            .exchange()
            .expectStatus().isCreated
        <%_ } _%>

        val testUser1 = userRepository.findOneByLogin("test-register-duplicate-email")<% if (reactive) { %>.blockOptional()<% } %>
        assertThat(testUser1).isPresent

        // Duplicate email, different login
        val secondUser = ManagedUserVM().apply {
            login = "test-register-duplicate-email-2"
            password = firstUser.password
            firstName = firstUser.firstName
            lastName = firstUser.lastName
            email = firstUser.email
            <%_ if (['sql',  'mongodb',  'couchbase',  'neo4j'].includes(databaseType)) { _%>
            imageUrl = firstUser.imageUrl
            <%_ } _%>
            langKey = firstUser.langKey
            authorities = firstUser.authorities?.toMutableSet()
        }

        // Register second (non activated) user
        <%_ if (!reactive) { _%>
        restAccountMockMvc.perform(
            post("/api/register")
                .contentType(MediaType.APPLICATION_JSON)
                .content(convertObjectToJsonBytes(secondUser))<% if (testsNeedCsrf) { %>
                .with(csrf())<% } %>
        )
            .andExpect(status().isCreated)
        <%_ } else { _%>
        accountWebTestClient.post().uri("/api/register")
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(convertObjectToJsonBytes(secondUser))
            .exchange()
            .expectStatus().isCreated
        <%_ } _%>

        val testUser2 = userRepository.findOneByLogin("test-register-duplicate-email")<% if (reactive) { %>.blockOptional()<% } %>
        assertThat(testUser2).isEmpty

        val testUser3 = userRepository.findOneByLogin("test-register-duplicate-email-2")<% if (reactive) { %>.blockOptional()<% } %>
        assertThat(testUser3).isPresent

        // Duplicate email - with uppercase email address
        val userWithUpperCaseEmail = ManagedUserVM().apply {
            id = firstUser.id
            login = "test-register-duplicate-email-3"
            password = firstUser.password
            firstName = firstUser.firstName
            lastName = firstUser.lastName
            email = "TEST-register-duplicate-email@example.com"
            <%_ if (['sql',  'mongodb',  'couchbase',  'neo4j'].includes(databaseType)) { _%>
            imageUrl = firstUser.imageUrl
            <%_ } _%>
            langKey = firstUser.langKey
            authorities = firstUser.authorities?.toMutableSet()
        }

        // Register third (not activated) user
        <%_ if (!reactive) { _%>
        restAccountMockMvc.perform(
            post("/api/register")
                .contentType(MediaType.APPLICATION_JSON)
                .content(convertObjectToJsonBytes(userWithUpperCaseEmail))<% if (testsNeedCsrf) { %>
                .with(csrf())<% } %>
        )
            .andExpect(status().isCreated)
        <%_ } else { _%>
        accountWebTestClient.post().uri("/api/register")
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(convertObjectToJsonBytes(userWithUpperCaseEmail))
            .exchange()
            .expectStatus().isCreated
        <%_ } _%>

        val testUser4 = userRepository.findOneByLogin("test-register-duplicate-email-3")<% if (reactive) { %>.blockOptional()<% } %>
        assertThat(testUser4).isPresent
        assertThat(testUser4.get().email).isEqualTo("test-register-duplicate-email@example.com")

        testUser4.get().activated = true
        userService.updateUser((<%= asDto('AdminUser') %>(testUser4.get())))<% if (reactive) { %>.block()<% } %>

        // Register 4th (already activated) user
        <%_ if (!reactive) { _%>
        restAccountMockMvc.perform(
            post("/api/register")
                .contentType(MediaType.APPLICATION_JSON)
                .content(convertObjectToJsonBytes(secondUser))<% if (testsNeedCsrf) { %>
                .with(csrf())<% } %>
        )
            .andExpect(status().is4xxClientError)
        <%_ } else { _%>
        accountWebTestClient.post().uri("/api/register")
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(convertObjectToJsonBytes(secondUser))
            .exchange()
            .expectStatus().is4xxClientError
        <%_ } _%>
    }

    @Test<% if (databaseType === 'sql' && !reactive) { %>
    @Transactional<% } %>
    @Throws(Exception::class)
    fun testRegisterAdminIsIgnored() {
        val validUser = ManagedUserVM().apply {
            login = "badguy"
            password = "password"
            firstName = "Bad"
            lastName = "Guy"
            email = "badguy@example.com"
            activated = true
            <%_ if (['sql',  'mongodb',  'couchbase',  'neo4j'].includes(databaseType)) { _%>
            imageUrl = "http://placehold.it/50x50"
            <%_ } _%>
            langKey = DEFAULT_LANGUAGE
            authorities = mutableSetOf(ADMIN)
        }

        <%_ if (searchEngine === 'elasticsearch' && reactive) { _%>
        // Configure the mock search repository
        `when`(mockUserSearchRepository.save(any(User::class.java)))
            .thenAnswer { Mono.just(it.arguments[0] as User) }
    
        <%_ } _%>

        <%_ if (!reactive) { _%>
        restAccountMockMvc.perform(
            post("/api/register")
                .contentType(MediaType.APPLICATION_JSON)
                .content(convertObjectToJsonBytes(validUser))<% if (testsNeedCsrf) { %>
                .with(csrf())<% } %>
        )
            .andExpect(status().isCreated)
        <%_ } else { _%>
        accountWebTestClient.post().uri("/api/register")
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(convertObjectToJsonBytes(validUser))
            .exchange()
            .expectStatus().isCreated
        <%_ } _%>

        val userDup = userRepository.findOne<% if (databaseType === 'sql') { %>WithAuthorities<% } %>ByLogin("badguy")<% if (reactive) { %>.blockOptional()<% } %>
        assertThat(userDup).isPresent
        assertThat(userDup.get().authorities).hasSize(1)
            .containsExactly(<% if (databaseType === 'sql' || databaseType === 'mongodb' || databaseType === 'neo4j') { %>authorityRepository.findById(USER).<% if (reactive) { %>block<% } else { %>get<% } %>()<% } %><% if (databaseType === 'cassandra' || databaseType === 'couchbase') { %>USER<% } %>)
    }

    @Test<% if (databaseType === 'sql' && !reactive) { %>
    @Transactional<% } %>
    <%_ if (!reactive) { _%>
    @Throws(Exception::class)
    <%_ } _%>
    fun testActivateAccount() {
        <%_ if (searchEngine === 'elasticsearch' && reactive) { _%>
        // Configure the mock search repository
        `when`(mockUserSearchRepository.save(any(User::class.java)))
            .thenAnswer { Mono.just(it.arguments[0] as User) }
    
        <%_ } _%>
        val activationKey = "some activation key"
        var user = <%= asEntity('User') %>(
            <%_ if (databaseType === 'cassandra') { _%>
            id = UUID.randomUUID().toString(),
            <%_ } _%>
            login = "activate-account",
            email = "activate-account@example.com",
            password = RandomStringUtils.random(60),
            activated = false,
            <%_ if (databaseType === 'sql' && reactive) { _%>
            createdBy = SYSTEM_ACCOUNT,
            <%_ } _%>
            activationKey = activationKey
        )

        userRepository.save<% if (databaseType === 'sql' && !reactive) { %>AndFlush<% } %>(user)<% if (reactive) { %>.block()<% } %>

        <%_ if (!reactive) { _%>
        restAccountMockMvc.perform(get("/api/activate?key={activationKey}", activationKey))
            .andExpect(status().isOk)
        <%_ } else { _%>
        accountWebTestClient.get().uri("/api/activate?key={activationKey}", activationKey)
            .exchange()
            .expectStatus().isOk
        <%_ } _%>

        user = userRepository.findOneByLogin(user.login!!)<%_ if (!reactive) { _%>.orElse(null)<% } else { %>.block()!!<% } %>
        assertThat(user.activated).isTrue()
    }

    @Test<% if (databaseType === 'sql' && !reactive) { %>
    @Transactional<% } %>
    <%_ if (!reactive) { _%>
    @Throws(Exception::class)<% } %>
    fun testActivateAccountWithWrongKey() {
        <%_ if (!reactive) { _%>
        restAccountMockMvc.perform(get("/api/activate?key=wrongActivationKey"))
            .andExpect(status().isInternalServerError)
        <%_ } else { _%>
        accountWebTestClient.get().uri("/api/activate?key=wrongActivationKey")
            .exchange()
            .expectStatus().isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR)
        <%_ } _%>
    }

    @Test<% if (databaseType === 'sql' && !reactive) { %>
    @Transactional<% } %>
    @WithMockUser("save-account")
    @Throws(Exception::class)
    fun testSaveAccount() {
        val user = <%= asEntity('User') %>(
            <%_ if (databaseType === 'cassandra') { _%>
            id = UUID.randomUUID().toString(),
            <%_ } _%>
            login = "save-account",
            email = "save-account@example.com",
            password = RandomStringUtils.random(60),
            <%_ if (databaseType === 'sql' && reactive) { _%>
            createdBy = SYSTEM_ACCOUNT,
            <%_ } _%>
            activated = true
        )

        userRepository.save<% if (databaseType === 'sql' && !reactive) { %>AndFlush<% } %>(user)<% if (reactive) { %>.block()<% } %>
        <%_ if (searchEngine === 'elasticsearch' && reactive) { _%>
        // Configure the mock search repository
        `when`(mockUserSearchRepository.save(any(User::class.java)))
            .thenAnswer { Mono.just(it.arguments[0] as User) }

        <%_ } _%>

        val userDTO = <%= asDto('AdminUser') %>(
            login = "not-used",
            firstName = "firstname",
            lastName = "lastname",
            email = "save-account@example.com",
            activated = false,
            <%_ if (['sql',  'mongodb',  'couchbase',  'neo4j'].includes(databaseType)) { _%>
            imageUrl = "http://placehold.it/50x50",
            <%_ } _%>
            langKey = DEFAULT_LANGUAGE,
            authorities = mutableSetOf(ADMIN)
        )

        <%_ if (!reactive) { _%>
        restAccountMockMvc.perform(
            post("/api/account")
                .contentType(MediaType.APPLICATION_JSON)
                .content(convertObjectToJsonBytes(userDTO))<% if (testsNeedCsrf) { %>
                .with(csrf())<% } %>
        )
            .andExpect(status().isOk)
        <%_ } else { _%>
        accountWebTestClient.post().uri("/api/account")
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(convertObjectToJsonBytes(userDTO))
            .exchange()
            .expectStatus().isOk
        <%_ } _%>

        val updatedUser = userRepository.findOne<% if (databaseType === 'sql') { %>WithAuthorities<% } %>ByLogin(user?.login!!)<%_ if (!reactive) { _%>.orElse(null)<% } else { %>.block()<% } %>
        assertThat(updatedUser?.firstName).isEqualTo(userDTO.firstName)
        assertThat(updatedUser?.lastName).isEqualTo(userDTO.lastName)
        assertThat(updatedUser?.email).isEqualTo(userDTO.email)
        assertThat(updatedUser?.langKey).isEqualTo(userDTO.langKey)
        assertThat(updatedUser?.password).isEqualTo(user.password)<% if (['sql',  'mongodb',  'couchbase',  'neo4j'].includes(databaseType)) { %>
        assertThat(updatedUser?.imageUrl).isEqualTo(userDTO.imageUrl)<% } %>
        assertThat(updatedUser?.activated).isTrue()
        assertThat(updatedUser?.authorities).isEmpty()
    }

    @Test<% if (databaseType === 'sql' && !reactive) { %>
    @Transactional<% } %>
    @WithMockUser("save-invalid-email")
    <%_ if (!reactive) { _%>
    @Throws(Exception::class)
    <%_ } _%>
    fun testSaveInvalidEmail() {
        val user = <%= asEntity('User') %>(
            <%_ if (databaseType === 'cassandra') { _%>
            id = UUID.randomUUID().toString(),
            <%_ } _%>
            login = "save-invalid-email",
            email = "save-invalid-email@example.com",
            password = RandomStringUtils.random(60),
            <%_ if (databaseType === 'sql' && reactive) { _%>
            createdBy = SYSTEM_ACCOUNT,
            <%_ } _%>
            activated = true
        )

        userRepository.save<% if (databaseType === 'sql' && !reactive) { %>AndFlush<% } %>(user)<% if (reactive) { %>.block()<% } %>

        val userDTO = <%= asDto('AdminUser') %>(
            login = "not-used",
            firstName = "firstname",
            lastName = "lastname",
            email = "invalid email",
            activated = false,
            <%_ if (['sql',  'mongodb',  'couchbase',  'neo4j'].includes(databaseType)) { _%>
            imageUrl = "http://placehold.it/50x50",
            <%_ } _%>
            langKey = DEFAULT_LANGUAGE,
            authorities = mutableSetOf(ADMIN)
        )

        <%_ if (!reactive) { _%>
        restAccountMockMvc.perform(
            post("/api/account")
                .contentType(MediaType.APPLICATION_JSON)
                .content(convertObjectToJsonBytes(userDTO))<% if (testsNeedCsrf) { %>
                .with(csrf())<% } %>
        )
            .andExpect(status().isBadRequest)
        <%_ } else { _%>
        accountWebTestClient.post().uri("/api/account")
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(convertObjectToJsonBytes(userDTO))
            .exchange()
            .expectStatus().isBadRequest
        <%_ } _%>

        assertThat(userRepository.findOneByEmailIgnoreCase("invalid email")<% if (reactive) { %>.blockOptional()<% } %>).isNotPresent
    }

    @Test<% if (databaseType === 'sql' && !reactive) { %>
    @Transactional<% } %>
    @WithMockUser("save-existing-email")
    <%_ if (!reactive) { _%>
    @Throws(Exception::class)
    <%_ } _%>
    fun testSaveExistingEmail() {
        val user = <%= asEntity('User') %>(
            <%_ if (databaseType === 'cassandra') { _%>
            id = UUID.randomUUID().toString(),
            <%_ } _%>
            login = "save-existing-email",
            email = "save-existing-email@example.com",
            password = RandomStringUtils.random(60),
            <%_ if (databaseType === 'sql' && reactive) { _%>
            createdBy = SYSTEM_ACCOUNT,
            <%_ } _%>
            activated = true
        )

        userRepository.save<% if (databaseType === 'sql' && !reactive) { %>AndFlush<% } %>(user)<% if (reactive) { %>.block()<% } %>

        val anotherUser = <%= asEntity('User') %>(
            <%_ if (databaseType === 'cassandra') { _%>
            id  = UUID.randomUUID().toString(),
            <%_ } _%>
            login = "save-existing-email2",
            email = "save-existing-email2@example.com",
            password = RandomStringUtils.random(60),
            <%_ if (databaseType === 'sql' && reactive) { _%>
            createdBy = SYSTEM_ACCOUNT,
            <%_ } _%>
            activated = true
        )

        userRepository.save<% if (databaseType === 'sql' && !reactive) { %>AndFlush<% } %>(anotherUser)<% if (reactive) { %>.block()<% } %>

        val userDTO = <%= asDto('AdminUser') %>(
            login = "not-used",
            firstName = "firstname",
            lastName = "lastname",
            email = "save-existing-email2@example.com",
            activated = false,
            <%_ if (['sql',  'mongodb',  'couchbase',  'neo4j'].includes(databaseType)) { _%>
            imageUrl = "http://placehold.it/50x50",
            <%_ } _%>
            langKey = DEFAULT_LANGUAGE,
            authorities = mutableSetOf(ADMIN)
        )

        <%_ if (!reactive) { _%>
        restAccountMockMvc.perform(
            post("/api/account")
                .contentType(MediaType.APPLICATION_JSON)
                .content(convertObjectToJsonBytes(userDTO))<% if (testsNeedCsrf) { %>
                .with(csrf())<% } %>
        )
            .andExpect(status().isBadRequest)
        <%_ } else { _%>
        accountWebTestClient.post().uri("/api/account")
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(convertObjectToJsonBytes(userDTO))
            .exchange()
            .expectStatus().isBadRequest
        <%_ } _%>

        val updatedUser = userRepository.findOneByLogin("save-existing-email")<%_ if (!reactive) { _%>.orElse(null)<% } else { %>.block()<% } %>
        assertThat(updatedUser.email).isEqualTo("save-existing-email@example.com")
    }

    @Test<% if (databaseType === 'sql' && !reactive) { %>
    @Transactional<% } %>
    @WithMockUser("save-existing-email-and-login")
    <%_ if (!reactive) { _%>@Throws(Exception::class)<%_ } _%>
    fun testSaveExistingEmailAndLogin() {
        val user = <%= asEntity('User') %>(
            <%_ if (databaseType === 'cassandra') { _%>
            id = UUID.randomUUID().toString(),
            <%_ } _%>
            login = "save-existing-email-and-login",
            email = "save-existing-email-and-login@example.com",
            password = RandomStringUtils.random(60),
            <%_ if (databaseType === 'sql' && reactive) { _%>
            createdBy = SYSTEM_ACCOUNT,
            <%_ } _%>
            activated = true
        )

        userRepository.save<% if (databaseType === 'sql' && !reactive) { %>AndFlush<% } %>(user)<% if (reactive) { %>.block()<% } %>
        <%_ if (searchEngine === 'elasticsearch' && reactive) { _%>
        // Configure the mock search repository
        `when`(mockUserSearchRepository.save(any(User::class.java)))
            .thenAnswer { Mono.just(it.arguments[0] as User) }

        <%_ } _%>

        val userDTO = <%= asDto('AdminUser') %>(
            login = "not-used",
            firstName = "firstname",
            lastName = "lastname",
            email = "save-existing-email-and-login@example.com",
            activated = false,
            <%_ if (['sql',  'mongodb',  'couchbase',  'neo4j'].includes(databaseType)) { _%>
            imageUrl = "http://placehold.it/50x50",
            <%_ } _%>
            langKey = DEFAULT_LANGUAGE,
            authorities = mutableSetOf(ADMIN)
        )
        // Mark here....
        <%_ if (!reactive) { _%>
        restAccountMockMvc.perform(
            post("/api/account")
                .contentType(MediaType.APPLICATION_JSON)
                .content(convertObjectToJsonBytes(userDTO))<% if (testsNeedCsrf) { %>
                .with(csrf())<% } %>
        )
            .andExpect(status().isOk)
        <%_ } else { _%>
        accountWebTestClient.post().uri("/api/account")
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(convertObjectToJsonBytes(userDTO))
            .exchange()
            .expectStatus().isOk
        <%_ } _%>

        val updatedUser = userRepository.findOneByLogin("save-existing-email-and-login")<%_ if (!reactive) { _%>.orElse(null)<% } else { %>.block()
        assertNotNull(updatedUser)<% } %>
        assertThat(updatedUser.email).isEqualTo("save-existing-email-and-login@example.com")
    }

    @Test<% if (databaseType === 'sql' && !reactive) { %>
    @Transactional<% } %>
    @WithMockUser("change-password-wrong-existing-password")
    <%_ if (!reactive) { _%>@Throws(Exception::class)<%_ } _%>
    fun testChangePasswordWrongExistingPassword() {
        val currentPassword = RandomStringUtils.random(60)
        val user = <%= asEntity('User') %>(
            <%_ if (databaseType === 'cassandra') { _%>
            id = UUID.randomUUID().toString(),
            <%_ } _%>
            password = passwordEncoder.encode(currentPassword),
            login = "change-password-wrong-existing-password",
            <%_ if (databaseType === 'sql' && reactive) { _%>
            createdBy = SYSTEM_ACCOUNT,
            <%_ } _%>
            email = "change-password-wrong-existing-password@example.com"
        )

        userRepository.save<% if (databaseType === 'sql' && !reactive) { %>AndFlush<% } %>(user)<% if (reactive) { %>.block()<% } %>

        <%_ if (!reactive) { _%>
        restAccountMockMvc.perform(
            post("/api/account/change-password")
                .contentType(MediaType.APPLICATION_JSON)
                .content(convertObjectToJsonBytes(PasswordChangeDTO("1$currentPassword", "new password")))
                <%_ if (testsNeedCsrf) { _%>
                .with(csrf())<%_ } _%>
        )
            .andExpect(status().isBadRequest)
        <%_ } else { _%>
        accountWebTestClient.post().uri("/api/account/change-password")
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(convertObjectToJsonBytes(PasswordChangeDTO("1$currentPassword", "new password")))
            .exchange()
            .expectStatus().isBadRequest
        <%_ } _%>

        val updatedUser = userRepository.findOneByLogin("change-password-wrong-existing-password")<%_ if (!reactive) { _%>.orElse(null)<% } else { %>.block()
        assertNotNull(updatedUser)<% } %>
        assertThat(passwordEncoder.matches("new password", updatedUser.password)).isFalse()
        assertThat(passwordEncoder.matches(currentPassword, updatedUser.password)).isTrue()
    }

    @Test<% if (databaseType === 'sql' && !reactive) { %>
    @Transactional<% } %>
    @WithMockUser("change-password")
    <%_ if (!reactive) { _%>@Throws(Exception::class)<%_ } _%>
    fun testChangePassword() {
        val currentPassword = RandomStringUtils.random(60)
        val user = <%= asEntity('User') %>(
            <%_ if (databaseType === 'cassandra') { _%>
            id = UUID.randomUUID().toString(),
            <%_ } _%>
            password = passwordEncoder.encode(currentPassword),
            login = "change-password",
            <%_ if (databaseType === 'sql' && reactive) { _%>
            createdBy = SYSTEM_ACCOUNT,
            <%_ } _%>
            email = "change-password@example.com"
        )

        userRepository.save<% if (databaseType === 'sql' && !reactive) { %>AndFlush<% } %>(user)<% if (reactive) { %>.block()<% } %>

        <%_ if (!reactive) { _%>
        restAccountMockMvc.perform(
            post("/api/account/change-password")
                .contentType(MediaType.APPLICATION_JSON)
                .content(convertObjectToJsonBytes(PasswordChangeDTO(currentPassword, "new password")))
                <%_ if (testsNeedCsrf) { _%>
                .with(csrf())<%_ } _%>
        )
            .andExpect(status().isOk)
        <%_ } else { _%>
        accountWebTestClient.post().uri("/api/account/change-password")
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(convertObjectToJsonBytes(PasswordChangeDTO(currentPassword, "new password")))
            .exchange()
            .expectStatus().isOk
        <%_ } _%>

        val updatedUser = userRepository.findOneByLogin("change-password")<%_ if (!reactive) { _%>.orElse(null)<% } else { %>.block()
        assertNotNull(updatedUser)<% } %>
        assertThat(passwordEncoder.matches("new password", updatedUser.password)).isTrue()
    }

    @Test<% if (databaseType === 'sql' && !reactive) { %>
    @Transactional<% } %>
    @WithMockUser("change-password-too-small")
    <%_ if (!reactive) { _%>@Throws(Exception::class)<%_ } _%>
    fun testChangePasswordTooSmall() {
        val currentPassword = RandomStringUtils.random(60)
        val user = <%= asEntity('User') %>(
            <%_ if (databaseType === 'cassandra') { _%>
            id = UUID.randomUUID().toString(),
            <%_ } _%>
            password = passwordEncoder.encode(currentPassword),
            login = "change-password-too-small",
            <%_ if (databaseType === 'sql' && reactive) { _%>
            createdBy = SYSTEM_ACCOUNT,
            <%_ } _%>
            email = "change-password-too-small@example.com"
        )

        userRepository.save<% if (databaseType === 'sql' && !reactive) { %>AndFlush<% } %>(user)<% if (reactive) { %>.block()<% } %>

        val newPassword = RandomStringUtils.random(ManagedUserVM.PASSWORD_MIN_LENGTH - 1)

        <%_ if (!reactive) { _%>
        restAccountMockMvc.perform(
            post("/api/account/change-password")
                .contentType(MediaType.APPLICATION_JSON)
                .content(convertObjectToJsonBytes(PasswordChangeDTO(currentPassword, newPassword)))
                <%_ if (testsNeedCsrf) { _%>
                .with(csrf())<%_ } _%>
        )
            .andExpect(status().isBadRequest)
        <%_ } else { _%>
        accountWebTestClient.post().uri("/api/account/change-password")
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(convertObjectToJsonBytes(PasswordChangeDTO(currentPassword, newPassword)))
            .exchange()
            .expectStatus().isBadRequest
        <%_ } _%>

        val updatedUser = userRepository.findOneByLogin("change-password-too-small")<%_ if (!reactive) { _%>.orElse(null)<% } else { %>.block()
        assertNotNull(updatedUser)<% } %>
        assertThat(updatedUser.password).isEqualTo(user.password)
    }

    @Test<% if (databaseType === 'sql' && !reactive) { %>
    @Transactional<% } %>
    @WithMockUser("change-password-too-long")
    <%_ if (!reactive) { _%>@Throws(Exception::class)<%_ } _%>
    fun testChangePasswordTooLong() {
        val currentPassword = RandomStringUtils.random(60)
        val user = <%= asEntity('User') %>(
            <%_ if (databaseType === 'cassandra') { _%>
            id = UUID.randomUUID().toString(),
            <%_ } _%>
            password = passwordEncoder.encode(currentPassword),
            login = "change-password-too-long",
            <%_ if (databaseType === 'sql' && reactive) { _%>
            createdBy = SYSTEM_ACCOUNT,
            <%_ } _%>
            email = "change-password-too-long@example.com"
        )

        userRepository.save<% if (databaseType === 'sql' && !reactive) { %>AndFlush<% } %>(user)<% if (reactive) { %>.block()<% } %>

        val newPassword = RandomStringUtils.random(ManagedUserVM.PASSWORD_MAX_LENGTH + 1)

        <%_ if (!reactive) { _%>
        restAccountMockMvc.perform(
            post("/api/account/change-password")
                .contentType(MediaType.APPLICATION_JSON)
                .content(convertObjectToJsonBytes(PasswordChangeDTO(currentPassword, newPassword)))
                <%_ if (testsNeedCsrf) { _%>
                .with(csrf())<%_ } _%>
        )
            .andExpect(status().isBadRequest)
        <%_ } else { _%>
        accountWebTestClient.post().uri("/api/account/change-password")
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(convertObjectToJsonBytes(PasswordChangeDTO(currentPassword, newPassword)))
            .exchange()
            .expectStatus().isBadRequest
        <%_ } _%>

        val updatedUser = userRepository.findOneByLogin("change-password-too-long")<%_ if (!reactive) { _%>.orElse(null)<% } else { %>.block()
        assertNotNull(updatedUser)<% } %>
        assertThat(updatedUser.password).isEqualTo(user.password)
    }

    @Test<% if (databaseType === 'sql' && !reactive) { %>
    @Transactional<% } %>
    @WithMockUser("change-password-empty")
    <%_ if (!reactive) { _%>@Throws(Exception::class)<%_ } _%>
    fun testChangePasswordEmpty() {
        val currentPassword = RandomStringUtils.random(60)
        val user = <%= asEntity('User') %>(
            <%_ if (databaseType === 'cassandra') { _%>
            id = UUID.randomUUID().toString(),
            <%_ } _%>
            password = passwordEncoder.encode(currentPassword),
            login = "change-password-empty",
            <%_ if (databaseType === 'sql' && reactive) { _%>
            createdBy = SYSTEM_ACCOUNT,
            <%_ } _%>
            email = "change-password-empty@example.com"
        )

        userRepository.save<% if (databaseType === 'sql' && !reactive) { %>AndFlush<% } %>(user)<% if (reactive) { %>.block()<% } %>

        <%_ if (!reactive) { _%>
        restAccountMockMvc.perform(
            post("/api/account/change-password")
                .contentType(MediaType.APPLICATION_JSON)
                .content(convertObjectToJsonBytes(PasswordChangeDTO(currentPassword, "")))
                <%_ if (testsNeedCsrf) { _%>
                .with(csrf())<%_ } _%>
        )
            .andExpect(status().isBadRequest)
        <%_ } else { _%>
        accountWebTestClient.post().uri("/api/account/change-password")
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(convertObjectToJsonBytes(PasswordChangeDTO(currentPassword, "")))
            .exchange()
            .expectStatus().isBadRequest
        <%_ } _%>

        val updatedUser = userRepository.findOneByLogin("change-password-empty")<% if (!reactive) { %>.orElse(null)<% } else { %>.block()
        assertNotNull(updatedUser)<% } %>
        assertThat(updatedUser.password).isEqualTo(user.password)
    }
    <%_ if (authenticationType === 'session' && !reactive) { _%>

    @Test<% if (databaseType === 'sql' && !reactive) { %>
    @Transactional<% } %>
    @WithMockUser("current-sessions")
    <%_ if (!reactive) { _%>@Throws(Exception::class)<%_ } _%>
    fun testGetCurrentSessions() {
        val user = <%= asEntity('User') %>(
            <%_ if (databaseType === 'cassandra') { _%>
            id = UUID.randomUUID().toString(),
            <%_ } _%>
            password = RandomStringUtils.random(60),
            login = "current-sessions",
            <%_ if (databaseType === 'sql' && reactive) { _%>
            createdBy = SYSTEM_ACCOUNT,
            <%_ } _%>
            email = "current-sessions@example.com"
        )

        userRepository.save<% if (databaseType === 'sql' && !reactive) { %>AndFlush<% } %>(user)<% if (reactive) { %>.block()<% } %>

        val token = PersistentToken(
            series = "current-sessions",
            <%_ if (databaseType === 'sql' || databaseType === 'mongodb' || databaseType === 'neo4j') { _%>
            user = user,
            <%_ } else if (databaseType === 'cassandra') { _%>
            userId = user.id,
            <%_ } else if (databaseType === 'couchbase') { _%>
            login = login,
            <%_ } _%>
            tokenValue = "current-session-data",
            <%_ if (databaseType === 'cassandra') { _%>
            tokenDate = Instant.parse("2017-03-28T15:25:57.123Z"),
            <%_ } else { _%>
            tokenDate = LocalDate.of(2017, 3, 23),
            <% } %>
            ipAddress = "127.0.0.1",
            userAgent = "Test agent"
        )

        persistentTokenRepository.save<% if (databaseType === 'sql' && !reactive) { %>AndFlush<% } %>(token)

        restAccountMockMvc.perform(get("/api/account/sessions"))
            .andExpect(status().isOk)
            .andExpect(jsonPath("\$.[*].series").value(hasItem(token.series)))
            .andExpect(jsonPath("\$.[*].ipAddress").value(hasItem(token.ipAddress)))
            .andExpect(jsonPath("\$.[*].userAgent").value(hasItem(token.userAgent)))
            .andExpect(jsonPath("$.[*].tokenDate").value(hasItem(containsString(<% if (databaseType === 'cassandra') { %>"2017-03-28T15:25:57.123Z"<% } else { %>token.tokenDate.toString()<% } %>))))
    }

    @Test<% if (databaseType === 'sql' && !reactive) { %>
    @Transactional<% } %>
    @WithMockUser("invalidate-session")
    <%_ if (!reactive) { _%>@Throws(Exception::class)<%_ } _%>
    fun testInvalidateSession() {
        val user = <%= asEntity('User') %>(
            <%_ if (databaseType === 'cassandra') { _%>
            id = UUID.randomUUID().toString(),
            <%_ } _%>
            password = RandomStringUtils.random(60),
            login = "invalidate-session",
            <%_ if (databaseType === 'sql' && reactive) { _%>
            createdBy = SYSTEM_ACCOUNT,
            <%_ } _%>
            email = "invalidate-session@example.com"
        )

        userRepository.save<% if (databaseType === 'sql' && !reactive) { %>AndFlush<% } %>(user)<% if (reactive) { %>.block()<% } %>

        val token = PersistentToken(
            series = "invalidate-session",
            <%_ if (databaseType === 'sql' || databaseType === 'mongodb' || databaseType === 'neo4j') { _%>
            user = user,
            <%_ } else if (databaseType === 'cassandra') { _%>
            userId = user.id,
            <%_ } else { _%>
            login = user.login,
            <%_ } _%>
            tokenValue = "invalidate-data",
            <%_ if (['sql', 'mongodb', 'couchbase', 'neo4j'].includes(databaseType)) { _%>
            tokenDate = LocalDate.of(2017, 3, 23),
            <%_ } else if (databaseType === 'cassandra') { _%>
            tokenDate = Instant.now(),
            <%_ } _%>
            ipAddress = "127.0.0.1",
            userAgent = "Test agent"
        )

        persistentTokenRepository.save<% if (databaseType === 'sql' && !reactive) { %>AndFlush<% } %>(token)

        assertThat(persistentTokenRepository.findByUser(user)).hasSize(1)

        restAccountMockMvc.perform(delete("/api/account/sessions/invalidate-session")<%_ if (testsNeedCsrf) { _%>.with(csrf())<%_ } _%>)
            .andExpect(status().isOk)

        assertThat(persistentTokenRepository.findByUser(user)).isEmpty()
    }
    <%_ } _%>

    @Test<% if (databaseType === 'sql' && !reactive) { %>
    @Transactional<% } %>
    <%_ if (!reactive) { _%>
    @Throws(Exception::class)
    <%_ } _%>
    fun testRequestPasswordReset() {
        val user = <%= asEntity('User') %>(
            <%_ if (databaseType === 'cassandra') { _%>
            id = UUID.randomUUID().toString(),
            <%_ } _%>
            password = RandomStringUtils.random(60),
            activated = true,
            login = "password-reset",
            <%_ if (databaseType === 'sql' && reactive) { _%>
            createdBy = SYSTEM_ACCOUNT,
            <%_ } _%>
            email = "password-reset@example.com"
        )

        userRepository.save<% if (databaseType === 'sql' && !reactive) { %>AndFlush<% } %>(user)<% if (reactive) { %>.block()<% } %>

        <%_ if (!reactive) { _%>
        restAccountMockMvc.perform(
            post("/api/account/reset-password/init")
                .content("password-reset@example.com")
                <%_ if (testsNeedCsrf) { _%>
                .with(csrf())<%_ } _%>
        )
            .andExpect(status().isOk)
        <%_ } else { _%>
        accountWebTestClient.post().uri("/api/account/reset-password/init")
            .bodyValue("password-reset@example.com")
            .exchange()
            .expectStatus().isOk
        <%_ } _%>
    }

    @Test<% if (databaseType === 'sql' && !reactive) { %>
    @Transactional<% } %>
    <%_ if (!reactive) { _%>
    @Throws(Exception::class)
    <%_ } _%>
    fun testRequestPasswordResetUpperCaseEmail() {
        val user = <%= asEntity('User') %>(
            <%_ if (databaseType === 'cassandra') { _%>
            id = UUID.randomUUID().toString(),
            <%_ } _%>
            password = RandomStringUtils.random(60),
            activated = true,
            login = "password-reset-upper-case",
            <%_ if (databaseType === 'sql' && reactive) { _%>
            createdBy = SYSTEM_ACCOUNT,
            <%_ } _%>
            email = "password-reset-upper-case@example.com"
        )

        userRepository.save<% if (databaseType === 'sql' && !reactive) { %>AndFlush<% } %>(user)<% if (reactive) { %>.block()<% } %>

        <%_ if (!reactive) { _%>
        restAccountMockMvc.perform(
            post("/api/account/reset-password/init")
                .content("password-reset@EXAMPLE.COM")
                <%_ if (testsNeedCsrf) { _%>
                .with(csrf())<%_ } _%>
        )
            .andExpect(status().isOk)
        <%_ } else { _%>
        accountWebTestClient.post().uri("/api/account/reset-password/init")
            .bodyValue("password-reset-upper-case@EXAMPLE.COM")
            .exchange()
            .expectStatus().isOk
        <%_ } _%>
    }

    @Test
    <%_ if (!reactive) { _%>
    @Throws(Exception::class)
    fun testRequestPasswordResetWrongEmail() {
        restAccountMockMvc.perform(
            post("/api/account/reset-password/init")
                .content("password-reset-wrong-email@example.com")<% if (testsNeedCsrf) { %>
                    .with(csrf())<% } %>
        )
            .andExpect(status().isOk)
    <%_ } else { _%>
    fun testRequestPasswordResetWrongEmail() {
        accountWebTestClient.post().uri("/api/account/reset-password/init")
            .bodyValue("password-reset-wrong-email@example.com")
            .exchange()
            .expectStatus().isOk
    <%_ } _%>
    }

    @Test<% if (databaseType === 'sql' && !reactive) { %>
    @Transactional<% } %>
    @Throws(Exception::class)
    fun testFinishPasswordReset() {
        val user = <%= asEntity('User') %>(
            <%_ if (databaseType === 'cassandra') { _%>
            id = UUID.randomUUID().toString(),
            <%_ } _%>
            password = RandomStringUtils.random(60),
            login = "finish-password-reset",
            email = "finish-password-reset@example.com",
            resetDate = Instant.now().plusSeconds(60),
            <%_ if (databaseType === 'sql' && reactive) { _%>
            createdBy = SYSTEM_ACCOUNT,
            <%_ } _%>
            resetKey = "reset key"
        )

        userRepository.save<% if (databaseType === 'sql' && !reactive) { %>AndFlush<% } %>(user)<% if (reactive) { %>.block()<% } %>

        val keyAndPassword = KeyAndPasswordVM(key = user.resetKey, newPassword = "new password")

        <%_ if (!reactive) { _%>
        restAccountMockMvc.perform(
            post("/api/account/reset-password/finish")
                .contentType(MediaType.APPLICATION_JSON)
                .content(convertObjectToJsonBytes(keyAndPassword))<% if (testsNeedCsrf) { %>
                .with(csrf())<% } %>
        )
            .andExpect(status().isOk)
        <%_ } else { _%>
        accountWebTestClient.post().uri("/api/account/reset-password/finish")
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(convertObjectToJsonBytes(keyAndPassword))
            .exchange()
            .expectStatus().isOk
        <%_ } _%>

        val updatedUser = userRepository.findOneByLogin(user.login!!)<%_ if (!reactive) { _%>.orElse(null)<% } else { %>.block()
        assertNotNull(updatedUser)<% } %>
        assertThat(passwordEncoder.matches(keyAndPassword.newPassword, updatedUser.password)).isTrue()
    }

    @Test<% if (databaseType === 'sql' && !reactive) { %>
    @Transactional<% } %>
    @Throws(Exception::class)
    fun testFinishPasswordResetTooSmall() {
        val user = <%= asEntity('User') %>(
            <%_ if (databaseType === 'cassandra') { _%>
            id = UUID.randomUUID().toString(),
            <%_ } _%>
            password = RandomStringUtils.random(60),
            login = "finish-password-reset-too-small",
            email = "finish-password-reset-too-small@example.com",
            resetDate = Instant.now().plusSeconds(60),
            <%_ if (databaseType === 'sql' && reactive) { _%>
            createdBy = SYSTEM_ACCOUNT,
            <%_ } _%>
            resetKey = "reset key too small"
        )

        userRepository.save<% if (databaseType === 'sql' && !reactive) { %>AndFlush<% } %>(user)<% if (reactive) { %>.block()<% } %>

        val keyAndPassword = KeyAndPasswordVM(key = user.resetKey, newPassword = "foo")

        <%_ if (!reactive) { _%>
        restAccountMockMvc.perform(
            post("/api/account/reset-password/finish")
                .contentType(MediaType.APPLICATION_JSON)
                .content(convertObjectToJsonBytes(keyAndPassword))<% if (testsNeedCsrf) { %>
                .with(csrf())<% } %>
        )
            .andExpect(status().isBadRequest)
        <%_ } else { _%>
        accountWebTestClient.post().uri("/api/account/reset-password/finish")
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(convertObjectToJsonBytes(keyAndPassword))
            .exchange()
            .expectStatus().isBadRequest
        <%_ } _%>

        val updatedUser = userRepository.findOneByLogin(user.login!!)<%_ if (!reactive) { _%>.orElse(null)<% } else { %>.block()
        assertNotNull(updatedUser)<% } %>
        assertThat(passwordEncoder.matches(keyAndPassword.newPassword, updatedUser.password)).isFalse()
    }

    @Test<% if (databaseType === 'sql' && !reactive) { %>
    @Transactional<% } %>
    @Throws(Exception::class)
    fun testFinishPasswordResetWrongKey() {
        val keyAndPassword = KeyAndPasswordVM(key = "wrong reset key", newPassword = "new password")

        <%_ if (!reactive) { _%>
        restAccountMockMvc.perform(
            post("/api/account/reset-password/finish")
                .contentType(MediaType.APPLICATION_JSON)
                .content(convertObjectToJsonBytes(keyAndPassword))<% if (testsNeedCsrf) { %>
                .with(csrf())<% } %>
        )
            .andExpect(status().isInternalServerError)
        <%_ } else { _%>
        accountWebTestClient.post().uri("/api/account/reset-password/finish")
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(convertObjectToJsonBytes(keyAndPassword))
            .exchange()
            .expectStatus().isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR)
        <%_ } _%>
    }
}
