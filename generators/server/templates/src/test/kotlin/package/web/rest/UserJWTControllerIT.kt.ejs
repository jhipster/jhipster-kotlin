<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.web.rest

<%_ if (databaseType === 'cassandra') { _%>
import <%= packageName %>.AbstractCassandraTest
<%_ } _%>
import <%= packageName %>.IntegrationTest
<%_ if (databaseType === 'sql' && reactive) { _%>
import <%= packageName %>.config.SYSTEM_ACCOUNT
<%_ } _%>
<%_ if (!skipUserManagement) { _%>
    <%_ if (databaseType === 'sql' && reactive) { _%>
import <%= packageName %>.config.Constants
    <%_ } _%>
import <%= packageName %>.domain.<%= asEntity('User') %>
import <%= packageName %>.repository.UserRepository
<%_ } _%>
import <%= packageName %>.web.rest.vm.LoginVM
import org.junit.jupiter.api.Test
import org.springframework.beans.factory.annotation.Autowired
<%_ if (!reactive) { _%>
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc
<%_ } else { _%>
import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient
<%_ } _%>
import org.springframework.http.MediaType
<%_ if (!skipUserManagement) { _%>
import org.springframework.security.crypto.password.PasswordEncoder
<%_ } _%>
<%_ if (reactive) { _%>
import org.springframework.test.web.reactive.server.WebTestClient
<%_ } _%>
<%_ if (!reactive) { _%>
import org.springframework.test.web.servlet.MockMvc
    <%_ if (databaseType === 'sql') { _%>
import org.springframework.transaction.annotation.Transactional
    <%_ } _%>
<%_ } _%>
<%_ if (databaseType === 'cassandra') { _%>

import java.util.UUID
<%_ } _%>
<%_ if (!reactive) { _%>

import org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.status
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.header
import org.hamcrest.Matchers.*
<%_ } _%>

/**
 * Integration tests for the [UserJWTController] REST controller.
 */
 <%_ if (!reactive) { _%>
@AutoConfigureMockMvc
<%_ } else { _%>
@AutoConfigureWebTestClient
<%_ } _%>
@IntegrationTest
class UserJWTControllerIT <% if (databaseType === 'cassandra') { %>: AbstractCassandraTest() <% } %>{

<%_ if (!skipUserManagement) { _%>
    @Autowired
    private lateinit var userRepository: UserRepository

    @Autowired
    private lateinit var passwordEncoder: PasswordEncoder
<%_ }  _%>

    @Autowired
    <%_ if (reactive) { _%>
    private lateinit var webTestClient: WebTestClient
    <%_ } else { _%>
    private lateinit var mockMvc: MockMvc
    <%_ }  _%>

    @Test
<%_ if (!skipUserManagement) { _%>
    <%_ if (databaseType === 'sql' && !reactive) { _%>
    @Transactional
    <%_ } _%>
    @Throws(Exception::class)
    fun testAuthorize() {
        val user = <%= asEntity('User') %>(
            <%_ if (databaseType === 'cassandra') { _%>
            id = UUID.randomUUID().toString(),
            <%_ } _%>
            login = "user-jwt-controller",
            email = "user-jwt-controller@example.com",
            activated = true,
            <%_ if (databaseType === 'sql' && reactive) { _%>
            createdBy = SYSTEM_ACCOUNT,
            <%_ } _%>
            password = passwordEncoder.encode("test")
        )

        userRepository.save<% if (databaseType === 'sql' && !reactive) { %>AndFlush<% } %>(user)<% if (reactive) { %>.block()<% } %>

        val login = LoginVM(username = "user-jwt-controller", password = "test")
<%_ } else { _%>
    @Throws(Exception::class)
    fun testAuthorize() {
        val login = LoginVM(username ="test", password = "test")
<%_ } _%>
        <%_ if (!reactive) { _%>
        mockMvc.perform(
            post("/api/authenticate")
                .contentType(MediaType.APPLICATION_JSON)
                .content(convertObjectToJsonBytes(login))
        )
            .andExpect(status().isOk)
            .andExpect(jsonPath("\$.id_token").isString)
            .andExpect(jsonPath("\$.id_token").isNotEmpty)
            .andExpect(header().string("Authorization", not(nullValue())))
            .andExpect(header().string("Authorization", not(`is`(emptyString()))))
        <%_ } else { _%>
        webTestClient.post().uri("/api/authenticate")
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(convertObjectToJsonBytes(login))
            .exchange()
            .expectStatus().isOk
            .expectHeader().valueMatches("Authorization", "Bearer .+")
            .expectBody()
            .jsonPath("\$.id_token").isNotEmpty
        <%_ } _%>
    }

    @Test
    <%_ if (!skipUserManagement) { _%>
    <%_ if (databaseType === 'sql' && !reactive) { _%>  
    @Transactional
    <%_ } _%>
    @Throws(Exception::class)
    fun testAuthorizeWithRememberMe() {
        val user = <%= asEntity('User') %>(
            <%_ if (databaseType === 'cassandra') { _%>
            id = UUID.randomUUID().toString(),
            <%_ } _%>
            login = "user-jwt-controller-remember-me",
            email = "user-jwt-controller-remember-me@example.com",
            activated = true,
            <%_ if (databaseType === 'sql' && reactive) { _%>
            createdBy = SYSTEM_ACCOUNT,
            <%_ } _%>   
            password = passwordEncoder.encode("test")
        )

        userRepository.save<% if (databaseType === 'sql' && !reactive) { %>AndFlush<% } %>(user)<% if (reactive) { %>.block()<% } %>

        val login = LoginVM(
            username = "user-jwt-controller-remember-me",
            password = "test",
            isRememberMe = true
        )
<%_ } else { _%>
    @Throws(Exception::class)
    fun testAuthorizeWithRememberMe() {
        val login = LoginVM(
            username ="test",
            password = "test",
            isRememberMe = true
        )
<%_ } _%>
        <%_ if (!reactive) { _%>
        mockMvc.perform(
            post("/api/authenticate")
                .contentType(MediaType.APPLICATION_JSON)
                .content(convertObjectToJsonBytes(login))
        )
            .andExpect(status().isOk)
            .andExpect(jsonPath("\$.id_token").isString)
            .andExpect(jsonPath("\$.id_token").isNotEmpty)
            .andExpect(header().string("Authorization", not(nullValue())))
            .andExpect(header().string("Authorization", not(`is`(emptyString()))))
        <%_ } else { _%>
        webTestClient.post().uri("/api/authenticate")
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(convertObjectToJsonBytes(login))
            .exchange()
            .expectStatus().isOk
            .expectHeader().valueMatches("Authorization", "Bearer .+")
            .expectBody()
            .jsonPath("\$.id_token").isNotEmpty
        <%_ } _%>
    }

    @Test
    @Throws(Exception::class)
    fun testAuthorizeFails() {
        val login = LoginVM(username = "wrong-user", password = "wrong password")
        <%_ if (!reactive) { _%>
        mockMvc.perform(
            post("/api/authenticate")
                .contentType(MediaType.APPLICATION_JSON)
                .content(convertObjectToJsonBytes(login))
        )
            .andExpect(status().isUnauthorized)
            .andExpect(jsonPath("\$.id_token").doesNotExist())
            .andExpect(header().doesNotExist("Authorization"))
        <%_ } else { _%>
        webTestClient.post().uri("/api/authenticate")
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(convertObjectToJsonBytes(login))
            .exchange()
            .expectStatus().isUnauthorized
            .expectHeader().doesNotExist("Authorization")
            .expectBody()
            .jsonPath("\$.id_token").doesNotExist()
        <%_ } _%>
    }
}
