<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.web.rest

<%_ if (databaseType === 'cassandra') { _%>
import <%=packageName%>.AbstractCassandraTest
<%_ } _%>
import <%=packageName%>.<%= mainClass %>
import <%=packageName%>.domain.<%= asEntity('User') %>
import <%=packageName%>.repository<% if (reactive) { %>.reactive<% } %>.UserRepository
import <%=packageName%>.security.jwt.TokenProvider
import <%=packageName%>.web.rest.errors.ExceptionTranslator
import <%=packageName%>.web.rest.vm.LoginVM
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.security.authentication.<% if (reactive) { %>Reactive<% } %>AuthenticationManager
import org.springframework.security.crypto.password.PasswordEncoder
import org.springframework.test.context.junit4.SpringRunner
<%_ if (reactive) { _%>
import org.springframework.test.web.reactive.server.WebTestClient
<%_ } _%>
<%_ if (!reactive) { _%>
import org.springframework.test.web.servlet.MockMvc
import org.springframework.test.web.servlet.setup.MockMvcBuilders
    <%_ if (databaseType === 'sql') { _%>
import org.springframework.transaction.annotation.Transactional
    <%_ } _%>
<%_ } _%>
<%_ if (databaseType === 'cassandra') { _%>

import java.util.UUID
<%_ } _%>
<%_ if (!reactive) { _%>

import org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.status
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.header
import org.hamcrest.Matchers.nullValue
import org.hamcrest.Matchers.isEmptyString
import org.hamcrest.Matchers.not
<%_ } _%>

/**
 * Integration tests for the [UserJWTController] REST controller.
 */
@RunWith(SpringRunner::class)
@SpringBootTest(classes = [<%= mainClass %>::class])
class UserJWTControllerIT <% if (databaseType === 'cassandra') { %>: AbstractCassandraTest() <% } %>{

    @Autowired
    private lateinit var tokenProvider: TokenProvider

    @Autowired
    private lateinit var authenticationManager: <% if (reactive) { %>Reactive<% } %>AuthenticationManager

    @Autowired
    private lateinit var userRepository: UserRepository

    @Autowired
    private lateinit var passwordEncoder: PasswordEncoder

    @Autowired
    private lateinit var exceptionTranslator: ExceptionTranslator

    <%_ if (reactive) { _%>
    private lateinit var webTestClient: WebTestClient
    <%_ } else { _%>
    private lateinit var mockMvc: MockMvc
    <%_ }  _%>

    @Before
    fun setup() {
        val userJWTController = UserJWTController(tokenProvider, authenticationManager)
        <%_ if (!reactive) { _%>
        this.mockMvc = MockMvcBuilders.standaloneSetup(userJWTController)
            .setControllerAdvice(exceptionTranslator)
        <%_ } else { _%>
        this.webTestClient = WebTestClient.bindToController(userJWTController)
            .controllerAdvice(exceptionTranslator)
        <%_ }  _%>
            .build()
    }

    @Test
    <%_ if (databaseType === 'sql') { _%>
    @Transactional
    <%_ } _%>
    @Throws(Exception::class)
    fun testAuthorize() {
        val user = <%= asEntity('User') %>()
        <%_ if (databaseType === 'cassandra') { _%>
        user.id = UUID.randomUUID().toString())
        <%_ } _%>
        user.login = "user-jwt-controller"
        user.email = "user-jwt-controller@example.com"
        user.activated = true
        user.password = passwordEncoder.encode("test")

        <%_ if (databaseType === 'sql') { _%>
        userRepository.saveAndFlush(user)
        <%_ } else if (databaseType === 'mongodb' || databaseType === 'couchbase' || databaseType === 'cassandra') { _%>
        userRepository.save(user)<% if (reactive) { %>.block()<% } %>
        <%_ } _%>

        val login = LoginVM()
        login.username = "user-jwt-controller"
        login.password = "test"
        <%_ if (!reactive) { _%>
        mockMvc.perform(post("/api/authenticate")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(login)))
            .andExpect(status().isOk)
            .andExpect(jsonPath("\$.id_token").isString)
            .andExpect(jsonPath("\$.id_token").isNotEmpty)
            .andExpect(header().string("Authorization", not(nullValue())))
            .andExpect(header().string("Authorization", not(isEmptyString())))
        <%_ } else { _%>
        webTestClient.post().uri("/api/authenticate")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .syncBody(TestUtil.convertObjectToJsonBytes(login))
            .exchange()
            .expectStatus().isOk
            .expectHeader().valueMatches("Authorization", "Bearer .+")
            .expectBody()
            .jsonPath("\$.id_token").isNotEmpty
        <%_ } _%>
    }

    @Test
    <%_ if (databaseType === 'sql') { _%>
    @Transactional
    <%_ } _%>
    @Throws(Exception::class)
    fun testAuthorizeWithRememberMe() {
        val user = <%= asEntity('User') %>()
        <%_ if (databaseType === 'cassandra') { _%>
        user.id = UUID.randomUUID().toString()
        <%_ } _%>
        user.login = "user-jwt-controller-remember-me"
        user.email = "user-jwt-controller-remember-me@example.com"
        user.activated = true
        user.password = passwordEncoder.encode("test")

        <%_ if (databaseType === 'sql') { _%>
        userRepository.saveAndFlush(user)
        <%_ } else if (databaseType === 'mongodb' || databaseType === 'couchbase' || databaseType === 'cassandra') { _%>
        userRepository.save(user)<% if (reactive) { %>.block()<% } %>
        <%_ } _%>

        val login = LoginVM()
        login.username = "user-jwt-controller-remember-me"
        login.password = "test"
        login.isRememberMe = true
        <%_ if (!reactive) { _%>
        mockMvc.perform(post("/api/authenticate")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(login)))
            .andExpect(status().isOk)
            .andExpect(jsonPath("\$.id_token").isString)
            .andExpect(jsonPath("\$.id_token").isNotEmpty)
            .andExpect(header().string("Authorization", not(nullValue())))
            .andExpect(header().string("Authorization", not(isEmptyString())))
        <%_ } else { _%>
        webTestClient.post().uri("/api/authenticate")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .syncBody(TestUtil.convertObjectToJsonBytes(login))
            .exchange()
            .expectStatus().isOk
            .expectHeader().valueMatches("Authorization", "Bearer .+")
            .expectBody()
            .jsonPath("\$.id_token").isNotEmpty
        <%_ } _%>
    }

    @Test
    <%_ if (databaseType === 'sql') { _%>
    @Transactional
    <%_ } _%>
    @Throws(Exception::class)
    fun testAuthorizeFails() {
        val login = LoginVM()
        login.username = "wrong-user"
        login.password = "wrong password"
        <%_ if (!reactive) { _%>
        mockMvc.perform(post("/api/authenticate")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(login)))
            .andExpect(status().isUnauthorized)
            .andExpect(jsonPath("\$.id_token").doesNotExist())
            .andExpect(header().doesNotExist("Authorization"))
        <%_ } else { _%>
        webTestClient.post().uri("/api/authenticate")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .syncBody(TestUtil.convertObjectToJsonBytes(login))
            .exchange()
            .expectStatus().isUnauthorized
            .expectHeader().doesNotExist("Authorization")
            .expectBody()
            .jsonPath("\$.id_token").doesNotExist()
        <%_ } _%>
    }
}
