<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.web.rest

<%_ if (databaseType === 'cassandra') { _%>
import <%= packageName %>.AbstractCassandraTest
<%_ } _%>
import <%= packageName %>.<%= mainClass %>
<%_ if (authenticationType === 'oauth2') { _%>
import <%=packageName%>.config.TestSecurityConfiguration
<%_ } _%>
<%_ if (authenticationType === 'uaa') { _%>
import <%= packageName %>.config.SecurityBeanOverrideConfiguration
<%_ } _%>
import <%= packageName %>.web.rest.vm.LoggerVM
import ch.qos.logback.classic.AsyncAppender
import ch.qos.logback.classic.LoggerContext
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith
import org.slf4j.LoggerFactory
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.http.MediaType
import org.springframework.test.context.junit4.SpringRunner
<%_ if (reactive) { _%>
import org.springframework.test.web.reactive.server.WebTestClient
<%_ } else { _%>
import org.springframework.test.web.servlet.MockMvc
import org.springframework.test.web.servlet.setup.MockMvcBuilders
<%_ } _%>

import  org.assertj.core.api.Assertions.assertThat
<%_ if (!reactive) { _%>
import  org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get
import  org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put
import  org.springframework.test.web.servlet.result.MockMvcResultMatchers.content
import  org.springframework.test.web.servlet.result.MockMvcResultMatchers.status
<%_ } _%>

/**
 * Integration tests for the [LogsResource] REST controller.
 */
@RunWith(SpringRunner::class)
<%_ if (authenticationType === 'uaa' && applicationType !== 'uaa') { _%>
@SpringBootTest(classes = [SecurityBeanOverrideConfiguration::class, <%= mainClass %>::class])
<%_ } else if (authenticationType === 'oauth2') { _%>
@SpringBootTest(classes = [<%= mainClass %>::class, TestSecurityConfiguration::class])
<%_ } else { _%>
@SpringBootTest(classes = [<%= mainClass %>::class])
<%_ } _%>
class LogsResourceIT <% if (databaseType === 'cassandra') { %>: AbstractCassandraTest() <% } %>{

    <%_ if (reactive) { _%>
    private lateinit var webTestClient: WebTestClient
    <%_ } else { _%>
    private lateinit var restLogsMockMvc: MockMvc
    <%_ } _%>

    @Before
    fun setup() {
        val logsResource = LogsResource()
        <%_ if (reactive) { _%>
        this.webTestClient = WebTestClient
            .bindToController(logsResource)
        <%_ } else { _%>
        this.restLogsMockMvc = MockMvcBuilders
            .standaloneSetup(logsResource)
        <%_ } _%>
            .build()
    }

    @Test
    @Throws(Exception::class)
    fun getAllLogs() {
        <%_ if (reactive) { _%>
        webTestClient.get().uri("/management/logs")
            .exchange()
            .expectStatus().isOk
            .expectHeader().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE)
        <%_ } else { _%>
        restLogsMockMvc.perform(get("/management/logs"))
            .andExpect(status().isOk)
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
        <%_ } _%>
    }

    @Test
    @Throws(Exception::class)
    fun changeLogs() {
        val logger = LoggerVM()
        logger.level = "INFO"
        logger.name = "ROOT"

        <%_ if (reactive) { _%>
        webTestClient.put().uri("/management/logs")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .syncBody(TestUtil.convertObjectToJsonBytes(logger))
            .exchange()
            .expectStatus().isNoContent
        <%_ } else { _%>
        restLogsMockMvc.perform(put("/management/logs")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(logger)))
            .andExpect(status().isNoContent)
        <%_ } _%>
    }

    @Test
    fun testLogstashAppender() {
        val context = LoggerFactory.getILoggerFactory() as LoggerContext
        assertThat(context.getLogger("ROOT").getAppender("ASYNC_LOGSTASH")).isInstanceOf(AsyncAppender::class.java)
    }
}
