<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://jhipster.github.io/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.config

import com.couchbase.client.java.Cluster
import com.couchbase.client.java.bucket.BucketType
import com.couchbase.client.java.cluster.DefaultBucketSettings
import com.couchbase.client.java.env.CouchbaseEnvironment
import org.assertj.core.util.Lists
import org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.data.couchbase.config.AbstractCouchbaseConfiguration
import org.springframework.data.couchbase.config.BeanNames
import org.springframework.data.couchbase.config.CouchbaseConfigurer
import org.testcontainers.couchbase.CouchbaseContainer

@Configuration
class DatabaseConfigurationIT(private val couchbaseProperties: CouchbaseProperties) : AbstractCouchbaseConfiguration() {

    @Bean(destroyMethod = "", name = [BeanNames.COUCHBASE_ENV])
    override fun couchbaseEnvironment(): CouchbaseEnvironment {
        return couchbaseContainer.couchbaseEnvironment
    }

    @Throws(Exception::class)
    override fun couchbaseCluster(): Cluster {
        return couchbaseContainer.couchbaseCluster
    }

    override fun getBootstrapHosts(): List<String> {
        return Lists.newArrayList(couchbaseContainer.containerIpAddress)
    }

    override fun getBucketName(): String {
        return couchbaseProperties.bucket.name
    }

    override fun getBucketPassword(): String {
        return couchbaseProperties.bucket.password
    }

    override fun couchbaseConfigurer(): CouchbaseConfigurer {
        return this
    }

    private var couchbaseContainer= getCouchbaseContainer()

    private fun getCouchbaseContainer(): KCouchbaseContainer {
        val container = KCouchbaseContainer()
        container
            .withNewBucket(DefaultBucketSettings.builder()
                .name(bucketName)
                .password(bucketPassword)
                .type(BucketType.COUCHBASE)
                .quota(100)
                .build())
        container.start()
        return container
    }

    private class KCouchbaseContainer : CouchbaseContainer<KCouchbaseContainer>("couchbase/server:5.5.1")
}
