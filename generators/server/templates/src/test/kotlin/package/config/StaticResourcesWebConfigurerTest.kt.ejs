<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License")
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.config

import <%= packageName %>.config.StaticResourcesWebConfiguration.Companion.RESOURCE_LOCATIONS
import <%= packageName %>.config.StaticResourcesWebConfiguration.Companion.RESOURCE_PATHS
import com.nhaarman.mockitokotlin2.anyOrNull
import tech.jhipster.config.JHipsterDefaults
import tech.jhipster.config.JHipsterProperties
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.springframework.http.CacheControl
import org.springframework.mock.web.MockServletContext
import org.springframework.web.context.WebApplicationContext
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry

import java.util.concurrent.TimeUnit

import org.assertj.core.api.Assertions.assertThat
import org.mockito.Mockito.*

class StaticResourcesWebConfigurerTest {
    private lateinit var staticResourcesWebConfiguration: StaticResourcesWebConfiguration
    private lateinit var resourceHandlerRegistry: ResourceHandlerRegistry
    private lateinit var servletContext: MockServletContext
    private lateinit var applicationContext: WebApplicationContext
    private lateinit var props: JHipsterProperties

    @BeforeEach
    fun setUp() {
        servletContext = spy(MockServletContext())
        applicationContext = mock(WebApplicationContext::class.java)
        resourceHandlerRegistry = spy(ResourceHandlerRegistry(applicationContext, servletContext))
        props = JHipsterProperties()
        staticResourcesWebConfiguration = spy(StaticResourcesWebConfiguration(props))
    }

    @Test
    fun shouldAppendResourceHandlerAndInitiliazeIt() {

        staticResourcesWebConfiguration.addResourceHandlers(resourceHandlerRegistry)

        verify(resourceHandlerRegistry, times(1))
            .addResourceHandler(*RESOURCE_PATHS)
        verify(staticResourcesWebConfiguration, times(1))
            .initializeResourceHandler(anyOrNull())
        RESOURCE_PATHS.forEach {
            assertThat(resourceHandlerRegistry.hasMappingForPattern(it)).isTrue()
        }
    }

    @Test
    fun shouldInitializeResourceHandlerWithCacheControlAndLocations() {
        val ccExpected = CacheControl.maxAge(5, TimeUnit.DAYS).cachePublic()
        `when`(staticResourcesWebConfiguration.getCacheControl()).thenReturn(ccExpected)
        val resourceHandlerRegistration = spy(ResourceHandlerRegistration(*RESOURCE_PATHS))

        staticResourcesWebConfiguration.initializeResourceHandler(resourceHandlerRegistration)

        verify(staticResourcesWebConfiguration, times(1)).getCacheControl()
        verify(resourceHandlerRegistration, times(1)).setCacheControl(ccExpected)
        verify(resourceHandlerRegistration, times(1)).addResourceLocations(*RESOURCE_LOCATIONS)
    }


    @Test
    fun shoudCreateCacheControlBasedOnJhipsterDefaultProperties() {
        val cacheExpected = CacheControl.maxAge(JHipsterDefaults.Http.Cache.timeToLiveInDays.toLong(), TimeUnit.DAYS).cachePublic()
        assertThat(staticResourcesWebConfiguration.getCacheControl())
            .extracting(CacheControl::getHeaderValue)
            .isEqualTo(cacheExpected.headerValue)
    }

    @Test
    fun shoudCreateCacheControlWithSpecificConfigurationInProperties() {
        props.http.cache.timeToLiveInDays = MAX_AGE_TEST
        val cacheExpected = CacheControl.maxAge(MAX_AGE_TEST.toLong(), TimeUnit.DAYS).cachePublic()
        assertThat(staticResourcesWebConfiguration.getCacheControl())
            .extracting(CacheControl::getHeaderValue)
            .isEqualTo(cacheExpected.headerValue)
    }

    companion object {
        const val MAX_AGE_TEST = 5
    }
}
