<%#
 Copyright 2013-2022 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.config

import org.slf4j.Logger
import org.slf4j.LoggerFactory
import org.springframework.beans.factory.DisposableBean
import org.springframework.beans.factory.InitializingBean
import org.testcontainers.containers.output.Slf4jLogConsumer
import org.testcontainers.elasticsearch.ElasticsearchContainer
import org.testcontainers.utility.DockerImageName

import java.time.Duration
import java.time.temporal.ChronoUnit

/**
 * Base class for starting/stopping ElasticSearch during tests.
 */
class ElasticsearchTestContainer: InitializingBean, DisposableBean {

    private val log = LoggerFactory.getLogger(javaClass)
    private val CONTAINER_STARTUP_TIMEOUT_MINUTES = 10.toLong()
    private var elasticsearchContainer: ElasticsearchContainer? = null

    override fun destroy() {
        if (null != elasticsearchContainer && elasticsearchContainer?.isRunning == true) {
            elasticsearchContainer?.close()
        }
    }

    override fun afterPropertiesSet() {
        if (null == elasticsearchContainer) {
            elasticsearchContainer =
                ElasticsearchContainer(DockerImageName.parse("<%= DOCKER_ELASTICSEARCH_CONTAINER %>").withTag("<%= ELASTICSEARCH_VERSION %>%>"))
                .withStartupTimeout(Duration.of(CONTAINER_STARTUP_TIMEOUT_MINUTES, ChronoUnit.MINUTES))
                .withSharedMemorySize(256000000L)
                .withEnv("ES_JAVA_OPTS", "-Xms256m -Xmx256m")
                .withEnv("xpack.security.enabled", "false")
                .withLogConsumer(Slf4jLogConsumer(log))
                .withReuse(true)
        }
        if (elasticsearchContainer?.isRunning != true) {
            elasticsearchContainer?.start()
        }
    }

    fun getElasticsearchContainer() = elasticsearchContainer
}
