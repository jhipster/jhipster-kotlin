<%#
 Copyright 2013-2022 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.config

import com.datastax.driver.core.Cluster
import com.datastax.driver.core.Session
import com.datastax.oss.driver.api.core.CqlSession
import com.datastax.oss.driver.api.core.CqlSessionBuilder
import com.datastax.oss.driver.api.core.config.DefaultDriverOption
import com.datastax.oss.driver.api.core.config.DriverConfigLoader
import org.cassandraunit.CQLDataLoader
import org.cassandraunit.dataset.cql.ClassPathCQLDataSet
import org.slf4j.Logger
import org.slf4j.LoggerFactory
import org.springframework.beans.factory.DisposableBean
import org.springframework.beans.factory.InitializingBean
import org.testcontainers.containers.CassandraContainer
import org.testcontainers.containers.output.Slf4jLogConsumer
import org.testcontainers.utility.DockerImageName
import java.io.IOException
import java.net.InetSocketAddress
import java.net.URISyntaxException
import java.nio.file.Files.newDirectoryStream
import java.nio.file.Path
import java.nio.file.Paths.get
import java.time.Duration
import java.time.temporal.ChronoUnit
import java.util.Spliterator.SORTED
import java.util.Spliterators.spliteratorUnknownSize
import java.util.stream.StreamSupport.stream

/**
 * Base class for starting/stopping Cassandra during tests.
 */
class CassandraTestContainer : InitializingBean, DisposableBean {

    companion object {
        private val log: Logger = LoggerFactory.getLogger(CassandraTestContainer::class.java)
        private val DATABASE_REQUEST_TIMEOUT = 20.toLong()
        private val CONTAINER_STARTUP_TIMEOUT_MINUTES = 10.toLong()

        @JvmStatic
        private var cassandraContainer: CassandraContainer<*> = CassandraContainer(DockerImageName.parse("<%= DOCKER_CASSANDRA %>"))
            .withStartupTimeout(Duration.of(CONTAINER_STARTUP_TIMEOUT_MINUTES, ChronoUnit.MINUTES))
            .withLogConsumer(Slf4jLogConsumer(log))
            .withReuse(true) as CassandraContainer<*>
    }


    override fun destroy() {
        if (null != cassandraContainer && cassandraContainer.isRunning) {
            cassandraContainer.close()
        }
    }

    override fun afterPropertiesSet() {
        if (!cassandraContainer.isRunning) {
            cassandraContainer.start()
            val cluster: Cluster = cassandraContainer.cluster
            cluster.connect().use { session -> createTestKeyspace(session) }
            val cqlSession: CqlSession = CqlSessionBuilder()
                .addContactPoint(
                    InetSocketAddress(
                        cassandraContainer.host,
                        cassandraContainer.getMappedPort(CassandraContainer.CQL_PORT)
                    )
                ).withLocalDatacenter(cluster.metadata.allHosts.iterator().next().datacenter)
                .withKeyspace(CQLDataLoader.DEFAULT_KEYSPACE_NAME)
                .withConfigLoader(getConfigLoader())
                .build()
            val dataLoader = CQLDataLoader(cqlSession)
            applyScripts(dataLoader, "config/cql/changelog/", "*.cql")
            cqlSession.close()
        }
    }

    fun getCassandraContainer(): CassandraContainer<*> {
        return cassandraContainer
    }

    private fun getConfigLoader(): DriverConfigLoader {
        return DriverConfigLoader.programmaticBuilder()
            .withDuration(DefaultDriverOption.REQUEST_TIMEOUT, Duration.ofSeconds(DATABASE_REQUEST_TIMEOUT))
            .build()
    }

    private fun createTestKeyspace(session: Session) {
        val createQuery =
            "CREATE KEYSPACE " + CQLDataLoader.DEFAULT_KEYSPACE_NAME.toString() + " WITH replication={'class' : 'SimpleStrategy', 'replication_factor':1}"
        session.execute(createQuery)
    }

    private fun applyScripts(dataLoader: CQLDataLoader, cqlDir: String, pattern: String) {
        val dirUrl = ClassLoader.getSystemResource(cqlDir)
            ?: // protect for empty directory
            return

        var pathIterator: MutableIterator<Path>? = null
        try {
            pathIterator = newDirectoryStream(get(dirUrl.toURI()), pattern).iterator()
        } catch (e: IOException) {
            log.error("error trying to reading CQL chagelog", e)
        } catch (e: URISyntaxException) {
            log.error("error trying to get CQL chagelog uri", e)
        }
        val pathSpliterator = spliteratorUnknownSize(pathIterator, SORTED)
        stream(pathSpliterator, false)
            .map(Path::getFileName)
            .map(Path::toString)
            .sorted()
            .map { file -> cqlDir + file }
            .map { dataSetLocation ->
                ClassPathCQLDataSet(
                    dataSetLocation,
                    false,
                    false,
                    dataLoader.session.keyspace.get().toString()
                )
            }
            .forEach(dataLoader::load)
    }
}
