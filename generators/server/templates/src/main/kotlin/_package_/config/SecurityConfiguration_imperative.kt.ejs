<%#
 Copyright 2013-2023 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.config

import <%= packageName %>.security.*
import tech.jhipster.config.JHipsterProperties

<%_ if (authenticationTypeSession || devDatabaseTypeH2Any) { _%>
import org.springframework.security.web.util.matcher.AntPathRequestMatcher.antMatcher

<%_ } _%>
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
<%_ if (authenticationTypeOauth2) { _%>
import org.springframework.core.convert.converter.Converter
<%_ } _%>
<%_ if (devDatabaseTypeH2Any) { _%>
import org.springframework.core.env.Environment
import org.springframework.core.env.Profiles
import tech.jhipster.config.JHipsterConstants
<%_ } _%>
<%_ if (authenticationTypeJwt) { _%>
import org.springframework.http.HttpMethod
import org.springframework.security.config.Customizer
<%_ } _%>
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity
import org.springframework.security.config.annotation.web.builders.HttpSecurity
<%_ if (!skipClient) { _%>
import org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FrameOptionsConfig
<%_ } _%>
import org.springframework.security.web.SecurityFilterChain
<%_ if (!skipClient || authenticationUsesCsrf) { _%>
import org.springframework.security.web.authentication.www.BasicAuthenticationFilter
<%_ } _%>
<%_ if (authenticationUsesCsrf) { _%>
import tech.jhipster.web.filter.CookieCsrfFilter
<%_ } _%>
<%_ if (!skipClient) { _%>
import <%= packageName %>.web.filter.SpaWebFilter
<%_ } _%>
<%_ if (authenticationTypeJwt || (authenticationTypeOauth2 && applicationTypeMicroservice)) { _%>
import org.springframework.security.config.http.SessionCreationPolicy
<%_ } _%>
<%_ if (generateUserManagement) { _%>
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder
import org.springframework.security.crypto.password.PasswordEncoder
<%_ } _%>
<%_ if (authenticationTypeOauth2) { _%>
import <%= packageName %>.security.oauth2.AudienceValidator
import <%= packageName %>.security.SecurityUtils
import org.springframework.security.authentication.AbstractAuthenticationToken
import org.springframework.security.oauth2.core.DelegatingOAuth2TokenValidator
import org.springframework.security.oauth2.core.OAuth2TokenValidator
import org.springframework.security.oauth2.jwt.*
import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter
import org.springframework.beans.factory.annotation.Value
import org.springframework.security.core.GrantedAuthority
  <%_ if (!applicationTypeMicroservice) { _%>
import org.springframework.security.core.authority.mapping.GrantedAuthoritiesMapper
import org.springframework.security.oauth2.core.oidc.user.OidcUserAuthority
  <%_ } _%>
import java.util.*
<%_ } _%>
<%_ if (authenticationTypeSession) { _%>
import org.springframework.http.HttpStatus
import org.springframework.security.web.authentication.HttpStatusEntryPoint
import org.springframework.security.web.authentication.logout.HttpStatusReturningLogoutSuccessHandler
import org.springframework.security.web.util.matcher.OrRequestMatcher
  <%_ if (generateUserManagement) { _%>
import org.springframework.security.web.authentication.RememberMeServices
  <%_ } _%>
<%_ } _%>
<%_ if (authenticationUsesCsrf && !applicationTypeMicroservice) { _%>
import org.springframework.security.web.csrf.CookieCsrfTokenRepository
import org.springframework.security.web.csrf.CsrfTokenRequestAttributeHandler
<%_ } _%>
<%_ if (authenticationTypeOauth2) { _%>
import <%= packageName %>.security.oauth2.JwtGrantedAuthorityConverter
<%_ } _%>
<%_ if (authenticationTypeJwt) { _%>
import org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationEntryPoint
import org.springframework.security.oauth2.server.resource.web.access.BearerTokenAccessDeniedHandler
<%_ } _%>
<%_ if (authenticationTypeOauth2 && applicationTypeMonolith) { _%>
import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository
import org.springframework.boot.web.client.RestTemplateBuilder
import <%= packageName %>.security.oauth2.CustomClaimConverter
<%_ } _%>
<%_ if(!skipClient) { _%>
import org.springframework.security.web.header.writers.ReferrerPolicyHeaderWriter
<%_ } _%>
import org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher
import org.springframework.web.servlet.handler.HandlerMappingIntrospector

<%_ if (authenticationTypeOauth2 || !applicationTypeMicroservice) { _%>
import org.springframework.security.config.Customizer.withDefaults
<%_ } _%>

@Configuration
@EnableMethodSecurity(securedEnabled = true)
@Import(SecurityProblemSupport::class)
class SecurityConfiguration(
<%_ if (devDatabaseTypeH2Any) { _%>
    private val Environment env,
<%_ } _%>
<%_ if (authenticationTypeSession && generateUserManagement) { _%>
    private val rememberMeServices: RememberMeServices,
<%_ } _%>
    private val jHipsterProperties: JHipsterProperties,
) {
<%_ if (authenticationTypeOauth2) { _%>

    @Value("\${spring.security.oauth2.client.provider.oidc.issuer-uri}")
    private lateinit var issuerUri: String
<%_ } _%>

<%_ if (generateUserManagement) { _%>

    @Bean
    fun passwordEncoder() = BCryptPasswordEncoder()
<%_ } _%>

    @Bean
    @Throws(Exception::class)
    fun filterChain(http: HttpSecurity, mvc: MvcRequestMatcher.Builder): SecurityFilterChain {
        http
<%_ if (!applicationTypeMicroservice) { _%>
            .cors(withDefaults())
<%_ } _%>
            .csrf(csrf -> csrf
<%_ if (authenticationUsesCsrf && !applicationTypeMicroservice) { _%>
                .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())
                // See https://stackoverflow.com/q/74447118/65681
                .csrfTokenRequestHandler(CsrfTokenRequestAttributeHandler()))
<%_ } else { _%>
                .disable())
<%_ } _%>
<%_ if (!skipClient) { _%>
            .addFilterAfter(SpaWebFilter(), BasicAuthenticationFilter::class.java)
<%_ } _%>
<%_ if (!applicationTypeMicroservice) { _%>
  <%_ if (authenticationUsesCsrf) { _%>
            .addFilterAfter(CookieCsrfFilter(), BasicAuthenticationFilter::class.java)
  <%_ } _%>
<%_ } _%>
<%_ if (!skipClient) { _%>
            .headers(headers -> headers
                .contentSecurityPolicy(csp -> csp.policyDirectives(jHipsterProperties.security.contentSecurityPolicy))
                .frameOptions(FrameOptionsConfig::sameOrigin)
                .referrerPolicy(referrer -> referrer.policy(ReferrerPolicyHeaderWriter.ReferrerPolicy.STRICT_ORIGIN_WHEN_CROSS_ORIGIN))
                .permissionsPolicy(permissions ->
                    permissions.policy("camera=(), fullscreen=(self), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), midi=(), payment=(), sync-xhr=()")))
<%_ } _%>
            .authorizeHttpRequests(authz ->
                // prettier-ignore
                authz
<%_ if (!skipClient) { _%>
                    .requestMatchers(mvc.pattern("/index.html"), mvc.pattern("/*.js"), mvc.pattern("/*.txt"), mvc.pattern("/*.json"), mvc.pattern("/*.map"), mvc.pattern("/*.css")).permitAll()
                    .requestMatchers(mvc.pattern("/*.ico"), mvc.pattern("/*.png"), mvc.pattern("/*.svg"), mvc.pattern("/*.webapp")).permitAll()
  <%_ if (clientFrameworkVue) { _%>
                    .requestMatchers(mvc.pattern("/assets/**")).permitAll()
    <%_ if (microfrontend) { _%>
                    .requestMatchers(mvc.pattern("/app/**")).permitAll()
                    .requestMatchers(mvc.pattern("/i18n/**")).permitAll()
    <%_ } _%>
  <%_ } else { _%>
                    .requestMatchers(mvc.pattern("/app/**")).permitAll()
                    .requestMatchers(mvc.pattern("/i18n/**")).permitAll()
  <%_ } _%>
                    .requestMatchers(mvc.pattern("/content/**")).permitAll()
                    .requestMatchers(mvc.pattern("/swagger-ui/**")).permitAll()
<%_ } _%>
<%_ if (authenticationTypeJwt) { _%>
                    .requestMatchers(mvc.pattern(HttpMethod.POST, "/api/authenticate")).permitAll()
                    .requestMatchers(mvc.pattern(HttpMethod.GET, "/api/authenticate")).permitAll()
<%_ } else { _%>
                    .requestMatchers(mvc.pattern("/api/authenticate")).permitAll()
<%_ } _%>
<%_ if (generateUserManagement) { _%>
                    .requestMatchers(mvc.pattern("/api/register")).permitAll()
                    .requestMatchers(mvc.pattern("/api/activate")).permitAll()
                    .requestMatchers(mvc.pattern("/api/account/reset-password/init")).permitAll()
                    .requestMatchers(mvc.pattern("/api/account/reset-password/finish")).permitAll()
<%_ } _%>
<%_ if (authenticationTypeOauth2) { _%>
                    .requestMatchers(mvc.pattern("/api/auth-info")).permitAll()
<%_ } _%>
                    .requestMatchers(mvc.pattern("/api/admin/**")).hasAuthority(ADMIN)
                    .requestMatchers(mvc.pattern("/api/**")).authenticated()
<%_ if (communicationSpringWebsocket) { _%>
                    .requestMatchers(mvc.pattern("/websocket/**")).authenticated()
<%_ } _%>
                    .requestMatchers(mvc.pattern("/v3/api-docs/**")).hasAuthority(ADMIN)
                    .requestMatchers(mvc.pattern("/management/health")).permitAll()
                    .requestMatchers(mvc.pattern("/management/health/**")).permitAll()
                    .requestMatchers(mvc.pattern("/management/info")).permitAll()
                    .requestMatchers(mvc.pattern("/management/prometheus")).permitAll()
                    .requestMatchers(mvc.pattern("/management/**")).hasAuthority(ADMIN))
<%_ if (authenticationTypeSession) { _%>
  <%_ if (generateUserManagement) { _%>
            .rememberMe(rememberMe ->
                rememberMe
                    .rememberMeServices(rememberMeServices)
                    .rememberMeParameter("remember-me")
                    .key(jHipsterProperties.security.rememberMe.key)
            )
  <%_ } _%>
            .exceptionHandling(exceptionHanding ->
                exceptionHanding.defaultAuthenticationEntryPointFor(
                    HttpStatusEntryPoint(HttpStatus.UNAUTHORIZED),
                    OrRequestMatcher(
  <%_ if (communicationSpringWebsocket) { _%>
                        antMatcher("/websocket/**"),
  <%_ } _%>
                        antMatcher("/api/**")
                    )
                )
            )
            .formLogin(formLogin ->
                formLogin
                    .loginPage("/")
                    .loginProcessingUrl("/api/authentication")
                    .successHandler((request, response, authentication) -> response.setStatus(HttpStatus.OK.value()))
                    .failureHandler((request, response, exception) -> response.setStatus(HttpStatus.UNAUTHORIZED.value()))
                    .permitAll()
            )
            .logout(logout ->
                logout.logoutUrl("/api/logout").logoutSuccessHandler(HttpStatusReturningLogoutSuccessHandler()).permitAll());
<%_ } else if (authenticationTypeJwt) { _%>
            .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
            .exceptionHandling((exceptions) -> exceptions
				.authenticationEntryPoint(BearerTokenAuthenticationEntryPoint())
				.accessDeniedHandler(BearerTokenAccessDeniedHandler()))
            .oauth2ResourceServer(oauth2 -> oauth2.jwt(Customizer.withDefaults()));
<%_ } else if (authenticationTypeOauth2) { _%>
  <%_ if (applicationTypeMonolith) { _%>
            .oauth2Login(withDefaults())
  <%_ } else if (applicationTypeMicroservice) { _%>
            .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
  <%_ } _%>
            .oauth2ResourceServer(oauth2 -> oauth2
                .jwt(jwt -> jwt
                    .jwtAuthenticationConverter(authenticationConverter())))
            .oauth2Client();
<%_ } _%>
<%_ if (devDatabaseTypeH2Any) { _%>
        if (env.acceptsProfiles(Profiles.of(JHipsterConstants.SPRING_PROFILE_DEVELOPMENT))) {
            http
  <%_ if (authenticationUsesCsrf && !applicationTypeMicroservice) { _%>
                .csrf(csrf -> csrf.ignoringRequestMatchers(antMatcher("/h2-console/**")))
  <%_ } _%>
                .authorizeHttpRequests(authz -> authz.requestMatchers(antMatcher("/h2-console/**")).permitAll());
        }
<%_ } _%>
        return http.build()
    }

    @Bean
    fun mvc(introspector: HandlerMappingIntrospector): MvcRequestMatcher.Builder = 
        MvcRequestMatcher.Builder(introspector)

    <%_ if (authenticationTypeOauth2) { _%>

    fun authenticationConverter(): Converter<Jwt, AbstractAuthenticationToken> {
        val jwtAuthenticationConverter = JwtAuthenticationConverter()
        jwtAuthenticationConverter.setJwtGrantedAuthoritiesConverter(JwtGrantedAuthorityConverter())
        return jwtAuthenticationConverter
    }

    <%_ if (!applicationTypeMicroservice) { _%>
    /**
     * Map authorities from "groups" or "roles" claim in ID Token.
     *
     * @return a [GrantedAuthoritiesMapper] that maps groups from
     * the IdP to Spring Security Authorities.
     */
    @Bean
    fun userAuthoritiesMapper() =
        GrantedAuthoritiesMapper { authorities ->
            val mappedAuthorities = mutableSetOf<GrantedAuthority>()

            authorities.forEach {
                // Check for OidcUserAuthority because Spring Security 5.2 returns
                // each scope as a GrantedAuthority, which we don't care about.
                if (it is OidcUserAuthority) {
                    extractAuthorityFromClaims(it.userInfo.claims)?.let (mappedAuthorities::addAll)
                }
            }
            mappedAuthorities
        }
    <%_ } _%>

    @Bean
    fun jwtDecoder(<%_ if (!applicationTypeMicroservice) { _%>clientRegistrationRepository: ClientRegistrationRepository, restTemplateBuilder: RestTemplateBuilder<%_ } _%>): JwtDecoder {
        val jwtDecoder = JwtDecoders.fromOidcIssuerLocation(issuerUri) as NimbusJwtDecoder

        val audienceValidator = AudienceValidator(jHipsterProperties.security.oauth2.audience)
        val withIssuer = JwtValidators.createDefaultWithIssuer(issuerUri)
        val withAudience = DelegatingOAuth2TokenValidator(withIssuer, audienceValidator)

        jwtDecoder.setJwtValidator(withAudience)
        <%_ if (!applicationTypeMicroservice) { _%>
        jwtDecoder.setClaimSetConverter(CustomClaimConverter(clientRegistrationRepository.findByRegistrationId("oidc"), restTemplateBuilder.build()))
        <%_ } _%>

        return jwtDecoder
    }
    <%_ } _%>
}
