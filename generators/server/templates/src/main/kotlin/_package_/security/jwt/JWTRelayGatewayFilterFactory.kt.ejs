<%#
 Copyright 2013-2023 the original author or authors from the JHipster project.

  This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

  Licensed under the Apache License, Version 2.0 (the "
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.security.jwt

import org.springframework.http.HttpHeaders.AUTHORIZATION

import org.springframework.cloud.gateway.filter.GatewayFilter
import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory
import org.springframework.security.oauth2.jwt.ReactiveJwtDecoder
import org.springframework.stereotype.Component
import org.springframework.util.StringUtils

import org.springframework.web.server.ServerWebExchange

@Component
class JWTRelayGatewayFilterFactory(private val jwtDecoder: ReactiveJwtDecoder) : AbstractGatewayFilterFactory<Any>() {
    companion object {
        const val BEARER: String = "Bearer "
    }

    override fun apply(config: Any) =
        GatewayFilter { exchange, chain ->
            val bearerToken = exchange.request.headers.getFirst(AUTHORIZATION)
            if (bearerToken == null) {
                // Allow anonymous requests.
                chain.filter(exchange)
            }
            val token = this.extractToken(bearerToken)
            jwtDecoder.decode(token).thenReturn(withBearerAuth(exchange, token)).flatMap(chain::filter)
        }

     private fun extractToken(bearerToken: String): String {
        if (StringUtils.hasText(bearerToken) && bearerToken.startsWith("Bearer ")) {
            return bearerToken.substring(7)
        }
        throw IllegalArgumentException("Invalid token in Authorization header")
    }

    private fun withBearerAuth(exchange: ServerWebExchange, authorizeToken: String): ServerWebExchange{
        return exchange.mutate().request(r -> r.headers(headers -> headers.setBearerAuth(authorizeToken))).build()
    }
}
