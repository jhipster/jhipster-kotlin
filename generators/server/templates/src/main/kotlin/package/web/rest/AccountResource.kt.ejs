<%#
Copyright 2013-2020 the original author or authors from the JHipster project.

This file is part of the JHipster project, see https://www.jhipster.tech/
for more information.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-%>
package <%= packageName %>.web.rest

<%_ if (authenticationType === 'oauth2') { _%>
    <%_ if (reactive) { _%>
import <%= packageName %>.security.getCurrentUserLogin
    <%_ } _%>
import <%= packageName %>.service.UserService
import <%= packageName %>.service.dto.<%= asDto('AdminUser') %>
import <%= packageName %>.service.dto.<%= asDto('User') %>

import org.slf4j.LoggerFactory
import org.springframework.security.authentication.AbstractAuthenticationToken
import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RestController
<%_ if (reactive) { _%>
import reactor.core.publisher.Mono
<%_ } else { _%>
import javax.servlet.http.HttpServletRequest
<%_ } _%>

import java.security.Principal

/**
 * REST controller for managing the current user's account.
 */
@RestController
@RequestMapping("/api")
class AccountResource(private val userService: UserService) {

    internal class AccountResourceException(message: String) : RuntimeException(message)

    private val log = LoggerFactory.getLogger(javaClass)

    /**
     * `GET  /account` : get the current user.
     *
     * @param principal the current user; resolves to `null` if not authenticated.
     * @return the current user.
     * @throws AccountResourceException `500 (Internal Server Error)` if the user couldn't be returned.
     */
    @GetMapping("/account")
    fun getAccount(principal: Principal?): <% if (reactive) { %>Mono<<%= asDto('AdminUser') %>><% } else { %><%= asDto('AdminUser') %><% } %> =
        if (principal is AbstractAuthenticationToken) {
            userService.getUserFromAuthentication(principal)
        } else {
            throw AccountResourceException("User could not be found")
        }

    companion object {
        private const val serialVersionUID = 1L
    }
}
<%_ } else if (skipUserManagement) { _%>
<%_ if (!reactive) { _%>
import <%= packageName %>.security.getCurrentUserLogin
<%_ } _%>
import com.fasterxml.jackson.annotation.JsonCreator
import org.springframework.security.core.GrantedAuthority
<%_ if (!reactive) { _%>
import org.springframework.security.core.context.SecurityContextHolder
<%_ } else { _%>
import org.springframework.security.core.context.ReactiveSecurityContextHolder
import org.springframework.security.core.context.SecurityContext
import org.springframework.security.core.userdetails.UserDetails
<%_ } _%>
import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RestController
<%_ if (reactive) { _%>
import reactor.core.publisher.Mono
<%_ } _%>

@RestController
@RequestMapping("/api")
class AccountResource {

    internal class AccountResourceException : RuntimeException()

    /**
     * {@code GET  /account} : get the current user.
     *
     * @return the current user.
     * @throws AccountResourceException {@code 500 (Internal Server Error)} if the user couldn't be returned.
     */
    @GetMapping("/account")
    <%_ if (!reactive) { _%>
    fun getAccount(): UserVM {
        val login = getCurrentUserLogin()
            .orElseThrow { AccountResourceException() }
        val authorities = SecurityContextHolder.getContext().authentication.authorities
            .mapNotNullTo(mutableSetOf()) { it.authority }
        return UserVM(login, authorities)
    <%_ } else { _%>
    fun getAccount(): Mono<UserVM> {
        return ReactiveSecurityContextHolder.getContext()
            .map { SecurityContext.getAuthentication(it) }
            .map { authentication -> {
                var login = ""
                if (authentication.principal is UserDetails) {
                    login = authentication.principal.username
                } else if (authentication.principal is String) {
                    login = authentication.principal
                } else {
                    throw AccountResourceException()
                }
                val authorities = authentication.authorities()
                    .map { GrantedAuthority.getAuthority(it) }
                    .toSet()
                return UserVM(login, authorities)
            }}
            .switchIfEmpty(Mono.error(AccountResourceException()))
    <%_ } _%>
    }

    data class UserVM @JsonCreator constructor(val login: String, val authorities: Set<String>) {

        fun isActivated() = true
    }
}
<%_ } else { _%>
<%_ if (authenticationType === 'session' && !reactive) { _%>
import <%= packageName %>.domain.PersistentToken
import <%= packageName %>.repository.PersistentTokenRepository
<%_ } _%>
import <%= packageName %>.repository.UserRepository
import <%= packageName %>.security.getCurrentUserLogin
import <%= packageName %>.service.MailService
import <%= packageName %>.service.UserService
import <%= packageName %>.service.dto.PasswordChangeDTO
import <%= packageName %>.service.dto.<%= asDto('AdminUser') %>
import <%= packageName %>.service.dto.<%= asDto('User') %>
import <%= packageName %>.web.rest.errors.EmailAlreadyUsedException
import <%= packageName %>.web.rest.errors.InvalidPasswordException
import <%= packageName %>.web.rest.errors.LoginAlreadyUsedException
import <%= packageName %>.web.rest.vm.KeyAndPasswordVM
import <%= packageName %>.web.rest.vm.ManagedUserVM

<% if (authenticationType === 'session' && !reactive) { %>
import org.apache.commons.lang3.StringUtils
<% } %>
import org.slf4j.LoggerFactory
import org.springframework.http.HttpStatus
<% if (authenticationType === 'session' && !reactive) { %>
import org.springframework.web.bind.annotation.DeleteMapping
<% } %>
import org.springframework.web.bind.annotation.GetMapping
<% if (authenticationType === 'session' && !reactive) { %>
import org.springframework.web.bind.annotation.PathVariable
<% } %>
import org.springframework.web.bind.annotation.PostMapping
import org.springframework.web.bind.annotation.RequestBody
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RequestParam
import org.springframework.web.bind.annotation.ResponseStatus
import org.springframework.web.bind.annotation.RestController
<%_ if (reactive) { _%>
import org.springframework.web.server.ServerWebExchange
import reactor.core.publisher.Mono
<%_ } _%>

<%_ if (!reactive) { _%>
import javax.servlet.http.HttpServletRequest
<%_ } _%>
import javax.validation.Valid
<%_ if (authenticationType === 'session' && !reactive) { _%>
import java.io.UnsupportedEncodingException
import java.net.URLDecoder
<%_ } _%>
<%_ if (reactive) { _%>
import java.security.Principal
<%_ } _%>

/**
 * REST controller for managing the current user's account.
 */
@RestController
@RequestMapping("/api")
class AccountResource(
    private val userRepository: UserRepository,
    private val userService: UserService,
    private val mailService: MailService<% if (authenticationType === 'session' && !reactive) { %>,
    private val persistentTokenRepository: PersistentTokenRepository<%_ } %>
) {

    internal class AccountResourceException(message: String) : RuntimeException(message)

    private val log = LoggerFactory.getLogger(javaClass)

    /**
     * `POST  /register` : register the user.
     *
     * @param managedUserVM the managed user View Model.
     * @throws InvalidPasswordException `400 (Bad Request)` if the password is incorrect.
     * @throws EmailAlreadyUsedException `400 (Bad Request)` if the email is already used.
     * @throws LoginAlreadyUsedException `400 (Bad Request)` if the login is already used.
     */
    @PostMapping("/register")
    @ResponseStatus(HttpStatus.CREATED)
    fun registerAccount(@Valid @RequestBody managedUserVM: ManagedUserVM) <% if (reactive) { %>: Mono<Void> <% } %>{
        if (isPasswordLengthInvalid(managedUserVM.password)) {
            throw InvalidPasswordException()
        }
        <%_ if (!reactive) { _%>
        val user = userService.registerUser(managedUserVM, managedUserVM.password!!)
        mailService.sendActivationEmail(user)
        <%_ } else { _%>
        return userService.registerUser(managedUserVM, managedUserVM.password!!)
            .doOnSuccess(mailService::sendActivationEmail)
            .then()
        <%_ } _%>
    }

    /**
     * `GET  /activate` : activate the registered user.
     *
     * @param key the activation key.
     * @throws RuntimeException `500 (Internal Server Error)` if the user couldn't be activated.
     */
    @GetMapping("/activate")
    fun activateAccount(@RequestParam(value = "key") key: String) <% if (reactive) { %>: Mono<Void> <% } %>{
        <%_ if (!reactive) { _%>
        val user = userService.activateRegistration(key)
        if (!user.isPresent) {
            throw AccountResourceException("No user was found for this activation key")
        }
        <%_ } else { _%>
        return userService.activateRegistration(key)
            .switchIfEmpty(Mono.error(AccountResourceException("No user was found for this activation key")))
            .then()
        <%_ } _%>
    }

    /**
     * `GET  /authenticate` : check if the user is authenticated, and return its login.
     *
     * @param request the HTTP request.
     * @return the login if the user is authenticated.
     */
    @GetMapping("/authenticate")
    <%_ if (!reactive) { _%>
    fun isAuthenticated(request: HttpServletRequest): String? {
        log.debug("REST request to check if the current user is authenticated")
        return request.remoteUser
    <%_ } else { _%>
    fun isAuthenticated(request: ServerWebExchange): Mono<String?> {
        log.debug("REST request to check if the current user is authenticated")
        return request.getPrincipal<Principal>().map(Principal::getName)
    <%_ } _%>
    }

    /**
     * `GET  /account` : get the current user.
     *
     * @return the current user.
     * @throws RuntimeException `500 (Internal Server Error)` if the user couldn't be returned.
     */
    @GetMapping("/account")
    fun getAccount(): <% if (reactive) { %>Mono<<%= asDto('AdminUser') %>><% } else { %><%= asDto('AdminUser') %><% } %> =
        userService.getUserWithAuthorities()
            .map { <%= asDto('AdminUser') %>(it) }
            <%_ if (!reactive) { _%>
            .orElseThrow { AccountResourceException("User could not be found") }
            <%_ } else { _%>
            .switchIfEmpty(Mono.error(AccountResourceException("User could not be found")))
            <%_ } _%>

    /**
     * POST  /account : update the current user information.
     *
     * @param userDTO the current user information
     * @throws EmailAlreadyUsedException `400 (Bad Request)` if the email is already used.
     * @throws RuntimeException `500 (Internal Server Error)` if the user login wasn't found.
     */
    @PostMapping("/account")
    <%_ if (!reactive) { _%>
    fun saveAccount(@Valid @RequestBody userDTO: <%= asDto('AdminUser') %>) {
        val userLogin = getCurrentUserLogin()
            .orElseThrow { AccountResourceException("") }
        val existingUser = userRepository.findOneByEmailIgnoreCase(userDTO.email)
        if (existingUser.isPresent && !existingUser.get().login.equals(userLogin, ignoreCase = true)) {
            throw EmailAlreadyUsedException()
        }
        val user = userRepository.findOneByLogin(userLogin)
        if (!user.isPresent) {
            throw AccountResourceException("User could not be found")
        }
        userService.updateUser(
            userDTO.firstName, userDTO.lastName, userDTO.email,
            userDTO.langKey<% if (['sql', 'mongodb', 'couchbase', 'neo4j'].includes(databaseType)) { %>, userDTO.imageUrl<% } %>
        )
    }
    <%_ } else { _%>
    fun saveAccount(@Valid @RequestBody userDTO: <%= asDto('AdminUser') %>): Mono<Void> =
        getCurrentUserLogin()
            .switchIfEmpty(Mono.error(AccountResourceException("Current user login not found")))
            .flatMap { userLogin ->
                userRepository.findOneByEmailIgnoreCase(userDTO.email!!)
                    .filter { existingUser -> !existingUser.login.equals(userLogin, ignoreCase = true) }
                    .hasElement()
                    .flatMap { emailExists ->
                        if (emailExists!!) {
                            throw EmailAlreadyUsedException()
                        }
                        userRepository.findOneByLogin(userLogin)
                    }
            }
            .switchIfEmpty(Mono.error(AccountResourceException("User could not be found")))
            .flatMap {
                userService.updateUser(
                    userDTO.firstName, userDTO.lastName, userDTO.email, userDTO.langKey<% if (['sql', 'mongodb', 'couchbase', 'neo4j'].includes(databaseType)) { %>, userDTO.imageUrl<% } %>
                )
            }
    <%_ } _%>

    /**
     * POST  /account/change-password : changes the current user's password.
     *
     * @param passwordChangeDto current and new password.
     * @throws InvalidPasswordException `400 (Bad Request)` if the new password is incorrect.
     */
    @PostMapping(path = ["/account/change-password"])
    fun changePassword(@RequestBody passwordChangeDto: PasswordChangeDTO) <% if (reactive) { %>: Mono<Void> <% } %>{
        if (isPasswordLengthInvalid(passwordChangeDto.newPassword)) {
            throw InvalidPasswordException()
        }
        <% if (reactive) { %>return <% } %>userService.changePassword(passwordChangeDto.currentPassword!!, passwordChangeDto.newPassword!!)
    }<% if (authenticationType === 'session' && !reactive) { %>

    /**
     * GET  /account/sessions : get the current open sessions.
     *
     * @return the current open sessions
     * @throws RuntimeException `500 (Internal Server Error)` if the current open sessions couldn't be retrieved
     */
    @GetMapping("/account/sessions")
    fun getCurrentSessions(): List<PersistentToken> =
        persistentTokenRepository.findByUser(
            userRepository.findOneByLogin(getCurrentUserLogin()
                .orElseThrow { AccountResourceException("Current user login not found") })
                .orElseThrow { AccountResourceException("User could not be found") }
        )

    /**
     *` DELETE  /account/sessions?series={series}` : invalidate an existing session.
     *
     * - You can only delete your own sessions, not any other user's session
     * - If you delete one of your existing sessions, and that you are currently logged in on that session, you will
     *   still be able to use that session, until you quit your browser: it does not work in real time (there is
     *   no API for that), it only removes the "remember me" cookie
     * - This is also true if you invalidate your current session: you will still be able to use it until you close
     *   your browser or that the session times out. But automatic login (the "remember me" cookie) will not work
     *   anymore.
     *   There is an API to invalidate the current session, but there is no API to check which session uses which
     *   cookie.
     *
     * @param series the series of an existing session.
     * @throws UnsupportedEncodingException if the series couldn't be URL decoded.
     */
    @DeleteMapping("/account/sessions/{series}")
    @Throws(UnsupportedEncodingException::class)
    fun invalidateSession(@PathVariable series: String) {
        val decodedSeries = URLDecoder.decode(series, "UTF-8")
        getCurrentUserLogin()
            .flatMap(userRepository::findOneByLogin)
            .ifPresent { u ->
                persistentTokenRepository.findByUser(u).stream()
                    .filter { persistentToken -> StringUtils.equals(persistentToken.series, decodedSeries) }
                    <%_ if (databaseType === 'sql' || databaseType === 'mongodb') { _%>
                    .findAny().ifPresent { persistentTokenRepository.deleteById(decodedSeries) }
                    <%_ } else if (databaseType === 'couchbase'){ _%>
                .findAny().ifPresent { persistentTokenRepository.deleteBySeries(decodedSeries) }
                <%_ } else { _%>
                    .findAny().ifPresent(persistentTokenRepository::delete)
                <%_ } _%>
            }
    }<% } %>

    /**
     * POST   /account/reset-password/init : Send an email to reset the password of the user
     *
     * @param mail the mail of the user
     */
    @PostMapping(path = ["/account/reset-password/init"])
    <%_ if (!reactive) { _%>
    fun requestPasswordReset(@RequestBody mail: String) {
        val user = userService.requestPasswordReset(mail)
        if (user.isPresent()) {
            mailService.sendPasswordResetMail(user.get())
        } else {
            // Pretend the request has been successful to prevent checking which emails really exist
            // but log that an invalid attempt has been made
            log.warn("Password reset requested for non existing mail")
        }
    }
    <%_ } else { _%>
    fun requestPasswordReset(@RequestBody mail: String): Mono<Void> =
        userService.requestPasswordReset(mail)
            .doOnSuccess {
                if (it != null)  {
                    mailService.sendPasswordResetMail(it)
                } else {
                    // Pretend the request has been successful to prevent checking which emails really exist
                    // but log that an invalid attempt has been made
                    log.warn("Password reset request for non existing email")
                }
            }.then()
    <%_ } _%>

    /**
     * `POST   /account/reset-password/finish` : Finish to reset the password of the user.
     *
     * @param keyAndPassword the generated key and the new password.
     * @throws InvalidPasswordException `400 (Bad Request)` if the password is incorrect.
     * @throws RuntimeException `500 (Internal Server Error)` if the password could not be reset.
     */
    @PostMapping(path = ["/account/reset-password/finish"])
    fun finishPasswordReset(@RequestBody keyAndPassword: KeyAndPasswordVM) <% if (reactive) { %>: Mono<Void> <% } %>{
        if (isPasswordLengthInvalid(keyAndPassword.newPassword)) {
            throw InvalidPasswordException()
        }
        <%_ if (!reactive) { _%>
        val user = userService.completePasswordReset(keyAndPassword.newPassword!!, keyAndPassword.key!!)

        if (!user.isPresent) {
            throw AccountResourceException("No user was found for this reset key")
        }
        <%_ } else { _%>
        return userService.completePasswordReset(keyAndPassword.newPassword!!, keyAndPassword.key!!)
            .switchIfEmpty(Mono.error(AccountResourceException("No user was found for this reset key")))
            .then()
        <%_ } _%>
    }
}

private fun isPasswordLengthInvalid(password: String?) =
    StringUtils.isEmpty(password) ||
    password.length() < ManagedUserVM.PASSWORD_MIN_LENGTH ||
    password.length() > ManagedUserVM.PASSWORD_MAX_LENGTH;
<%_ } _%>
