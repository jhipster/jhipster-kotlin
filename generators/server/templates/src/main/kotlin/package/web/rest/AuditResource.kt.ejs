<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.web.rest

import <%= packageName %>.service.AuditEventService

import tech.jhipster.web.util.PaginationUtil
<%_ if (!reactive) { _%>
import tech.jhipster.web.util.ResponseUtil
<%_ } _%>
import org.springframework.boot.actuate.audit.AuditEvent
import org.springframework.data.domain.Pageable
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
<%_ if (reactive) { _%>
import org.springframework.data.domain.PageImpl
import org.springframework.http.server.reactive.ServerHttpRequest
<%_ } _%>
import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.PathVariable
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RequestParam
import org.springframework.web.bind.annotation.RestController
<%_ if (!reactive) { _%>
import org.springframework.web.servlet.support.ServletUriComponentsBuilder
<%_ } else { _%>
import org.springframework.web.server.ResponseStatusException
import org.springframework.web.util.UriComponentsBuilder
import reactor.core.publisher.Flux
import reactor.core.publisher.Mono
import reactor.core.publisher.switchIfEmpty
<%_ } _%>

import java.time.Instant
import java.time.LocalDate
import java.time.ZoneId

/**
 * REST controller for getting the `AuditEvent`s.
 */
@RestController
@RequestMapping("/management/audits")
class AuditResource(private val auditEventService: AuditEventService) {

    /**
     * `GET /audits` : get a page of `AuditEvent`s.
     *
     <%_ if (reactive) { _%>
     * @param request a [ServerHttpRequest] request.
     <%_ } _%>
     * @param pageable the pagination information.
     * @return the `ResponseEntity` with status `200 (OK)` and the list of `AuditEvent`s in body.
     */
    @GetMapping
    <%_ if (!reactive) { _%>
    fun getAll(pageable: Pageable): ResponseEntity<List<AuditEvent>> {
        val page = auditEventService.findAll(pageable)
        val headers = PaginationUtil.generatePaginationHttpHeaders(ServletUriComponentsBuilder.fromCurrentRequest(), page)
        return ResponseEntity(page.content, headers, HttpStatus.OK)
    }
    <%_ } else { _%>
    fun getAll(request: ServerHttpRequest, pageable: Pageable): Mono<ResponseEntity<Flux<AuditEvent>>> {
        return auditEventService.count()
            .map { PageImpl<AuditEvent>(listOf(), pageable, it) }
            .map { PaginationUtil.generatePaginationHttpHeaders(UriComponentsBuilder.fromHttpRequest(request), it) }
            .map { ResponseEntity.ok().headers(it).body(auditEventService.findAll(pageable)) }
    }
    <%_ } _%>

    /**
     * `GET  /audits` : get a page of `AuditEvent`s between the `fromDate` and `toDate`.
     *
     * @param fromDate the start of the time period of `AuditEvent`s to get.
     * @param toDate the end of the time period of `AuditEvent`s to get.
     <%_ if (reactive) { _%>
     * @param request a [ServerHttpRequest] request.
     <%_ } _%>
     * @param pageable the pagination information.
     * @return the `ResponseEntity` with status `200 (OK)` and the list of `AuditEvent`s in body.
     */
    @GetMapping(params = ["fromDate", "toDate"])
    fun getByDates(
        @RequestParam(value = "fromDate") fromDate: LocalDate,
        @RequestParam(value = "toDate") toDate: LocalDate,
        <%_ if (reactive) { _%>
        request: ServerHttpRequest,
        <%_ } _%>
        pageable: Pageable
    ): <% if (!reactive) { %>ResponseEntity<List<AuditEvent>><% } else { %>Mono<ResponseEntity<Flux<AuditEvent>>><% } %> {

        val from = fromDate.atStartOfDay(ZoneId.systemDefault()).toInstant()
        val to = toDate.atStartOfDay(ZoneId.systemDefault()).plusDays(1).toInstant()

        <%_ if (!reactive) { _%>
        val page = auditEventService.findByDates(from, to, pageable)
        val headers = PaginationUtil.generatePaginationHttpHeaders(ServletUriComponentsBuilder.fromCurrentRequest(), page)
        return ResponseEntity(page.content, headers, HttpStatus.OK)
        <%_ } else { _%>
        val events = auditEventService.findByDates(from, to, pageable)
        return auditEventService.countByDates(from, to)
            .map { PageImpl<AuditEvent>(listOf(), pageable, it) }
            .map { PaginationUtil.generatePaginationHttpHeaders(UriComponentsBuilder.fromHttpRequest(request), it) }
            .map { ResponseEntity.ok().headers(it).body(events) }
        <%_ } _%>
    }

    /**
     * `GET  /audits/:id` : get an `AuditEvent` by id.
     *
     * @param id the id of the entity to get.
     * @return the `ResponseEntity` with status `200 (OK)` and the AuditEvent in body, or status `404 (Not Found)`.
     */
    @GetMapping("/{id:.+}")
    <%_ if (!reactive) { _%>
    fun get(@PathVariable id: <%= pkType %>?): ResponseEntity<AuditEvent> =
        ResponseUtil.wrapOrNotFound(auditEventService.find(id!!))
    <%_ } else { _%>
    fun get(@PathVariable id: <%= pkType %>?) = auditEventService.find(id!!)
        .switchIfEmpty { Mono.error(ResponseStatusException(HttpStatus.NOT_FOUND)) }
    <%_ } _%>
}
