<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.web.rest.errors

import org.zalando.problem.AbstractThrowableProblem
import org.zalando.problem.Exceptional

import org.zalando.problem.Status.BAD_REQUEST

/**
 * Custom, parameterized exception, which can be translated on the client side.
 * For example:
 *
 * ```
 * throw CustomParameterizedException("myCustomError", "hello", "world")
 * ```
 *
 * Can be translated with:
 *
 * ```
 * "error.myCustomError" :  "The server says {{param0}} to {{param1}}"
 * ```
 */
class CustomParameterizedException(message: String, paramMap: Map<String, Any>)
    : AbstractThrowableProblem(ErrorConstants.PARAMETERIZED_TYPE, "Parameterized Exception", BAD_REQUEST,
    null, null, null, toProblemParameters(message, paramMap)) {

    constructor(message: String, vararg params: String) : this(message, toParamMap(*params))

    override fun getCause(): Exceptional? {
        return super.cause
    }

    companion object {

        private const val serialVersionUID = 1L

        private const val PARAM = "param"

        fun toParamMap(vararg params: String): Map<String, Any> {
            val paramMap = mutableMapOf<String, Any>()
            if (params.isNotEmpty()) {
                for (i in params.indices) {
                    paramMap[PARAM + i] = params[i]
                }
            }
            return paramMap
        }

        fun toProblemParameters(message: String, paramMap: Map<String, Any>): Map<String, Any> {
            val parameters = mutableMapOf<String, Any>()
            parameters["message"] = message
            parameters["params"] = paramMap
            return parameters
        }
    }
}
