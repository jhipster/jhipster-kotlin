<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.web.websocket

import <%=packageName%>.config.WebsocketConfiguration.Companion.IP_ADDRESS

import <%=packageName%>.web.websocket.dto.ActivityDTO

import java.security.Principal
import java.time.Instant

import org.slf4j.LoggerFactory
import org.springframework.context.ApplicationListener
import org.springframework.messaging.handler.annotation.MessageMapping
import org.springframework.messaging.handler.annotation.Payload
import org.springframework.messaging.handler.annotation.SendTo
import org.springframework.messaging.simp.SimpMessageSendingOperations
import org.springframework.messaging.simp.stomp.StompHeaderAccessor
import org.springframework.stereotype.Controller
import org.springframework.web.socket.messaging.SessionDisconnectEvent

@Controller
class ActivityService(private val messagingTemplate: SimpMessageSendingOperations) :
    ApplicationListener<SessionDisconnectEvent> {

    private val log = LoggerFactory.getLogger(javaClass)

    @MessageMapping("/topic/activity")
    @SendTo("/topic/tracker")
    fun sendActivity(@Payload activityDTO: ActivityDTO, stompHeaderAccessor: StompHeaderAccessor, principal: Principal): ActivityDTO {
        activityDTO.apply {
            userLogin = principal.name
            sessionId = stompHeaderAccessor.sessionId
            ipAddress = stompHeaderAccessor.sessionAttributes!![IP_ADDRESS].toString()
            time = Instant.now()
        }
        log.debug("Sending user tracking data {}", activityDTO)
        return activityDTO
    }

    override fun onApplicationEvent(event: SessionDisconnectEvent) {
        val activityDTO = ActivityDTO( sessionId = event.sessionId, page = "logout")
        messagingTemplate.convertAndSend("/topic/tracker", activityDTO)
    }
}
