<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.web.rest

import <%= packageName %>.config.LOGIN_REGEX
<%_ if (authenticationType !== 'oauth2') { _%>
import <%= packageName %>.domain.<%= asEntity('User') %>
<%_ } _%>
<%_ if (authenticationType !== 'oauth2') { _%>
import <%= packageName %>.repository.UserRepository
<%_ } _%>
import <%= packageName %>.security.ADMIN
<%_ if (authenticationType !== 'oauth2') { _%>
import <%= packageName %>.service.MailService
import org.springframework.data.domain.Sort
<%_ } _%>
import <%= packageName %>.service.UserService
import <%= packageName %>.service.dto.<%= asDto('AdminUser') %>
<%_ if (authenticationType !== 'oauth2') { _%>
import <%= packageName %>.web.rest.errors.BadRequestAlertException
import <%= packageName %>.web.rest.errors.EmailAlreadyUsedException
import <%= packageName %>.web.rest.errors.LoginAlreadyUsedException
<%_ } _%>

import tech.jhipster.web.util.HeaderUtil
<%_ if (databaseType === 'sql' || databaseType === 'mongodb' || databaseType === 'neo4j' || databaseType === 'couchbase') { _%>
import tech.jhipster.web.util.PaginationUtil
<%_ } _%>
<%_ if (!reactive) { _%>
import tech.jhipster.web.util.ResponseUtil
<%_ } _%>

import org.slf4j.LoggerFactory
import org.springframework.beans.factory.annotation.Value
<%_ if (databaseType === 'sql' || databaseType === 'mongodb' || databaseType === 'neo4j' || databaseType === 'couchbase') { _%>
    <%_ if (reactive) { _%>
import org.springframework.data.domain.PageImpl
    <%_ } _%>
import org.springframework.data.domain.Pageable
<%_ } _%>
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
<%_ if (reactive) { _%>
import org.springframework.http.server.reactive.ServerHttpRequest
<%_ } _%>
import org.springframework.security.access.prepost.PreAuthorize
import org.springframework.web.bind.annotation.DeleteMapping
import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.PathVariable
import org.springframework.web.bind.annotation.PostMapping
import org.springframework.web.bind.annotation.PutMapping
import org.springframework.web.bind.annotation.RequestBody
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RequestParam
<%_ if (reactive) { _%>
import org.springframework.web.bind.annotation.ResponseStatus
<%_ } _%>
import org.springframework.web.bind.annotation.RestController
<%_ if (!reactive) { _%>
import org.springframework.web.servlet.support.ServletUriComponentsBuilder
<%_ } _%>
<%_ if (reactive) { _%>
import org.springframework.web.server.ResponseStatusException
import org.springframework.web.util.UriComponentsBuilder
import reactor.core.publisher.Flux
import reactor.core.publisher.Mono
<%_ } _%>

import javax.validation.constraints.Pattern
<%_ if (authenticationType !== 'oauth2') { _%>
import javax.validation.Valid
import java.net.URI
import java.net.URISyntaxException
<%_ } _%>
<%_ if (searchEngine === 'elasticsearch' && !reactive) { _%>
import java.util.stream.Collectors
import java.util.stream.StreamSupport

import org.elasticsearch.index.query.QueryBuilders.queryStringQuery
<%_ } _%>

/**
 * REST controller for managing users.
 *
 * This class accesses the [<% if (!(authenticationType !== 'oauth2' || searchEngine === 'elasticsearch')) { %><%= packageName %>.domain.<% } %><%= asEntity('User') %>] entity, and needs to fetch its collection of authorities.
 *
 * For a normal use-case, it would be better to have an eager relationship between User and Authority,
 * and send everything to the client side: there would be no View Model and DTO, a lot less code, and an outer-join
 * which would be good for performance.
 *
 * We use a View Model and a DTO for 3 reasons:
 *
 * * We want to keep a lazy association between the user and the authorities, because people will
 * quite often do relationships with the user, and we don't want them to get the authorities all
 * the time for nothing (for performance reasons). This is the #1 goal: we should not impact our users'
 * application because of this use-case.
 * *  Not having an outer join causes n+1 requests to the database. This is not a real issue as
 * we have by default a second-level cache. This means on the first HTTP call we do the n+1 requests,
 * but then all authorities come from the cache, so in fact it's much better than doing an outer join
 * (which will get lots of data from the database, for each HTTP call).
 * *  As this manages users, for security reasons, we'd rather have a DTO layer.
 *
 * Another option would be to have a specific JPA entity graph to handle this case.
 */
@RestController
@RequestMapping("/api/admin")
class UserResource(
    private val userService: UserService<%_ if (authenticationType !== 'oauth2') { _%>,
    private val userRepository: UserRepository,
    private val mailService: MailService<% } %>
) {

    <%_ if (authenticationType !== 'oauth2') { _%>
    companion object { 
        private val ALLOWED_ORDERED_PROPERTIES = arrayOf("id", "login", "firstName", "lastName", "email", "activated", "langKey")
    }
    <%_ } _%>


    private val log = LoggerFactory.getLogger(javaClass)

    @Value("\${jhipster.clientApp.name}")
    private val applicationName: String? = null

<%_ if (authenticationType !== 'oauth2') { _%>
    /**
     * `POST  /admin/users`  : Creates a new user.
     *
     * Creates a new user if the login and email are not already used, and sends an
     * mail with an activation link.
     * The user needs to be activated on creation.
     *
     * @param userDTO the user to create.
     * @return the `ResponseEntity` with status `201 (Created)` and with body the new user, or with status `400 (Bad Request)` if the login or email is already in use.
    <%_ if (!reactive) { _%>
     * @throws URISyntaxException if the Location URI syntax is incorrect.
    <%_ } _%>
     * @throws BadRequestAlertException `400 (Bad Request)` if the login or email is already in use.
     */
    @PostMapping("/users")
    @PreAuthorize("hasAuthority(\"$ADMIN\")")
    <%_ if (!reactive) { _%>
    @Throws(URISyntaxException::class)
    <%_ } _%>
    fun createUser(@Valid @RequestBody userDTO: <%= asDto('User') %>): <% if (reactive) { %>Mono<ResponseEntity<<%= asEntity('User') %>>><% } else { %>ResponseEntity<<%= asEntity('AdminUser') %>><% } %> {
        log.debug("REST request to save User : $userDTO")

        if (userDTO.id != null) {
            throw BadRequestAlertException("A new user cannot already have an ID", "userManagement", "idexists")
            // Lowercase the user login before comparing with database
        <%_ if (!reactive) { _%>
        } else if (userRepository.findOneByLogin(userDTO.login!!.toLowerCase()).isPresent) {
            throw LoginAlreadyUsedException()
        } else if (userRepository.findOneByEmailIgnoreCase(userDTO.email).isPresent) {
            throw EmailAlreadyUsedException()
        } else {
            val newUser = userService.createUser(userDTO)
            mailService.sendCreationEmail(newUser)
            return ResponseEntity.created(URI("/api/admin/users/" + newUser.login))
                .headers(HeaderUtil.createAlert(applicationName, <% if (enableTranslation) {%>"userManagement.created"<% } else { %> "A user is created with identifier $newUser.login"<% } %>, newUser.login))
                .body(newUser)
        }
        <%_ } else { _%>
        }
        return userRepository.findOneByLogin(userDTO.login!!.toLowerCase())
            .hasElement()
            .flatMap { loginExists ->
                if (loginExists!!) {
                    throw LoginAlreadyUsedException()
                }
                userRepository.findOneByEmailIgnoreCase(userDTO.email!!)
            }
            .hasElement()
            .flatMap { emailExists ->
                if (emailExists!!) {
                    throw EmailAlreadyUsedException()
                }
                userService.createUser(userDTO)
            }
            .doOnSuccess(mailService::sendCreationEmail)
            .map { user ->
                try {
                    ResponseEntity.created(URI("/api/admin/users/" + user.login))
                        .headers(HeaderUtil.createAlert(applicationName, "userManagement.created", user.login))
                        .body(user)
                } catch (e: URISyntaxException) {
                    throw RuntimeException(e)
                }
            }
        <%_ } _%>
    }

    /**
     * `PUT /admin/users` : Updates an existing User.
     *
     * @param userDTO the user to update.
     * @return the `ResponseEntity` with status `200 (OK)` and with body the updated user.
     * @throws EmailAlreadyUsedException `400 (Bad Request)` if the email is already in use.
     * @throws LoginAlreadyUsedException `400 (Bad Request)` if the login is already in use.
     */
    @PutMapping("/users")
    @PreAuthorize("hasAuthority(\"$ADMIN\")")
    <%_ if (!reactive) { _%>
    fun updateUser(@Valid @RequestBody userDTO: <%= asDto('AdminUser') %>): ResponseEntity<<%= asDto('AdminUser') %>> {
        log.debug("REST request to update User : $userDTO")
        var existingUser = userRepository.findOneByEmailIgnoreCase(userDTO.email)
        if (existingUser.isPresent && existingUser.get().id != userDTO.id) {
            throw EmailAlreadyUsedException()
        }
        existingUser = userRepository.findOneByLogin(userDTO.login!!.toLowerCase())
        if (existingUser.isPresent && existingUser.get().id != userDTO.id) {
            throw LoginAlreadyUsedException()
        }
        val updatedUser = userService.updateUser(userDTO)

        return ResponseUtil.wrapOrNotFound(
            updatedUser,
            HeaderUtil.createAlert(applicationName, <% if (enableTranslation) { %>"userManagement.updated"<% } else { %>"A user is updated with identifier $userDTO.login"<% } %>, userDTO.login)
        )
    <%_ } else { _%>
    fun updateUser(@Valid @RequestBody userDTO: <%= asDto('AdminUser') %>) : Mono<ResponseEntity<<%= asDto('AdminUser') %>>> {
        log.debug("REST request to update User : $userDTO")
        return userRepository.findOneByEmailIgnoreCase(userDTO.email!!)
            .filter { user -> user.id != userDTO.id }
            .hasElement()
            .flatMap { emailExists ->
                if (emailExists!!) {
                    throw EmailAlreadyUsedException()
                }
                userRepository.findOneByLogin(userDTO.login!!.toLowerCase())
            }
            .filter { user -> user.id != userDTO.id }
            .hasElement()
            .flatMap { loginExists ->
                if (loginExists!!) {
                    throw LoginAlreadyUsedException()
                }
                userService.updateUser(userDTO)
            }
            .switchIfEmpty(Mono.error(ResponseStatusException(HttpStatus.NOT_FOUND)))
            .map { user ->
                ResponseEntity.ok()
                    .headers(HeaderUtil.createAlert(applicationName, "userManagement.updated", userDTO.login))
                    .body(user)
            }
    <%_ } _%>
    }

<%_ } _%>
    /**
     * `GET /admin/users` : get all users with all the details - calling this are only allowed for the administrators.
     *<% if (databaseType === 'sql' || databaseType === 'mongodb' || databaseType === 'neo4j' || databaseType === 'couchbase') { %>
     <%_ if (reactive) { _%>
     * @param request a [ServerHttpRequest] request.
     <%_ } _%>
     * @param pageable the pagination information.<% } %>
     * @return the `ResponseEntity` with status `200 (OK)` and with body all users.
     */
    @GetMapping("/users")
    @PreAuthorize("hasAuthority(\"" + AuthoritiesConstants.ADMIN + "\")")
    <%_ if (databaseType === 'sql' || databaseType === 'mongodb' || databaseType === 'neo4j' || databaseType === 'couchbase') { _%>
        <%_ if (!reactive) { _%>
    fun getAllUsers(pageable: Pageable): ResponseEntity<List<<%= asDto('AdminUser') %>>> {
        log.debug("REST request to get all User for an admin");
        <%_ if (authenticationType !== 'oauth2') { _%>
            if (!onlyContainsAllowedProperties(pageable)) {
                return ResponseEntity.badRequest().build()
            }
        <%_ } _%>
        val page = userService.getAllManagedUsers(pageable)
        val headers = PaginationUtil.generatePaginationHttpHeaders(ServletUriComponentsBuilder.fromCurrentRequest(), page)
        return ResponseEntity(page.content, headers, HttpStatus.OK)
    }
        <%_ } else { _%>
    fun getAllUsers(
        request: ServerHttpRequest,
        pageable: Pageable
    ): Mono<ResponseEntity<Flux<<%= asDto('AdminUser') %>>>> {
            log.debug("REST request to get all User for an admin");
            <%_ if (authenticationType !== 'oauth2') { _%>
            if (!onlyContainsAllowedProperties(pageable)) {
                return Mono.just(ResponseEntity.badRequest().build())
            }
            <%_ } _%>

        return userService.countManagedUsers()
            .map { total -> PageImpl(mutableListOf<<%= asDto('User') %>>(), pageable, total!!) }
            .map { page -> PaginationUtil.generatePaginationHttpHeaders(UriComponentsBuilder.fromHttpRequest(request), page) }
            .map { headers -> ResponseEntity.ok().headers(headers).body(userService.getAllManagedUsers(pageable)) }
    }
        <%_ } _%>
    <%_ if (authenticationType !== 'oauth2') { _%>
    private fun onlyContainsAllowedProperties(pageable: Pageable) = 
        pageable.sort.map(Sort.Order::getProperty).all { ALLOWED_ORDERED_PROPERTIES.contains(it) }
    <%_ } _%>

    <%_ } else { // Cassandra _%>
    fun getAllUsers() = userService.getAllManagedUsers()
    <%_ } _%>

    /**
     * `GET /admin/users/:login` : get the "login" user.
     *
     * @param login the login of the user to find.
     * @return the `ResponseEntity` with status `200 (OK)` and with body the "login" user, or with status `404 (Not Found)`.
     */
    @GetMapping("/users/{login}")
    @PreAuthorize("hasAuthority(\"" + AuthoritiesConstants.ADMIN + "\")")
    <%_ if (!reactive) { _%>
    fun getUser(@PathVariable @Pattern(regexp = Constants.LOGIN_REGEX) login: String): ResponseEntity<<%= asDto('AdminUser') %>> {
        log.debug("REST request to get User : $login")
        return ResponseUtil.wrapOrNotFound(
            userService.getUserWithAuthoritiesByLogin(login)
                .map { <%= asDto('AdminUser') %>(it) })
    <%_ } else { _%>
    fun getUser(@PathVariable login: String): Mono<<%= asDto('AdminUser') %>> {
        log.debug("REST request to get User : $login")
        return userService.getUserWithAuthoritiesByLogin(login)
            .map { <%= asDto('AdminUser') %>(it) }
            .switchIfEmpty(Mono.error(ResponseStatusException(HttpStatus.NOT_FOUND)))
    <%_ } _%>
    }
<%_ if (authenticationType !== 'oauth2') { _%>

    /**
     * `DELETE /admin/users/:login` : delete the "login" User.
     *
     * @param login the login of the user to delete.
     * @return the `ResponseEntity` with status `204 (NO_CONTENT)`.
     */
    @DeleteMapping("/users/{login}")
    @PreAuthorize("hasAuthority(\"$ADMIN\")")
    <%_ if (!reactive) { _%>
    fun deleteUser(@PathVariable @Pattern(regexp = Constants.LOGIN_REGEX) login: String): ResponseEntity<Void> {
        log.debug("REST request to delete User: $login")
        userService.deleteUser(login)
        return ResponseEntity.noContent()
            .headers(HeaderUtil.createAlert(applicationName, <% if (enableTranslation) {%>"userManagement.deleted"<% } else { %> "A user is deleted with identifier $login"<% } %>, login)).build()
    <%_ } else { _%>
    @ResponseStatus(code = HttpStatus.NO_CONTENT)
    fun deleteUser(@PathVariable @Pattern(regexp = Constants.LOGIN_REGEX) login: String): Mono<ResponseEntity<Void>> {
        log.debug("REST request to delete User: $login")
        return userService.deleteUser(login)
            .map { ResponseEntity.noContent().headers(HeaderUtil.createAlert(applicationName, "userManagement.deleted", login)).build<Void>() }
    <%_ } _%>
    }
<%_ } _%>
}
