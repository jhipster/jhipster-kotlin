<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.web.rest.errors

import tech.jhipster.config.JHipsterConstants
import tech.jhipster.web.util.HeaderUtil

import org.apache.commons.lang3.StringUtils
import org.springframework.beans.factory.annotation.Value
<%_ if (databaseType !== 'no' && databaseType !== 'cassandra') { _%>
import org.springframework.dao.ConcurrencyFailureException
<%_ } _%>
<%_ if (databaseType !== 'no') { _%>
import org.springframework.dao.DataAccessException
<%_ } _%>
import org.springframework.http.ResponseEntity
import org.springframework.http.converter.HttpMessageConversionException
<%_ if (reactive && databaseType === 'sql') { _%>
import org.springframework.stereotype.Component
<%_ } _%>
<%_ if (!reactive) { _%>
import org.springframework.web.bind.MethodArgumentNotValidException
<%_ } _%>
import org.springframework.web.bind.annotation.ControllerAdvice
import org.springframework.web.bind.annotation.ExceptionHandler
<%_ if (reactive) { _%>
import org.springframework.web.bind.support.WebExchangeBindException
import org.springframework.web.server.ServerWebExchange
<%_ } _%>
<%_ if (!reactive) { _%>
import org.springframework.web.context.request.NativeWebRequest
<%_ } _%>
import org.springframework.core.env.Environment
import org.zalando.problem.DefaultProblem
import org.zalando.problem.Problem
import org.zalando.problem.ProblemBuilder
import org.zalando.problem.Status
import org.zalando.problem.StatusType
import org.zalando.problem.spring.web<% if (reactive) { %>flux<% } %>.advice.ProblemHandling
import org.zalando.problem.spring.web<% if (reactive) { %>flux<% } %>.advice.security.SecurityAdviceTrait
import org.zalando.problem.violations.ConstraintViolationProblem
<%_ if (reactive) { _%>
import reactor.core.publisher.Mono
<%_ } _%>

<%_ if (!reactive) { _%>
import javax.servlet.http.HttpServletRequest
<%_ } _%>
import java.net.URI

private const val FIELD_ERRORS_KEY = "fieldErrors"
private const val MESSAGE_KEY = "message"
private const val PATH_KEY = "path"
private const val VIOLATIONS_KEY = "violations"

/**
 * Controller advice to translate the server side exceptions to client-friendly json structures.
 * The error response follows RFC7807 - Problem Details for HTTP APIs (https://tools.ietf.org/html/rfc7807).
 */
@ControllerAdvice
<%_ if (databaseType === 'sql' && reactive) { _%>
@Component("jhiExceptionTranslator")
<%_ } _%>
class ExceptionTranslator(private val env: Environment) : ProblemHandling, SecurityAdviceTrait {
<%_
let returnType;
let requestClass;
if (reactive) {
    returnType = 'Mono<ResponseEntity<Problem>>';
    requestClass = 'ServerWebExchange';
} else {
    returnType = 'ResponseEntity<Problem>?';
    requestClass = 'NativeWebRequest';
}
_%>

    @Value("\${jhipster.clientApp.name}")
    private val applicationName: String? = null

    /**
     * Post-process the Problem payload to add the message key for the front-end if needed.
     */
    override fun process(entity: ResponseEntity<Problem>?, request: <%= requestClass %>?): <%- returnType %> {
        if (entity == null) {
            <%_ if (!reactive) { _%>
            return null
            <%_ } else { _%>
            return Mono.empty()
            <%_ } _%>
        }
        val problem = entity.body
        if (!(problem is ConstraintViolationProblem || problem is DefaultProblem)) {
            <%_ if (!reactive) { _%>
            return entity
            <%_ } else { _%>
            return Mono.just(entity)
            <%_ } _%>
        }
        val builder = Problem.builder()
            .withType(if (Problem.DEFAULT_TYPE == problem.type) DEFAULT_TYPE else problem.type)
            .withStatus(problem.status)
            .withTitle(problem.title)
            <%_ if (!reactive) { _%>
            .with(PATH_KEY, request!!.getNativeRequest(HttpServletRequest::class.java)!!.requestURI)
            <%_ } else { _%>
            .with(PATH_KEY, request!!.request.path.value())
            <%_ } _%>

        if (problem is ConstraintViolationProblem) {
            builder
                .with(VIOLATIONS_KEY, problem.violations)
                .with(MESSAGE_KEY, ERR_VALIDATION)
        } else {
            builder
                .withCause((problem as DefaultProblem).cause)
                .withDetail(problem.detail)
                .withInstance(problem.instance)
            problem.parameters.forEach { (key, value) -> builder.with(key, value) }
            if (!problem.parameters.containsKey(MESSAGE_KEY) && problem.status != null) {
                builder.with(MESSAGE_KEY, "error.http." + problem.status!!.statusCode)
            }
        }
        return <% if (reactive) { %>Mono.just(<% } %>ResponseEntity<% if (reactive) { %><Problem><% } %>(builder.build(), entity.headers, entity.statusCode)<% if (reactive) { %>)<% } %>
    }

    <%_ if (!reactive) { _%>
    override fun handleMethodArgumentNotValid(
        ex: MethodArgumentNotValidException, request: <%= requestClass %>
    ): <%- returnType %> {
    <%_ } else { _%>
    override fun handleBindingResult(
        ex: WebExchangeBindException, request: <%= requestClass %>)
    : <%- returnType %>  {
    <%_ } _%>
        val result = ex.bindingResult
        val fieldErrors = result.fieldErrors.map { FieldErrorVM(it.objectName.replaceFirst(Regex("<%= dtoSuffix %>$"), ""), it.field, it.code) }

        val problem = Problem.builder()
            .withType(CONSTRAINT_VIOLATION_TYPE)
            .withTitle("<%_ if (!reactive) { _%>Method argument not valid<% } else { %>Data binding and validation failure<% } %>")
            .withStatus(<% if (!reactive) { %>defaultConstraintViolationStatus()<% } else { %>Status.BAD_REQUEST<% } %>)
            .with(MESSAGE_KEY, ERR_VALIDATION)
            .with(FIELD_ERRORS_KEY, fieldErrors)
            .build()
        return create(ex, problem, request)
    }

    <%_ if (!skipUserManagement) { _%>
    @ExceptionHandler
    fun handleEmailAlreadyUsedException(ex: <%= packageName %>.service.EmailAlreadyUsedException, request: <%= requestClass %>): <%- returnType %> {
        val problem = EmailAlreadyUsedException()
        return create(problem, request, HeaderUtil.createFailureAlert(applicationName,  <%= enableTranslation %>, problem.entityName, problem.errorKey, problem.message))
    }

    @ExceptionHandler
    fun handleUsernameAlreadyUsedException(ex: <%= packageName %>.service.UsernameAlreadyUsedException, request: <%= requestClass %>): <%- returnType %> {
        val problem = LoginAlreadyUsedException()
        return create(problem, request, HeaderUtil.createFailureAlert(applicationName,  <%= enableTranslation %>, problem.entityName, problem.errorKey, problem.message))
    }

    @ExceptionHandler
    fun handleInvalidPasswordException(ex: <%= packageName %>.service.InvalidPasswordException, request: <%= requestClass %>): <%- returnType %> {
        return create(InvalidPasswordException(), request)
    }
    <%_ } _%>

    @ExceptionHandler
    fun handleBadRequestAlertException(
        ex: BadRequestAlertException,
        request: <%= requestClass %>
    ): <%- returnType %> =
        create(
            ex, request,
            HeaderUtil.createFailureAlert(applicationName, <%= enableTranslation %>, ex.entityName, ex.errorKey, ex.message)
        )
    <%_ if (databaseType !== 'no' && databaseType !== 'cassandra') { _%>

    @ExceptionHandler
    fun handleConcurrencyFailure(ex: ConcurrencyFailureException, request: <%= requestClass %>): <%- returnType %> {
        val problem = Problem.builder()
            .withStatus(Status.CONFLICT)
            .with(MESSAGE_KEY, ERR_CONCURRENCY_FAILURE)
            .build()
        return create(ex, problem, request)
    }
    <%_ } _%>

    override fun prepare(throwable: Throwable, status: StatusType, type: URI): ProblemBuilder {
        val activeProfiles = env.activeProfiles
        var detail = throwable.message
        if (activeProfiles.contains(JHipsterConstants.SPRING_PROFILE_PRODUCTION)) {
            detail = when (throwable) {
                is HttpMessageConversionException -> "Unable to convert http message"
                <%_ if (databaseType !== 'no') { _%>
                is DataAccessException -> "Failure during data access"
                <%_ } _%>
                else -> {
                    if (containsPackageName(throwable.message)) {
                        "Unexpected runtime exception"
                    } else {
                        throwable.message
                    }
                }
            }
        }
        return Problem.builder()
            .withType(type)
            .withTitle(status.reasonPhrase)
            .withStatus(status)
            .withDetail(detail)
            .withCause(throwable.cause.takeIf { isCausalChainsEnabled }?.let { toProblem(it) })
    }

    private fun containsPackageName(message: String?) = listOf("org.", "java.", "net.", "javax.", "com.", "io.", "de.", "<%= packageName %>").any { it == message }
}
