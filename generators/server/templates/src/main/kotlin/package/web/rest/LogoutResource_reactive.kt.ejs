<%#
 Copyright 2013-2018 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.web.rest

import org.springframework.http.ResponseEntity
import org.springframework.security.core.annotation.AuthenticationPrincipal
import org.springframework.security.oauth2.client.registration.ClientRegistration
import org.springframework.security.oauth2.client.registration.ReactiveClientRegistrationRepository
import org.springframework.security.oauth2.core.oidc.OidcIdToken
import org.springframework.web.bind.annotation.PostMapping
import org.springframework.web.bind.annotation.RestController

import org.springframework.web.server.WebSession
import org.springframework.http.server.reactive.ServerHttpRequest
import reactor.core.publisher.Mono

/**
 * REST controller for managing global OIDC logout.
 */
@RestController
class LogoutResource(
    private val registrations: <% if (reactive) { %>Reactive<% } %>ClientRegistrationRepository
) {
    private val registration = registrations.findByRegistrationId("oidc")

    /**
     * `POST  /api/logout` : logout the current user.
     *
     * @param idToken the ID token.
     * @param request a {@link ServerHttpRequest} request.
     * @param session the current {@link WebSession}.
      * @return the [ResponseEntity] with status `200 (OK)` and a body with a global logout URL.
     */
    @PostMapping("/api/logout")
    fun logout(@AuthenticationPrincipal(expression = "idToken") idToken: OidcIdToken, request: ServerHttpRequest, session: WebSession): Mono<Map<String, String>>  {
        return session.invalidate().then(
            registration.map { 
                prepareLogoutUri(request, it, idToken)
            }
        )
    }

    private fun prepareLogoutUri(request: ServerHttpRequest, clientRegistration: ClientRegistration, idToken: OidcIdToken): Map<String, String> {
        val logoutUrl = StringBuilder()
        val issuerUri = clientRegistration.providerDetails.issuerUri
        if (issuerUri.contains("auth0.com")) {
            val iUrl = if (issuerUri.endsWith("/")) { 
                issuerUri + "v2/logout"
            } else { 
                "$issuerUri/v2/logout"
            }
            logoutUrl.append(iUrl)
        } else {
            logoutUrl.append(clientRegistration.providerDetails.configurationMetadata["end_session_endpoint"].toString())
        }

        val originUrl = request.headers.origin
        if (issuerUri.contains("auth0.com")) {
            logoutUrl.append("?client_id=").append(clientRegistration.clientId).append("&returnTo=").append(originUrl)
        } else {
            logoutUrl.append("?id_token_hint=").append(idToken.tokenValue).append("&post_logout_redirect_uri=").append(originUrl)
        }
        return mapOf("logoutUrl" to logoutUrl.toString())
    }
}
