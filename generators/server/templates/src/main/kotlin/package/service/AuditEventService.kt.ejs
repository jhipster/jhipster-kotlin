<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.service

import io.github.jhipster.config.JHipsterProperties
import <%=packageName%>.config.audit.AuditEventConverter
<%_ if (reactive) { _%>
import <%= packageName %>.domain.PersistentAuditEvent
<%_ } _%>
import <%=packageName%>.repository.<% if (reactive) { %>reactive.<% } %>PersistenceAuditEventRepository
import org.slf4j.Logger
import org.slf4j.LoggerFactory
import org.springframework.boot.actuate.audit.AuditEvent
<%_ if (!reactive) { _%>
import org.springframework.data.domain.Page
<%_ } _%>
import org.springframework.data.domain.Pageable
import org.springframework.scheduling.annotation.Scheduled
import org.springframework.stereotype.Service
<%_ if (databaseType === 'sql') { _%>
import org.springframework.transaction.annotation.Transactional
<%_ } _%>
<%_ if (reactive) { _%>
import reactor.core.publisher.Flux
import reactor.core.publisher.Mono
<%_ } _%>
import java.time.Instant
import java.time.temporal.ChronoUnit
<%_ if (!reactive) { _%>
import java.util.Optional
<%_ } _%>
<%_ if (reactive) { _%>
import java.util.HashMap
import java.util.Map

import org.springframework.boot.actuate.security.AuthenticationAuditListener.AUTHENTICATION_FAILURE
import org.springframework.boot.actuate.security.AuthenticationAuditListener.AUTHENTICATION_SUCCESS
<%_ } _%>

/**
 * Service for managing audit events.
 *
 * This is the default implementation to support SpringBoot Actuator `AuditEventRepository`.
 */
@Service<% if (databaseType === 'sql') { %>
@Transactional<% } %>
class AuditEventService(
    private val persistenceAuditEventRepository: PersistenceAuditEventRepository,
    private val auditEventConverter: AuditEventConverter,
    private val jHipsterProperties: JHipsterProperties
) {

    <%_ if (reactive) { _%>
    /**
    * Should be the same as in Liquibase migration.
    */
    private val EVENT_DATA_COLUMN_MAX_LENGTH = 255
    <%_ } _%>

    private val log = LoggerFactory.getLogger(javaClass)

    /**
    * Old audit events should be automatically deleted after 30 days.
    *
    * This is scheduled to get fired at 12:00 (am).
    */
    @Scheduled(cron = "0 0 12 * * ?")
    fun removeOldAuditEvents() {
        persistenceAuditEventRepository
            .findByAuditEventDateBefore(Instant.now().minus(jHipsterProperties.auditEvents.retentionPeriod.toLong(), ChronoUnit.DAYS))
            <%_ if (!reactive) { _%>
            .forEach{
                log.debug("Deleting audit data {}", it)
                persistenceAuditEventRepository.delete(it)
            }
            <%_ } else { _%>
            .flatMap {
                log.debug("Deleting audit data {}", it);
                persistenceAuditEventRepository.delete(it);
            }.blockLast()
            <%_ } _%>
    }

    fun findAll(pageable: Pageable): <% if (reactive) { %>Flux<% } else { %>Page<% } %><AuditEvent> =
        persistenceAuditEventRepository.findAll<% if (reactive) { %>By<% } %>(pageable)
            .map { auditEventConverter.convertToAuditEvent(it) }

    fun findByDates(fromDate: Instant, toDate: Instant, pageable: Pageable): <% if (reactive) { %>Flux<% } else { %>Page<% } %><AuditEvent> =
        persistenceAuditEventRepository.findAllByAuditEventDateBetween(fromDate, toDate, pageable)
            .map { auditEventConverter.convertToAuditEvent(it) }

    fun find(id: <% if (databaseType === 'sql') { %>Long<% } %><% if (databaseType === 'mongodb' || databaseType === 'couchbase') { %>String<% } %>): <% if (reactive) { %>Mono<% } else { %>Optional<% } %><AuditEvent> =
        persistenceAuditEventRepository.findById(id)
            .map { auditEventConverter.convertToAuditEvent(it) }

    <%_ if (reactive) { _%>

    fun count(): Mono<Long> {
        return persistenceAuditEventRepository.count()
    }

    fun countByDates(fromDate: Instant, toDate: Instant): Mono<Long> {
        return persistenceAuditEventRepository.countByAuditEventDateBetween(fromDate, toDate)
    }

    fun saveAuthenticationSuccess(login: String): Mono<PersistentAuditEvent>  {
        val persistentAuditEvent = PersistentAuditEvent()
        persistentAuditEvent.principal = login
        persistentAuditEvent.auditEventType = AUTHENTICATION_SUCCESS
        persistentAuditEvent.auditEventDate = Instant.now()
        return persistenceAuditEventRepository.save(persistentAuditEvent)
    }

    fun saveAuthenticationError(login: String, e: Throwable): Mono<PersistentAuditEvent> {
        val persistentAuditEvent = PersistentAuditEvent()
        persistentAuditEvent.principal = login
        persistentAuditEvent.auditEventType = AUTHENTICATION_FAILURE
        persistentAuditEvent.auditEventDate = Instant.now()
        val eventData = mutableMapOf<String, String?>()
        eventData["type"] = e::class.java.name
        eventData["message"] = e.message
        persistentAuditEvent.data = truncate(eventData)
        return persistenceAuditEventRepository.save(persistentAuditEvent)
    }

    /**
     * Truncate event data that might exceed column length.
     */
    private fun truncate(data: MutableMap<String, String?>): MutableMap<String, String?> {
        val results = mutableMapOf<String, String?>()
        data.entries.forEach {
            var value = it.value
            if (value != null) {
                val length = value.length
                if (length > EVENT_DATA_COLUMN_MAX_LENGTH) {
                    value = value.substring(0, EVENT_DATA_COLUMN_MAX_LENGTH)
                    log.warn("Event data for {} too long ({}) has been truncated to {}. Consider increasing column width.",
                        it.key, length, EVENT_DATA_COLUMN_MAX_LENGTH)
                }
            }
            results[it.key] = value
        }
        return results
    }
    <%_ } _%>
}
