<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.service

import <%= packageName %>.config.KafkaProperties
import org.apache.kafka.clients.consumer.KafkaConsumer
import org.apache.kafka.common.errors.WakeupException
import org.slf4j.LoggerFactory
import org.springframework.stereotype.Service
import java.time.Duration
import java.util.Collections.singletonList
import java.util.concurrent.atomic.AtomicBoolean

private const val TOPIC = "topic_<%= baseName.toLowerCase() %>"

@Service
class <%= upperFirstCamelCase(baseName) %>KafkaConsumer(private val kafkaProperties: KafkaProperties) {

    private val log = LoggerFactory.getLogger(javaClass)

    private val closed = AtomicBoolean(false)
    private lateinit var kafkaConsumer: KafkaConsumer<String, String>
    fun start() {
        log.info("Kafka consumer starting...")
        this.kafkaConsumer = KafkaConsumer(kafkaProperties.getConsumerProps()!!)
        Runtime.getRuntime().addShutdownHook(Thread(Runnable { this.shutdown() }))

        val consumerThread = Thread {
            try {
                kafkaConsumer.subscribe(singletonList(TOPIC))
                log.info("Kafka consumer started")
                while (!closed.get()) {
                    val records = kafkaConsumer.poll(Duration.ofSeconds(3))
                    for (record in records) {
                        log.info("Consumed message in {} : {}", TOPIC, record.value())
                    }
                }
                kafkaConsumer.commitSync()
            } catch (e: WakeupException) {
                // Ignore exception if closing
                if (!closed.get()) throw e
            } catch (e: Exception) {
                log.error(e.message, e)
            } finally {
                kafkaConsumer.close()
            }
        }
        consumerThread.start()
    }

    fun getKafkaConsumer(): KafkaConsumer<String, String> {
        return kafkaConsumer
    }

    fun shutdown() {
        log.info("Shutdown Kafka consumer")
        closed.set(true)
        kafkaConsumer.wakeup()
    }
}
