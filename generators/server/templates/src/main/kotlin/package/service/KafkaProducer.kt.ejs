<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.service

import <%=packageName%>.config.KafkaProperties
import org.apache.kafka.clients.producer.KafkaProducer
import org.slf4j.LoggerFactory
import org.springframework.stereotype.Service
import org.apache.kafka.clients.producer.ProducerRecord

private const val TOPIC = "topic_<%= baseName.toLowerCase() %>"

@Service
class <%= upperFirstCamelCase(baseName) %>KafkaProducer(private val kafkaProperties: KafkaProperties) {

  private val log = LoggerFactory.getLogger(javaClass)

  private lateinit var kafkaProducer: KafkaProducer<String, String>

  fun init() {
      log.info("Kafka producer initializing...")
      kafkaProducer = KafkaProducer(kafkaProperties.getProducerProps())
      Runtime.getRuntime().addShutdownHook(Thread{
          this.shutdown()
      })
      log.info("Kafka producer initialized")

  }

  fun send(message: String) {
      val record = ProducerRecord<String, String>(TOPIC, message)
      try {
          kafkaProducer.send(record)
      } catch (e: Exception) {
          log.error(e.message, e)
      }
  }

  fun shutdown() {
      log.info("Shutdown Kafka producer")
      kafkaProducer.close()
  }
}
