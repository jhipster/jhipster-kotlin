<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.service

import <%= packageName %>.domain.<%= asEntity('User') %>

import tech.jhipster.config.JHipsterProperties

import java.nio.charset.StandardCharsets
import java.util.Locale
import javax.mail.MessagingException

import org.slf4j.LoggerFactory
import org.springframework.context.MessageSource
import org.springframework.mail.MailException
import org.springframework.mail.javamail.JavaMailSender
import org.springframework.mail.javamail.MimeMessageHelper
import org.springframework.scheduling.annotation.Async
import org.springframework.stereotype.Service
import org.thymeleaf.context.Context
import org.thymeleaf.spring5.SpringTemplateEngine

private const val USER = "user"
private const val BASE_URL = "baseUrl"

/**
 * Service for sending emails.
 *
 * We use the [Async] annotation to send emails asynchronously.
 */
@Service
class MailService(
    private val jHipsterProperties: JHipsterProperties,
    private val javaMailSender: JavaMailSender,
    private val messageSource: MessageSource,
    private val templateEngine: SpringTemplateEngine
) {

    private val log = LoggerFactory.getLogger(javaClass)

    @Async
    fun sendEmail(to: String, subject: String, content: String, isMultipart: Boolean, isHtml: Boolean) {
        log.debug(
            "Send email[multipart '$isMultipart' and html '$isHtml'] to '$to' with subject '$subject' and content=$content"
        )

        // Prepare message using a Spring helper
        val mimeMessage = javaMailSender.createMimeMessage()
        try {
            MimeMessageHelper(mimeMessage, isMultipart, StandardCharsets.UTF_8.name()).apply {
                setTo(to)
                setFrom(jHipsterProperties.mail.from)
                setSubject(subject)
                setText(content, isHtml)
            }
            javaMailSender.send(mimeMessage)
            log.debug("Sent email to User '$to'")
        } catch (e: MailException) {
            log.warn("Email could not be sent to user '$to'", e)
        } catch (e: MessagingException) {
            log.warn("Email could not be sent to user '$to'", e)
        }
    }

    @Async
    fun sendEmailFromTemplate(user: <%= asEntity('User') %>, templateName: String, titleKey: String) {
        if (user.email == null) {
            log.debug("Email doesn't exist for user '${user.login}'")
            return
        }
        val locale = Locale.forLanguageTag(user.langKey)
        val context = Context(locale).apply {
            setVariable(USER, user)
            setVariable(BASE_URL, jHipsterProperties.mail.baseUrl)
        }
        val content = templateEngine.process(templateName, context)
        val subject = messageSource.getMessage(titleKey, null, locale)
        sendEmail(user.email!!, subject, content, isMultipart = false, isHtml = true)
    }
    <%_ if (authenticationType !== 'oauth2') { _%>

    @Async
    fun sendActivationEmail(user: <%= asEntity('User') %>) {
        log.debug("Sending activation email to '${user.email}'")
        sendEmailFromTemplate(user, "mail/activationEmail", "email.activation.title")
    }

    @Async
    fun sendCreationEmail(user: <%= asEntity('User') %>) {
        log.debug("Sending creation email to '${user.email}'")
        sendEmailFromTemplate(user, "mail/creationEmail", "email.activation.title")
    }

    @Async
    fun sendPasswordResetMail(user: <%= asEntity('User') %>) {
        log.debug("Sending password reset email to '${user.email}'")
        sendEmailFromTemplate(user, "mail/passwordResetEmail", "email.reset.title")
    }
    <%_ } _%>
}
