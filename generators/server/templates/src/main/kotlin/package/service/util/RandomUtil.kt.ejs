<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
@file:JvmName("RandomUtil")

package <%=packageName%>.service.util

import java.security.SecureRandom
import org.apache.commons.lang3.RandomStringUtils

private const val DEF_COUNT = 20

private val secureRandom: SecureRandom = SecureRandom().apply{ nextBytes(ByteArray(64)) }

private fun generateRandomAlphanumericString() = RandomStringUtils.random(DEF_COUNT, 0, 0, true, true, null, secureRandom)

/**
* Generate a password.
*
* @return the generated password.
*/
fun generatePassword() = generateRandomAlphanumericString()

/**
* Generate an activation key.
*
* @return the generated activation key.
*/
fun generateActivationKey() = generateRandomAlphanumericString()

/**
* Generate a reset key.
*
* @return the generated reset key.
*/
fun generateResetKey(): String = generateRandomAlphanumericString()
<%_ if (authenticationType === 'session' && !reactive) { _%>

/**
* Generate a unique series to validate a persistent token, used in the
* authentication remember-me mechanism.
*
* @return the generated series data.
*/
fun generateSeriesData(): String = generateRandomAlphanumericString()

/**
* Generate a persistent token, used in the authentication remember-me mechanism.
*
* @return the generated token data.
*/
fun generateTokenData(): String = generateRandomAlphanumericString()
<%_ } _%>
