<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.security.jwt

<%_ if (reactive) { _%>
import org.springframework.http.server.reactive.ServerHttpRequest
<%_ } _%>
<%_ if (reactive) { _%>
import org.springframework.security.core.context.ReactiveSecurityContextHolder
<%_ } else { _%>
import org.springframework.security.core.context.SecurityContextHolder
<%_ } _%>
<%_ if (reactive) { _%>
import org.springframework.web.server.ServerWebExchange
import org.springframework.web.server.WebFilter
import org.springframework.web.server.WebFilterChain
import reactor.core.publisher.Mono
<%_ } else { _%>
import org.springframework.web.filter.GenericFilterBean

import javax.servlet.FilterChain
import javax.servlet.ServletException
import javax.servlet.ServletRequest
import javax.servlet.ServletResponse
import javax.servlet.http.HttpServletRequest
import java.io.IOException
<%_ } _%>

/**
 * Filters incoming requests and installs a Spring Security principal if a header corresponding to a valid user is
 * found.
 */
class JWTFilter(private val tokenProvider: TokenProvider) <% if (!reactive) { %>: GenericFilterBean()<% } else { %>: WebFilter<% } %> {

    <%_ if (!reactive) { _%>
    @Throws(IOException::class, ServletException::class)
    override fun doFilter(servletRequest: ServletRequest, servletResponse: ServletResponse, filterChain: FilterChain) {
        val httpServletRequest = servletRequest as HttpServletRequest
        val jwt = resolveToken(httpServletRequest)
    <%_ } else { _%>
    override fun filter(exchange: ServerWebExchange, chain: WebFilterChain): Mono<Void> {
        val jwt = resolveToken(exchange.request)
    <%_ } _%>
        if (!jwt.isNullOrBlank() && this.tokenProvider.validateToken(jwt)) {
            val authentication = this.tokenProvider.getAuthentication(jwt)
        <%_ if (reactive) { _%>
            return chain.filter(exchange).subscriberContext(ReactiveSecurityContextHolder.withAuthentication(authentication))
        }
        return chain.filter(exchange)
        <%_ } else { _%>
            SecurityContextHolder.getContext().authentication = authentication
        }
        filterChain.doFilter(servletRequest, servletResponse)
        <%_ } _%>
    }

    private fun resolveToken(request: <% if (!reactive) { %>HttpServletRequest<% } else { %>ServerHttpRequest<% } %>): String? {
        val bearerToken = request.<% if (!reactive) { %>getHeader<% } else { %>headers.getFirst<% } %>(AUTHORIZATION_HEADER)
        if (!bearerToken.isNullOrBlank() && bearerToken.startsWith("Bearer ")) {
            return bearerToken.substring(7)
        }
        <%_ if (websocket === 'spring-websocket') { _%>
        val jwt = request.getParameter(AUTHORIZATION_TOKEN)
        if (!jwt.isNullOrBlank()) {
            return jwt
        }
        <%_ } _%>
        return null
    }

    companion object {
        const val AUTHORIZATION_HEADER = "Authorization"
        <%_ if (websocket === 'spring-websocket') { _%>

        const val AUTHORIZATION_TOKEN: String = "access_token"
        <%_ } _%>
    }
}
