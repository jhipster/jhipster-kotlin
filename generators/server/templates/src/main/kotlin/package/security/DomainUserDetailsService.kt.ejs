<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.security

import <%= packageName %>.domain.<%= asEntity('User') %>
import <%= packageName %>.repository.UserRepository
import org.hibernate.validator.internal.constraintvalidators.hv.EmailValidator
import org.slf4j.LoggerFactory
import org.springframework.security.core.authority.SimpleGrantedAuthority
<%_ if (reactive) { _%>
import org.springframework.security.core.userdetails.ReactiveUserDetailsService
<%_ } _%>
import org.springframework.security.core.userdetails.UserDetails
<%_ if (!reactive) { _%>
import org.springframework.security.core.userdetails.UserDetailsService
<%_ } _%>
import org.springframework.security.core.userdetails.UsernameNotFoundException
import org.springframework.stereotype.Component
<%_ if (databaseType === 'sql') { _%>
import org.springframework.transaction.annotation.Transactional
<%_ } _%>
<%_ if (reactive) { _%>
import reactor.core.publisher.Mono
<%_ } _%>

import java.util.Locale

/**
 * Authenticate a user from the database.
 */
@Component("userDetailsService")
class DomainUserDetailsService(private val userRepository: UserRepository) : <% if (reactive) { %>Reactive<% } %>UserDetailsService {

    private val log = LoggerFactory.getLogger(javaClass)

    <%_ if (databaseType === 'sql') { _%>
    @Transactional
    <%_ } _%>
    override fun <% if (!reactive) { %>loadUserByUsername(login: String): UserDetails<% } else { %>findByUsername(login: String): Mono<UserDetails> <% } %> {
        log.debug("Authenticating $login")

        if (EmailValidator().isValid(login, null)) {
            return userRepository.<% if (databaseType === 'sql') { %>findOneWithAuthoritiesByEmailIgnoreCase<% } else { %>findOneByEmailIgnoreCase<% } %>(login)
                <%_ if (reactive) { _%>
                .switchIfEmpty(Mono.error(UsernameNotFoundException("User with email $login was not found in the database")))
                <%_ } _%>
                .map { createSpringSecurityUser(login, it) }<% if (!reactive) { %>
                .orElseThrow { UsernameNotFoundException("User with email $login was not found in the database") }<% } %>
        }

        val lowercaseLogin = login.toLowerCase(Locale.ENGLISH)
        return userRepository.findOne<% if (databaseType === 'sql') { %>WithAuthorities<% } %>ByLogin(lowercaseLogin)
            <%_ if (reactive) { _%>
            .switchIfEmpty(Mono.error(UsernameNotFoundException("User $lowercaseLogin was not found in the database")))
            <%_ } _%>
            .map { createSpringSecurityUser(lowercaseLogin, it) }<% if (!reactive) { %>
            .orElseThrow { UsernameNotFoundException("User $lowercaseLogin was not found in the database") }<% } %>
    }

    private fun createSpringSecurityUser(lowercaseLogin: String, user: <%= asEntity('User') %>)
        : org.springframework.security.core.userdetails.User {
        if (user.activated == null || user.activated == false) {
            throw UserNotActivatedException("User $lowercaseLogin was not activated")
        }
        val grantedAuthorities = user.authorities.map { SimpleGrantedAuthority(it<% if (databaseType === 'sql' || databaseType === 'mongodb' || databaseType === 'neo4j') { %>.name<% } %>) }
        return org.springframework.security.core.userdetails.User(
            user.login!!,
            user.password!!,
            grantedAuthorities
        )
    }
}
