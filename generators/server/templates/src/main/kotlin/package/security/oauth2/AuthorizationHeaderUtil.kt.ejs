<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://jhipster.github.io/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.security.oauth2

import java.util.Optional

import org.springframework.security.core.context.SecurityContextHolder
import org.springframework.security.oauth2.client.OAuth2AuthorizedClient
import org.springframework.security.oauth2.client.OAuth2AuthorizedClientService
import org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken
import org.springframework.security.oauth2.core.OAuth2AccessToken
import org.springframework.stereotype.Component

@Component
class AuthorizationHeaderUtil(private val clientService: OAuth2AuthorizedClientService) {

    fun getAuthorizationHeader(): Optional<String> {
        val authentication = SecurityContextHolder.getContext().authentication
        val oauthToken = authentication as OAuth2AuthenticationToken
        val client: OAuth2AuthorizedClient = clientService.loadAuthorizedClient(
            oauthToken.authorizedClientRegistrationId,
            oauthToken.name
        )

        val accessToken: OAuth2AccessToken = client.accessToken ?: return Optional.empty()

        val tokenType = accessToken.tokenType.value
        val authorizationHeaderValue = "$tokenType ${accessToken.tokenValue}"
        return Optional.of(authorizationHeaderValue)
    }
}
