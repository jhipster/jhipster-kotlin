<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://jhipster.github.io/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.security.oauth2

import javax.servlet.http.Cookie

class CookieCollection : Collection<Cookie> {

    private val cookieMap = mutableMapOf<String, Cookie>()

    constructor()

    constructor(vararg cookies: Cookie) : this(cookies.asList())

    constructor(cookies: Collection<Cookie>) {
        addAll(cookies)
    }

    override val size: Int
        get() = cookieMap.size

    override fun isEmpty(): Boolean = cookieMap.isEmpty()

    override fun contains(element: Cookie) = cookieMap.containsValue(element)

    fun contains(element: String) = cookieMap.containsKey(element)

    override fun containsAll(elements: Collection<Cookie>) = containsAllStringOrCookie(elements)

    fun containsAll(elements: List<String>) = containsAllStringOrCookie(elements)

    fun containsAllStringOrCookie(elements: Collection<Any>): Boolean {
        for (o in elements) {
            if (!contains(o)) {
                return false
            }
        }
        return true
    }

    override fun iterator(): Iterator<Cookie> = cookieMap.values.iterator()

    fun toArray(): Array<Cookie> = cookieMap.values.toTypedArray()

    fun add(cookie: Cookie): Boolean {
        cookieMap[cookie.name] = cookie
        return true
    }

    fun remove(o: String) = cookieMap.remove(o) != null

    fun remove(o: Cookie) = cookieMap.remove(o.name) != null

    operator fun get(name: String): Cookie? = cookieMap[name]

    fun addAll(collection: Collection<Cookie>): Boolean {
        var result = false
        for (cookie in collection) {
            result = result or add(cookie)
        }
        return result
    }

    fun removeAll(collection: List<String>) = removeAllValues(collection)

    fun removeAll(collection: Collection<Cookie>) = removeAllValues(collection)

    fun removeAllValues(collection: Collection<Any>): Boolean {
        var result = false
        for (cookie in collection) {
            when (cookie) {
                is String -> result = result or remove(cookie)
                is Cookie -> result = result or remove(cookie)
            }
        }
        return result
    }

    fun retainAll(collection: Collection<Cookie>) = retainAllValues(collection)

    fun retainAll(collection: List<String>) = retainAllValues(collection)

    fun retainAllValues(collection: Collection<Any>): Boolean {
        var result = false
        val it = cookieMap.entries.iterator()
        while (it.hasNext()) {
            val e = it.next()
            if (!collection.contains(e.key) && !collection.contains(e.value)) {
                it.remove()
                result = true
            }
        }
        return result
    }

    fun clear() = cookieMap.clear()
}
