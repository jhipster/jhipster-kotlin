<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
@file:JvmName("SecurityUtils")

package <%=packageName%>.security

import org.springframework.security.core.GrantedAuthority
<%_ if (authenticationType === 'oauth2') { _%>
import org.springframework.security.core.authority.SimpleGrantedAuthority
<%_ } _%>
<%_ if (reactive) { _%>
import org.springframework.security.core.context.ReactiveSecurityContextHolder
import org.springframework.security.core.context.SecurityContext
<%_ } _%>
<%_ if (!reactive) { _%>
import org.springframework.security.core.context.SecurityContextHolder
<%_ } _%>
import org.springframework.security.core.userdetails.UserDetails
<%_ if (authenticationType === 'oauth2') { _%>
import org.springframework.security.oauth2.core.oidc.user.DefaultOidcUser
import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationToken
<%_ } _%>
<%_ if (reactive) { _%>
import reactor.core.publisher.Mono
<%_ } _%>
<%_ if (!reactive) { _%>

import java.util.Optional
<%_ } _%>

/**
 * Get the login of the current user.
 *
 * @return the login of the current user.
 */
fun getCurrentUserLogin(): <% if (!reactive) { %>Optional<% } else { %>Mono<% } %><String> =
    <%_ if (!reactive) { _%>
    Optional.ofNullable(SecurityContextHolder.getContext().authentication)
    <%_ } else { _%>
    ReactiveSecurityContextHolder.getContext()
        .map(SecurityContext::getAuthentication)
    <%_ } _%>
        .map { authentication ->
            when (val principal = authentication.principal) {
                is UserDetails -> principal.username
                <%_ if (authenticationType === 'oauth2') { _%>
                is JwtAuthenticationToken -> (authentication as JwtAuthenticationToken).token.claims as String
                is DefaultOidcUser -> {
                    if(principal.attributes.containsKey("preferred_username")) {
                        principal.attributes["preferred_username"].toString()
                    } else {
                        null
                    }
                }
                <%_ } _%>
                is String -> principal
                else -> null
            }
        }
<%_ if (authenticationType === 'jwt') { _%>

/**
 * Get the JWT of the current user.
 *
 * @return the JWT of the current user.
 */
fun getCurrentUserJWT(): <% if (!reactive) { %>Optional<% } else { %>Mono<% } %><String> =
    <%_ if (!reactive) { _%>
    Optional.ofNullable(SecurityContextHolder.getContext().authentication)
    <%_ } else { _%>
    ReactiveSecurityContextHolder.getContext()
        .map(SecurityContext::getAuthentication)
    <%_ } _%>
        .filter { it.credentials is String }
        .map { it.credentials as String }
<%_ } _%>

/**
 * Check if a user is authenticated.
 *
 * @return true if the user is authenticated, false otherwise.
 */
fun isAuthenticated(): <% if (!reactive) { %>Boolean<% } else { %>Mono<Boolean><% } %> =
    <%_ if (!reactive) { _%>
    Optional.ofNullable(SecurityContextHolder.getContext().authentication)
    <%_ } else { _%>
    ReactiveSecurityContextHolder.getContext()
        .map(SecurityContext::getAuthentication)
    <%_ } _%>
        .map { 
<%_ if (authenticationType === 'oauth2') { _%>
            val authorities = when (it) {
                    is JwtAuthenticationToken ->
                        extractAuthorityFromClaims(it.token.claims)
                    else ->
                        it.authorities
                }
<%_ } _%>
<%_ if (authenticationType !== 'oauth2') { _%>
            val authorities = it.authorities
<%_ } _%>
            authorities.none { authority -> authority.authority == ANONYMOUS }
        }<% if (!reactive) { %>
        .orElse(false)<% } %>

/**
 * If the current user has a specific authority (security role).
 *
 * The name of this method comes from the `isUserInRole()` method in the Servlet API
 *
 * @param authority the authority to check.
 * @return true if the current user has the authority, false otherwise.
 */
fun isCurrentUserInRole(authority: String): <% if (!reactive) { %>Boolean<% } else { %>Mono<Boolean><% } %> =
    <%_ if (!reactive) { _%>
    Optional.ofNullable(SecurityContextHolder.getContext().authentication)
    <%_ } else { _%>
    ReactiveSecurityContextHolder.getContext()
        .map(SecurityContext::getAuthentication)
    <%_ } _%>
        .map { 
            <%_ if (authenticationType === 'oauth2') { _%>
            val authorities = when (it) {
                    is JwtAuthenticationToken ->
                        extractAuthorityFromClaims(it.token.claims)
                    else ->
                        it.authorities
                }
            <%_ } _%>
            <%_ if (authenticationType !== 'oauth2') { _%>
            val authorities = it.authorities
            <%_ } _%>
            authorities.any { auth -> auth.authority.equals(authority) }
        }<% if (!reactive) { %>
        .orElse(false)<% } %>

<%_ if (authenticationType === 'oauth2') { _%>
    fun extractAuthorityFromClaims(claims: Map<String, Any>): List<GrantedAuthority>   {
        return mapRolesToGrantedAuthorities(getRolesFromClaims(claims))
    }

    @Suppress("UNCHECKED_CAST")
    fun getRolesFromClaims(claims: Map<String, Any>): Collection<String> {
        return claims.getOrDefault("groups", claims.getOrDefault("roles", listOf<String>())) as Collection<String>
    }

    fun mapRolesToGrantedAuthorities(roles: Collection<String>): List<GrantedAuthority> {
        return roles
            .filter { it.startsWith("ROLE_") }
            .map { SimpleGrantedAuthority(it) }
    }
<%_ } _%>
