<%#
 Copyright 2013-2018 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://jhipster.github.io/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.repository.reactive

import org.springframework.beans.factory.annotation.Autowired
import org.springframework.data.couchbase.core.CouchbaseTemplate
import org.springframework.data.couchbase.core.RxJavaCouchbaseOperations
import org.springframework.data.couchbase.core.mapping.CouchbasePersistentEntity
import org.springframework.data.couchbase.repository.query.CouchbaseEntityInformation
import org.springframework.data.couchbase.repository.support.ReactiveN1qlCouchbaseRepository
import org.springframework.data.repository.util.QueryExecutionConverters
import reactor.core.publisher.Flux
import reactor.core.publisher.Mono

import java.io.Serializable
import java.lang.reflect.Field

/**
 * A custom implementation of `CouchbaseRepository`.
 */
class CustomReactiveN1qlCouchbaseRepository<T, ID extends Serializable>
/**
 * Create a new Repository.
 *
 * @param metadata            the Metadata for the entity.
 * @param couchbaseOperations the reference to the template used.
 */
constructor(
    private val metadata: CouchbaseEntityInformation<T, String>,
    private val couchbaseOperations: RxJavaCouchbaseOperations
) : ReactiveN1qlCouchbaseRepository<T, ID>(metadata, couchbaseOperations) {

    private val persistentEntity: CouchbasePersistentEntity<?>

    @Autowired
    private lateinit var template: CouchbaseTemplate

    init {
        persistentEntity = getCouchbaseOperations().getConverter().getMappingContext().getPersistentEntity(getEntityInformation().getJavaType())
        template = CouchbaseTemplate(getCouchbaseOperations().getCouchbaseClusterInfo(), getCouchbaseOperations().getCouchbaseBucket())
        allowPageable()
    }

    // Temporary Hack to fix pageable
    @Suppress("unchecked")
    private fun allowPageable() {
        try {
            val allowed_pageable_types = QueryExecutionConverters::class.getDeclaredField("ALLOWED_PAGEABLE_TYPES")
            allowed_pageable_types.setAccessible(true)
            val ALLOWED_PAGEABLE_TYPES: Set<Class<?>> = (Set<Class<?>>) allowed_pageable_types.get(QueryExecutionConverters::class)
            ALLOWED_PAGEABLE_TYPES.add(Flux::class)
        } catch (e: NoSuchFieldException | IllegalAccessException) {
            e.printStackTrace()
        }
    }

    override fun <S extends T> save(entity: S): Mono<S> {
        return super.save(populateIdIfNecessary(entity))
    }

    /**
     * Add generated ID to entity if not already set.
     *
     * @param entity the entity to update.
     * @return entity with ID set.
     */
    private fun <S extends T> populateIdIfNecessary(entity: S): S {
        if (getEntityInformation().getId(entity) != null) {
            return entity
        }
        setId(entity, template.getGeneratedId(entity))
        return entity
    }

    private fun <S extends T> setId(entity: S, generatedId: String) {
        persistentEntity.getPropertyAccessor(entity).setProperty(persistentEntity.getIdProperty(), generatedId)
    }
}
