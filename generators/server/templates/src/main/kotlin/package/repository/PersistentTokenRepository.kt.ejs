<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.repository

<%_ if (databaseType === 'cassandra') { _%>
import com.datastax.oss.driver.api.core.CqlIdentifier
import com.datastax.oss.driver.api.core.CqlSession
import com.datastax.oss.driver.api.core.cql.BatchStatement
import com.datastax.oss.driver.api.core.cql.BatchStatementBuilder
import com.datastax.oss.driver.api.core.cql.BoundStatementBuilder
import com.datastax.oss.driver.api.core.cql.DefaultBatchType
import com.datastax.oss.driver.api.core.cql.PreparedStatement
import com.datastax.oss.driver.api.core.cql.ResultSet
import com.datastax.oss.driver.api.mapper.annotations.Dao
import com.datastax.oss.driver.api.mapper.annotations.DaoFactory
import com.datastax.oss.driver.api.mapper.annotations.DaoKeyspace
import com.datastax.oss.driver.api.mapper.annotations.Delete
import com.datastax.oss.driver.api.mapper.annotations.Mapper
import com.datastax.oss.driver.api.mapper.annotations.Select
<%_ } _%>
import <%= packageName %>.domain.PersistentToken
import <%= packageName %>.domain.<%= asEntity('User') %>
<%_ if (databaseType !== 'cassandra') { _%>
import java.time.LocalDate
<%_ } _%>
<%_ if (databaseType === 'sql') { _%>
import org.springframework.data.jpa.repository.JpaRepository
<%_ } _%>
<%_ if (databaseType === 'mongodb') { _%>
import org.springframework.data.mongodb.repository.MongoRepository
<%_ } _%><%_ if (databaseType === 'neo4j') { _%>
import org.neo4j.springframework.data.repository.Neo4jRepository
<%_ } if (databaseType === 'cassandra') { _%>
import org.springframework.boot.autoconfigure.cassandra.CassandraProperties
import org.springframework.stereotype.Repository

import javax.validation.ConstraintViolationException
import javax.validation.Validator
<%_ } _%>
<%_ if (databaseType === 'cassandra' || databaseType === 'couchbase') { _%>

import java.util.Optional
<%_ } _%>
<%_ if (databaseType === 'couchbase') { _%>

import <%= packageName %>.config.ID_DELIMITER
<%_ } _%>

/**
<%_ if (databaseType === 'sql') { _%>
 * Spring Data JPA repository for the [PersistentToken] entity.
<%_ } else if (databaseType === 'mongodb') { _%>
 * Spring Data MongoDB repository for the [PersistentToken] entity.
<%_ } else if (databaseType === 'couchbase') { _%>
 * Spring Data Couchbase repository for the [PersistentToken] entity.
<%_ } else if (databaseType === 'cassandra') { _%>
 * Cassandra repository for the [PersistentToken] entity.
<%_ } _%>
 */
 <%_ if (['sql', 'mongodb', 'neo4j', 'couchbase'].includes(databaseType)) { _%>
interface PersistentTokenRepository : <% if (databaseType === 'sql') { %>JpaRepository<% } %><% if (databaseType === 'mongodb') { %>MongoRepository<% } %><% if (databaseType === 'neo4j') { %>Neo4jRepository<% } %><% if (databaseType === 'couchbase') { %>N1qlCouchbaseRepository<% } %><PersistentToken, String> {
    <%_ if (databaseType === 'couchbase') { _%>
    fun findBySeries(series: String): Optional<PersistentToken> {
        return findById(PersistentToken.PREFIX + ID_DELIMITER + series)
    }

    fun deleteBySeries(series: String) {
        deleteById(PersistentToken.PREFIX + ID_DELIMITER + series)
    }

    fun findByUser(user: User): List<PersistentToken> = findByLogin(user.login)

    fun findByLogin(login: String): List<PersistentToken>
    <%_ } else { _%>
    fun findByUser(user: User): List<PersistentToken>
    <%_ } _%>

    fun findByTokenDateBefore(localDate: LocalDate): List<PersistentToken>
}
<%_ } else if (databaseType === 'cassandra') { _%>
@Repository
class PersistentTokenRepository (private val session: CqlSession, private val validator: Validator, private val cassandraProperties: CassandraProperties) {

    private val persistentTokenMapper = PersistentTokenMapperBuilder(session).build()
    private val persistentTokenDao = persistentTokenMapper.persistentTokenDao(CqlIdentifier.fromCql(cassandraProperties.getKeyspaceName()))


    private val findPersistentTokenSeriesByUserIdStmt = session.prepare(
        "SELECT persistent_token_series " +
            "FROM persistent_token_by_user " +
            "WHERE user_id = :user_id"
    )

    private val insertPersistentTokenSeriesByUserIdStmt = session.prepare(
        "INSERT INTO persistent_token_by_user (user_id, persistent_token_series) " +
            "VALUES (:user_id, :persistent_token_series) " +
            "USING TTL 2592000"
    ) // 30 days

    private val insertPersistentTokenStmt = session.prepare(
        "INSERT INTO persistent_token (series, token_date, user_agent, token_value, login, user_id, ip_address) " +
            "VALUES (:series, :token_date, :user_agent, :token_value, :login, :user_id, :ip_address) " +
            "USING TTL 2592000"
    ) // 30 days

    private val deletePersistentTokenSeriesByUserIdStmt = session.prepare(
        "DELETE FROM persistent_token_by_user WHERE user_id = :user_id AND persistent_token_series = :persistent_token_series"
    )

    fun findById(presentedSeries: String): Optional<PersistentToken> =
        Optional.ofNullable(persistentTokenDao.get(presentedSeries))

    fun findByUser( user: <%= asEntity('User') %>): MutableList<PersistentToken> {
        val statementBuilder = findPersistentTokenSeriesByUserIdStmt.boundStatementBuilder()
        statementBuilder.setString("user_id", user.id)
        val rs = session.execute(statementBuilder.build())
        val persistentTokens = mutableListOf<PersistentToken>()
        return rs.all().asSequence()
            .map { row ->
                val token = row.getString("persistent_token_series")
                persistentTokenDao.get(token)
            }
            .toMutableList()
            
    }

    fun save(token: PersistentToken) {
        val violations = validator.validate(token)
        if (violations != null && !violations.isEmpty()) {
            throw ConstraintViolationException(violations)
        }
        val batch = BatchStatement.builder(DefaultBatchType.LOGGED)
        batch.addStatement(
            insertPersistentTokenStmt.bind()
                .setString("series", token.series)
                .setInstant("token_date", token.tokenDate)
                .setString("user_agent", token.userAgent)
                .setString("token_value", token.tokenValue)
                .setString("login", token.login)
                .setString("user_id", token.userId)
                .setString("ip_address", token.ipAddress)
        )
        batch.addStatement(
            insertPersistentTokenSeriesByUserIdStmt.bind()
                .setString("user_id", token.userId)
                .setString("persistent_token_series", token.series)
        )
        session.execute(batch.build())
    }

    fun delete(token: PersistentToken) {
        mapper.delete(token)
        session.execute(
            deletePersistentTokenSeriesByUserIdStmt.bind()
                .setString("user_id", token.userId)
                .setString("persistent_token_series", token.series)
        )
    }
}

@Mapper
interface PersistentTokenMapper {
    @DaoFactory
    fun persistentTokenDao(@DaoKeyspace keyspace: CqlIdentifier): PersistentTokenDao
}

@Dao
interface PersistentTokenDao {

    @Select
    fun get(presentedSeries: String): PersistentToken 

    @Delete
    fun delete(token: PersistentToken)
}
<%_ } _%>
