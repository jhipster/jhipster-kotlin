<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.repository

<%_ if (databaseTypeSql && reactive) { _%>
import <%= packageName %>.domain.Authority
<%_ } _%>
import <%= packageName %>.domain.<%= asEntity('User') %>

<%_ if (databaseTypeCassandra) { _%>
import com.datastax.oss.driver.api.core.CqlIdentifier
    <%_ if (!reactive) { _%>
import com.datastax.oss.driver.api.core.CqlSession
import com.datastax.oss.driver.api.core.PagingIterable
    <%_ } _%>
import com.datastax.oss.driver.api.core.cql.BatchStatement
import com.datastax.oss.driver.api.core.cql.BatchStatementBuilder
import com.datastax.oss.driver.api.core.cql.BoundStatement
    <%_ if (!reactive) { _%>
import com.datastax.oss.driver.api.core.cql.BoundStatementBuilder
    <%_ } _%>
import com.datastax.oss.driver.api.core.cql.DefaultBatchType
import com.datastax.oss.driver.api.core.cql.PreparedStatement
    <%_ if (reactive) { _%>
import com.datastax.oss.driver.api.core.cql.SimpleStatement
    <%_ } _%>
    <%_ if (!reactive) { _%>
import com.datastax.oss.driver.api.core.cql.ResultSet
import com.datastax.oss.driver.api.mapper.annotations.Dao
import com.datastax.oss.driver.api.mapper.annotations.DaoFactory
import com.datastax.oss.driver.api.mapper.annotations.DaoKeyspace
import com.datastax.oss.driver.api.mapper.annotations.Delete
import com.datastax.oss.driver.api.mapper.annotations.Insert
import com.datastax.oss.driver.api.mapper.annotations.Mapper
import com.datastax.oss.driver.api.mapper.annotations.Select
    <%_ } _%>
    <%_ if (reactive) { _%>
import com.datastax.oss.driver.api.querybuilder.QueryBuilder
import com.datastax.oss.driver.api.querybuilder.insert.RegularInsert
    <%_ } _%>
<%_ } _%>
<%_ if (databaseTypeSql && reactive) { _%>
import org.apache.commons.beanutils.BeanComparator
<%_ } _%>
<%_ if (cacheManagerIsAvailable) { _%>
import org.springframework.cache.annotation.Cacheable
<%_ } _%>
<%_ if (databaseTypeSql || databaseTypeCouchbase || databaseTypeMongodb || databaseTypeNeo4j) { _%>
import org.springframework.data.domain.*
<%_ } _%>    
<%_ if (databaseTypeSql) { _%>
    <%_ if (reactive) { _%>
import org.springframework.data.domain.Sort
import org.springframework.r2dbc.core.DatabaseClient
import org.springframework.data.r2dbc.convert.R2dbcConverter
import org.springframework.data.r2dbc.core.R2dbcEntityTemplate
import org.springframework.data.r2dbc.repository.Query
import org.springframework.data.r2dbc.repository.R2dbcRepository
import org.springframework.data.relational.core.sql.Column
import org.springframework.data.relational.core.sql.Expression
import org.springframework.data.relational.core.sql.Table

import org.springframework.data.relational.core.query.Criteria.where
import org.springframework.data.relational.core.query.Query.query
    <%_ } else { _%>
import org.springframework.data.jpa.repository.EntityGraph
import org.springframework.data.jpa.repository.JpaRepository
        <%_ } _%>
<%_ } _%>
<%_ if (databaseTypeMongodb) { _%>
import org.springframework.data.mongodb.repository.<% if (reactive) { %>Reactive<% } %>MongoRepository
<%_ } _%>
<%_ if (databaseTypeNeo4j) { _%>
import org.springframework.data.neo4j.repository.<% if (reactive) { %>Reactive<% } %>Neo4jRepository
<%_ } _%>
<%_ if (databaseTypeCouchbase) { _%>
import org.springframework.data.couchbase.repository.Query
<%_ } _%>
<%_ if (reactive && databaseTypeCassandra) { _%>
import org.springframework.data.cassandra.ReactiveResultSet
import org.springframework.data.cassandra.ReactiveSession
import org.springframework.data.cassandra.core.ReactiveCassandraTemplate
import org.springframework.data.cassandra.core.convert.CassandraConverter
import org.springframework.data.cassandra.core.mapping.CassandraPersistentEntity
<%_ } _%>
import org.springframework.stereotype.Repository
<%_ if (databaseTypeCassandra) { _%>
    <%_ if (!reactive) { _%>
import org.springframework.boot.autoconfigure.cassandra.CassandraProperties
    <%_ } _%>
import org.springframework.util.StringUtils

<%_ } _%>
<%_ if (reactive) { _%>
import reactor.core.publisher.Flux
import reactor.core.publisher.Mono
    <%_ if (databaseTypeSql) { _%>
import reactor.util.function.Tuple2
import reactor.util.function.Tuples
    <%_ } _%>
<%_ } _%>

<%_ if (databaseTypeCassandra) { _%>
import javax.validation.ConstraintViolation
import javax.validation.ConstraintViolationException
import javax.validation.Validator
<%_ } _%>
<%_ if (!reactive) { _%>
import java.util.Optional
<%_ } _%>
<%_ if (databaseTypeSql && reactive) { _%>
    <%_ if (!authenticationTypeOauth2) { _%>
import java.time.LocalDateTime
    <%_ } _%>
import java.util.Optional
import java.util.stream.Collectors
<%_ } _%>
<%_ if (user.primaryKey.hasUUID) { _%>
import java.util.UUID
<%_ } _%>
<%_ if (!databaseTypeCassandra && !(databaseTypeSql && reactive) && !authenticationTypeOauth2) { _%>
import java.time.Instant
<%_ } _%>

/**
 * Spring Data <% if (databaseTypeSql && !reactive) { %>JPA<% } else if (databaseTypeSql && reactive) { %>R2DBC<% } else if (databaseTypeMongodb) { %>MongoDB<% } else if (databaseTypeCouchbase) { %>Couchbase<% } else if (databaseTypeCassandra) { %>Cassandra<% } else if (databaseTypeNeo4j) { %>Neo4j<% } %> repository for the {@link <%= asEntity('User') %>} entity.
 */
<%_
    let optionalOrMono = reactive ? 'Mono' : 'Optional';
    let listOrFlux = reactive ? 'Flux' : 'List';
    let pageOrFlux = (reactive) ? 'Flux' : 'Page';
    let toListSuffix = reactive ? '' : '.toMutableList()';
_%>
<%_ if ((databaseTypeSql && !reactive) || databaseTypeMongodb || databaseTypeNeo4j || databaseTypeCouchbase) { _%>
@Repository
interface UserRepository : <% if (databaseTypeSql) { %>JpaRepository<<%= asEntity('User') %>, <%= user.primaryKey.type %>><% } %><% if (reactive && !databaseTypeCouchbase) { %>Reactive<% } %><% if (databaseTypeMongodb) { %>MongoRepository<<%= asEntity('User') %>, String><% } %><% if (databaseTypeNeo4j) { %>Neo4jRepository<<%= asEntity('User') %>, String><% } %><% if (databaseTypeCouchbase) { %>JHipsterCouchbaseRepository<<%= asEntity('User') %>, String><%if (searchEngineCouchbase) { %>, CouchbaseSearchRepository<<%= asEntity('User') %>, String><% } } %> {
    
    <%_ if (!authenticationTypeOauth2) { _%>
    <%_ if (databaseTypeCouchbase) { _%>
    @JvmDefault
    <%_ } _%>
    fun findOneByActivationKey(activationKey: String): <%= optionalOrMono %><<%= asEntity('User') %>><% if (databaseTypeCouchbase) { %> {
        return findIdByActivationKey(activationKey)
        .map(User::id)
        .flatMap(this::findById);
    }
    @Query(FIND_IDS_QUERY + " AND activationKey = $1")
    fun findIdByActivationKey(activationKey: String): <%= optionalOrMono %><User>
    <% } %>
    <%_ } _%>
    <%_ if (!authenticationTypeOauth2) { _%>

        <%_ if (databaseTypeCouchbase) { _%>
    @JvmDefault
        <%_ } _%>
    fun findAllByActivatedIsFalseAndActivationKeyIsNotNullAndCreatedDateBefore(dateTime: Instant): <%= listOrFlux %><<%= asEntity('User') %>><% if (databaseTypeCouchbase) { %> {
        return findAllById(toIds(findAllIdsByActivatedIsFalseAndActivationKeyIsNotNullAndCreatedDateBefore(dateTime)<%= toListSuffix %>))
    }

    @Query(FIND_IDS_QUERY + " AND activated = false AND activationKey IS NOT NULL AND createdDate < $1")
    fun findAllIdsByActivatedIsFalseAndActivationKeyIsNotNullAndCreatedDateBefore(dateTime: Instant): <%= listOrFlux %><User>
    <% } %>
    <%_ } _%>

    <%_ if (!authenticationTypeOauth2) { _%>
        <%_ if (databaseTypeCouchbase) { _%>
    @JvmDefault
        <%_ } _%>
    fun findOneByResetKey(resetKey: String): <%= optionalOrMono %><<%= asEntity('User') %>><% if (databaseTypeCouchbase) { %> {
        return findIdByResetKey(resetKey)
            .map(User::id)
            .flatMap(this::findById)
    }

    @Query(FIND_IDS_QUERY + " AND resetKey = $1")
    fun findIdByResetKey(resetKey: String): <%= optionalOrMono %><User>
    <% } %>
    <%_ } _%>

    <%_ if (!authenticationTypeOauth2) { _%>
        <%_ if (databaseTypeCouchbase || databaseTypeMongodb || databaseTypeNeo4j) { _%>
            <%_ if (cacheManagerIsAvailable) { _%>
    @Cacheable(cacheNames = [USERS_BY_EMAIL_CACHE])
            <%_ } _%>
        <%_ } _%>
        <%_ if (databaseTypeCouchbase) { _%>
    @JvmDefault
        <%_ } _%>
    fun findOneByEmailIgnoreCase(email: String?): <%= optionalOrMono %><<%= asEntity('User') %>><% if (databaseTypeCouchbase) { %> {
        return findIdByEmailIgnoreCase(email!!)
            .map(User::id)
            .flatMap(this::findById);
    }

    @Query(FIND_IDS_QUERY + " AND LOWER(email) = LOWER($1)")
    fun findIdByEmailIgnoreCase(email: String): <%= optionalOrMono %><User> 
    <% } %>
    <%_ } _%>

    <%_ if (databaseTypeCouchbase) { _%>
        <%_ if (cacheManagerIsAvailable) { _%>
    @Cacheable(cacheNames = [USERS_BY_LOGIN_CACHE])
        <%_ } _%>
    @JvmDefault
    fun findOneByLogin(login: String): <%= optionalOrMono %><<%= asEntity('User') %>> {
        return findById(login)
    }
    <%_ } else if (databaseTypeMongodb || databaseTypeNeo4j) { _%>
        <%_ if (cacheManagerIsAvailable) { _%>
    @Cacheable(cacheNames = [USERS_BY_LOGIN_CACHE])
        <%_ } _%>
    fun findOneByLogin(login: String): <%= optionalOrMono %><<%= asEntity('User') %>>
    <%_ } else { _%>
    fun findOneByLogin(login: String): <%= optionalOrMono %><<%= asEntity('User') %>>
    <%_ } _%>

    <%_ if (databaseTypeNeo4j) { _%>
    <% if (!reactive) { %>// See https://github.com/neo4j/sdn-rx/issues/51<% } %>
    override fun findAll(): <%= listOrFlux %><<%= asEntity('User') %>>
    <%_ } _%>
    <%_ if (databaseTypeSql) { _%>

    @EntityGraph(attributePaths = ["authorities"])
    <%_ if (cacheManagerIsAvailable) { _%>
    @Cacheable(cacheNames = [USERS_BY_LOGIN_CACHE])
    <%_ } _%>
    fun findOneWithAuthoritiesByLogin(login: String): Optional<<%= asEntity('User') %>>

        <%_ if (!authenticationTypeOauth2) { _%>
    @EntityGraph(attributePaths = ["authorities"])
            <%_ if (cacheManagerIsAvailable) { _%>
    @Cacheable(cacheNames = [USERS_BY_EMAIL_CACHE])
            <%_ } _%>
    fun findOneWithAuthoritiesByEmailIgnoreCase(email: String): Optional<<%= asEntity('User') %>>
        <%_ } _%>
    <%_ } _%>

    <% if (reactive) { %>
        <%_ if (!databaseTypeCouchbase) { _%>
    fun findAllByIdNotNull(pageable: Pageable): Flux<<%= asEntity('User') %>>
        <%_ } _%>

        <%_ if (databaseTypeCouchbase) { _%>
    @JvmDefault
    fun findAllByActivatedIsTrue(pageable: Pageable): Flux<User>{
        return findAllById(toIds(findAllIdsByActivatedIsTrue(pageable)))
    }
        
    @Query(FIND_IDS_QUERY + " AND activated = true")
    fun findAllIdsByActivatedIsTrue(pageable: Pageable): Flux<User> 
        <%_ } else { _%>
    fun findAllByIdNotNullAndActivatedIsTrue(pageable: Pageable): Flux<<%= asEntity('User') %>>
        <%_ } _%>

    override fun count(): Mono<Long>
    <% } else { %>
        <%_ if (databaseTypeCouchbase) { _%>
    @JvmDefault
    fun findAllByActivatedIsTrue(pageable: Pageable): Page<<%= asEntity('User') %>> {
        val page = findAllIdsByActivatedIsTrue(pageable);
        return PageImpl<<%= asEntity('User') %>>(findAllById(toIds(page.content)), pageable, page.totalElements)
    }

    @Query(FIND_IDS_QUERY + " AND activated = true")
    fun findAllIdsByActivatedIsTrue(pageable: Pageable): Page<User>
        <%_ } else { _%>

    fun findAllByIdNotNullAndActivatedIsTrue(pageable: Pageable): Page<<%= asEntity('User') %>>
        <%_ } _%>
    <% } %>

    <%_ if (cacheManagerIsAvailable) { _%>

    companion object {

        const val USERS_BY_LOGIN_CACHE: String = "usersByLogin"

        const val USERS_BY_EMAIL_CACHE: String = "usersByEmail"
    }
    <%_ } _%>
}
<%_ } else if (databaseTypeSql && reactive) { _%>
@Repository
interface UserRepository: R2dbcRepository<<%= asEntity('User') %>, <% if (authenticationTypeOauth2) { %>String<% } else { %>Long<% } %>>, UserRepositoryInternal {

    <%_ if (!authenticationTypeOauth2) { _%>
    fun findOneByActivationKey(activationKey: String): Mono<<%= asEntity('User') %>>

    fun findAllByActivatedIsFalseAndActivationKeyIsNotNullAndCreatedDateBefore(dateTime: LocalDateTime): Flux<<%= asEntity('User') %>>

    fun findOneByResetKey(resetKey: String): Mono<<%= asEntity('User') %>>

    fun findOneByEmailIgnoreCase(email: String): Mono<<%= asEntity('User') %>>

    <%_ } _%>

    fun findOneByLogin(login: String): Mono<<%= asEntity('User') %>>

    <%_ if (databaseType === 'couchbase') { _%>
    @ScanConsistency(query = QueryScanConsistency.REQUEST_PLUS)
    <%_ } _%>
    fun findAllByIdNotNull(pageable: Pageable): Flux<<%= asEntity('User') %>>
    <%_ if (databaseType === 'couchbase') { _%>
    @ScanConsistency(query = QueryScanConsistency.REQUEST_PLUS)
    <%_ } _%>
    fun findAllBy<% if (databaseType !== 'couchbase') { %>IdNotNullAnd<% } %>ActivatedIsTrue(pageable: Pageable): Flux<<%= asEntity('User') %>>

    <%_ if (databaseType === 'couchbase') { _%>
    @ScanConsistency(query = QueryScanConsistency.REQUEST_PLUS)
    <%_ } _%>
    override fun count(): Mono<Long>

    @Query("INSERT INTO <%= jhiTablePrefix %>_user_authority VALUES(:userId, :authority)")
    fun saveUserAuthority(userId: <%= user.primaryKey.type %>, authority: String): Mono<Void>

    @Query("DELETE FROM <%= jhiTablePrefix %>_user_authority")
    fun deleteAllUserAuthorities(): Mono<Void>

    @Query("DELETE FROM <%= jhiTablePrefix %>_user_authority WHERE user_id = :userId")
    fun deleteUserAuthorities(userId: <%= user.primaryKey.type %>): Mono<Void>
}

    <%_ if (!authenticationTypeOauth2) { _%>
interface DeleteExtended<T> {
    fun delete(user: T): Mono<Void>
}

    <%_ } _%>
interface UserRepositoryInternal<% if (!authenticationTypeOauth2) { %> : DeleteExtended<<%= asEntity('User') %>><% } %> {

    fun findOneWithAuthoritiesByLogin(login: String): Mono<<%= asEntity('User') %>>

    <%_ if (!authenticationTypeOauth2) { _%>
    fun findOneWithAuthoritiesByEmailIgnoreCase(email: String): Mono<<%= asEntity('User') %>>

    <%_ } _%>
    <%_ if (authenticationTypeOauth2) { _%>

    fun create(user: <%= asEntity('User') %>): Mono<<%= asEntity('User') %>>
    <%_ } _%>
    fun findAllWithAuthorities(pageable: Pageable): Flux<<%= asEntity('User') %>>
}

class UserRepositoryInternalImpl(val db: DatabaseClient, val r2dbcEntityTemplate: R2dbcEntityTemplate, val r2dbcConverter: R2dbcConverter): UserRepositoryInternal {

    override fun findOneWithAuthoritiesByLogin(login: String): Mono<<%= asEntity('User') %>> {
        return findOneWithAuthoritiesBy("login", login)
    }

    <%_ if (!authenticationTypeOauth2) { _%>
    override fun findOneWithAuthoritiesByEmailIgnoreCase(email: String): Mono<<%= asEntity('User') %>> {
        return findOneWithAuthoritiesBy("email", email.lowercase())
    }

    <%_ } _%>

    override fun findAllWithAuthorities(pageable: Pageable): Flux<<%= asEntity('User') %>> {
        val property = pageable.sort.map(Sort.Order::getProperty).first() ?: "id"
        val direction = pageable.sort.map(Sort.Order::getDirection).first() ?: Sort.DEFAULT_DIRECTION
        val comparator = if (direction == Sort.DEFAULT_DIRECTION) { BeanComparator(property) } else { BeanComparator<Any>(property).reversed() }
        val page = pageable.pageNumber
        val size = pageable.pageSize

        return db
            .sql("SELECT * FROM <%= jhiTablePrefix %>_user u LEFT JOIN <%= jhiTablePrefix %>_user_authority ua ON u.id=ua.user_id")
            .map { row, metadata ->
                return@map Tuples.of(
                    r2dbcConverter.read(<%= asEntity('User') %>::class.java, row, metadata),
                    Optional.ofNullable(row.get("authority_name", String::class.java))
                )
            }.all()
            .groupBy { it.t1.login }
            .flatMap { it.collectList().map { t -> updateUserWithAuthorities(t[0].t1, t) } }
            .sort(comparator)
            .skip((page * size).toLong())
            .take(size.toLong())
    }

    <%_ if (!authenticationTypeOauth2) { _%>
    override fun delete(user: <%= asEntity('User') %>): Mono<Void> {
        return db.sql("DELETE FROM <%= jhiTablePrefix %>_user_authority WHERE user_id = :userId")
            .bind("userId", user.id)
            .then()
            .then(r2dbcEntityTemplate.delete(<%= asEntity('User') %>::class.java)
                .matching(query(where("id").`is`(user.id))).all()
                .then()
            )
    }

    <%_ } else { _%>
    override fun create(user: <%= asEntity('User') %>): Mono<<%= asEntity('User') %>> {
        return r2dbcEntityTemplate.insert(<%= asEntity('User') %>::class.java).using(user)
            .defaultIfEmpty(user)
    }

        <%_ } _%>

    private fun findOneWithAuthoritiesBy(fieldName: String, fieldValue: Any): Mono<<%= asEntity('User') %>> {
        return db.sql("SELECT * FROM <%= jhiTablePrefix %>_user u LEFT JOIN <%= jhiTablePrefix %>_user_authority ua ON u.id=ua.user_id WHERE u.$fieldName = :$fieldName")
            .bind(fieldName, fieldValue)
            .map { row, metadata ->
                return@map Tuples.of(
                    r2dbcConverter.read(<%= asEntity('User') %>::class.java, row, metadata),
                    Optional.ofNullable(row.get("authority_name", String::class.java))
                )
            }.all()
            .collectList()
            .filter { it.isNotEmpty() }
            .map { l -> updateUserWithAuthorities(l[0].t1, l) }
    }

    private fun updateUserWithAuthorities(user: <%= asEntity('User') %>, tuples: List<Tuple2<<%= asEntity('User') %>, Optional<String>>>): <%= asEntity('User') %> {
        user.authorities = tuples.filter { it.t2.isPresent }
            .map {
                val authority = Authority()
                authority.name = it.t2.get()
                authority
            }.toMutableSet()
        return user
    }
}

<%_ } else if (databaseTypeCassandra) { _%>
@Repository
class UserRepository(
    <%_ if (reactive) { _%>
    private val cqlTemplate: ReactiveCassandraTemplate,
    <%_ } _%>
    private val session: <% if (reactive) { %>Reactive<% } else { %>Cql<% } %>Session,
    private val validator: Validator<%_ if (!reactive) { _%>,
    private val cassandraProperties: CassandraProperties<% } %>
) {

    <%_ if(reactive) { _%>
    private val findAllStmt = session.prepare("SELECT * FROM user")<% if(reactive) { %>.block()<% } %>    
    <%_ } else { _%>
    private val userTokenMapper = UserTokenMapperBuilder(session).build()
    private val userDao = userTokenMapper.userTokenDao(CqlIdentifier.fromCql(cassandraProperties.keyspaceName))
    <%_ } _%>
    private val findOneByActivationKeyStmt = session.prepare(
        "SELECT id " +
            "FROM user_by_activation_key " +
            "WHERE activation_key = :activation_key"
    )<% if(reactive) { %>.block()<% } %>

    private val findOneByResetKeyStmt = session.prepare(
        "SELECT id " +
            "FROM user_by_reset_key " +
            "WHERE reset_key = :reset_key"
    )<% if(reactive) { %>.block()<% } %>

    private val insertByActivationKeyStmt = session.prepare(
        "INSERT INTO user_by_activation_key (activation_key, id) " +
            "VALUES (:activation_key, :id)"
    )<% if(reactive) { %>.block()<% } %>

    private val insertByResetKeyStmt = session.prepare(
        "INSERT INTO user_by_reset_key (reset_key, id) " +
            "VALUES (:reset_key, :id)"
    )<% if(reactive) { %>.block()<% } %>

    <%_ if(reactive) { _%>
    private val deleteByIdStmt = session.prepare(
        "DELETE FROM user " +
                "WHERE id = :id"
    ).block()

    <%_ } _%>
    private val deleteByActivationKeyStmt = session.prepare(
        "DELETE FROM user_by_activation_key " +
            "WHERE activation_key = :activation_key"
    )<% if(reactive) { %>.block()<% } %>

    private val deleteByResetKeyStmt = session.prepare(
        "DELETE FROM user_by_reset_key " +
            "WHERE reset_key = :reset_key"
    )<% if(reactive) { %>.block()<% } %>

    private val findOneByLoginStmt = session.prepare(
        "SELECT id " +
            "FROM user_by_login " +
            "WHERE login = :login"
    )<% if(reactive) { %>.block()<% } %>

    private val insertByLoginStmt = session.prepare(
        "INSERT INTO user_by_login (login, id) " +
            "VALUES (:login, :id)"
    )<% if(reactive) { %>.block()<% } %>

    private val deleteByLoginStmt = session.prepare(
        "DELETE FROM user_by_login " +
            "WHERE login = :login"
    )<% if(reactive) { %>.block()<% } %>

    private val findOneByEmailStmt = session.prepare(
        "SELECT id " +
            "FROM user_by_email " +
            "WHERE email     = :email"
    )<% if(reactive) { %>.block()<% } %>

    private val insertByEmailStmt = session.prepare(
        "INSERT INTO user_by_email (email, id) " +
            "VALUES (:email, :id)"
    )<% if(reactive) { %>.block()<% } %>

    private val deleteByEmailStmt = session.prepare(
        "DELETE FROM user_by_email " +
            "WHERE email = :email"
    )<% if(reactive) { %>.block()<% } %>

    private val truncateStmt = session.prepare("TRUNCATE user")<% if(reactive) { %>.block()<% } %>

    private val truncateByResetKeyStmt = session.prepare("TRUNCATE user_by_reset_key")<% if(reactive) { %>.block()<% } %>

    private val truncateByLoginStmt = session.prepare("TRUNCATE user_by_login")<% if(reactive) { %>.block()<% } %>

    private val truncateByEmailStmt = session.prepare("TRUNCATE user_by_email")<% if(reactive) { %>.block()<% } %>

    fun findById(id: String): <%= optionalOrMono %><<%= asEntity('User') %>> {
        <%_ if(reactive) { _%>
        return cqlTemplate.selectOneById(id, <%= asEntity('User') %>::class.java)
            .map { user ->
                if(user.authorities == null) {
                    user.authorities = mutableSetOf()
                }
                user
            }
        <%_ } else { _%>
        return userDao.get(id)
        <%_ } _%>
    }

    fun findOneByActivationKey(activationKey: String): <%= optionalOrMono %><<%= asEntity('User') %>> {
        val stmt = findOneByActivationKeyStmt.bind().setString("activation_key", activationKey)
        return findOneFromIndex(stmt)
    }

    fun findOneByResetKey(resetKey: String): <%= optionalOrMono %><<%= asEntity('User') %>> {
        val stmt = findOneByResetKeyStmt.bind().setString("reset_key", resetKey)
        return findOneFromIndex(stmt)
    }

    <%_ if (cacheManagerIsAvailable) { _%>
    @Cacheable(cacheNames = [USERS_BY_EMAIL_CACHE])
    <%_ } _%>
    fun findOneByEmailIgnoreCase(email: String?): <%= optionalOrMono %><<%= asEntity('User') %>> {
        val stmt = findOneByEmailStmt.bind().setString("email", email?.lowercase())
        return findOneFromIndex(stmt)
    }

    <%_ if (cacheManagerIsAvailable) { _%>
    @Cacheable(cacheNames = [USERS_BY_LOGIN_CACHE])
    <%_ } _%>
    fun findOneByLogin(login: String): <%= optionalOrMono %><<%= asEntity('User') %>> {
        val stmt = findOneByLoginStmt.bind().setString("login", login)
        return findOneFromIndex(stmt)
    }

    fun findAll(): <%= listOrFlux %><<%= asEntity('User') %>> {
    <%_ if(reactive) { _%>
        return cqlTemplate.select(findAllStmt.bind(), <%= asEntity('User') %>::class.java)
            .map { user ->
                if(user.authorities == null) {
                    user.authorities = mutableSetOf()
                }
                user
            }
    <%_ } else { _%>
        return userDao.findAll().all()
    <%_ } _%>
    }

    fun save(user: <%= asEntity('User') %>): <% if(reactive) { %>Mono<<% } %><%= asEntity('User') %><% if(reactive) { %>><% } %> {
        val violations = validator.validate(user)
        if (violations != null && violations.isNotEmpty()) {
            throw ConstraintViolationException(violations)
        }
        <%_ if(reactive) { _%>
        return this.findById(user.id!!)
            .flatMapMany  {oldUser ->
                val deleteOps: Flux<ReactiveResultSet> = Flux.empty()
                if (!StringUtils.isEmpty(oldUser.activationKey) && oldUser.activationKey != user.activationKey) {
                    deleteOps.mergeWith(session.execute(deleteByActivationKeyStmt.bind().setString("activation_key", oldUser.activationKey)))
                }
                if (!StringUtils.isEmpty(oldUser.resetKey) && oldUser.resetKey!=user.resetKey) {
                    deleteOps.mergeWith(session.execute(deleteByResetKeyStmt.bind().setString("reset_key", oldUser.resetKey)))
                }
                if (!StringUtils.isEmpty(oldUser.login) && oldUser.login!=user.login) {
                    deleteOps.mergeWith(session.execute(deleteByLoginStmt.bind().setString("login", oldUser.login)))
                }
                if (!StringUtils.isEmpty(oldUser.email) && oldUser.email != user.email) {
                    deleteOps.mergeWith(session.execute(deleteByEmailStmt.bind().setString("email", oldUser.email?.lowercase())))
                }
                deleteOps
            }
            .then( Mono.defer {
                val batch = BatchStatement.builder(DefaultBatchType.LOGGED)
                batch.addStatement(getInsertStatement(user))
                if (!StringUtils.isEmpty(user.activationKey)) {
                    batch.addStatement(insertByActivationKeyStmt.bind()
                        .setString("activation_key", user.activationKey)
                        .setString("id", user.id))
                }
                if (!StringUtils.isEmpty(user.resetKey)) {
                    batch.addStatement(insertByResetKeyStmt.bind()
                        .setString("reset_key", user.resetKey)
                        .setString("id", user.id))
                }
                batch.addStatement(insertByLoginStmt.bind()
                    .setString("login", user.login)
                    .setString("id", user.id))
                batch.addStatement(insertByEmailStmt.bind()
                    .setString("email", user.email?.lowercase())
                    .setString("id", user.id))
                session.execute(batch.build())
            })
            .thenReturn(user)
    }
    
    private fun getInsertStatement(user: <%= asEntity('User') %>): SimpleStatement {
        val converter = cqlTemplate.getConverter()
        val persistentEntity = converter.getMappingContext().getRequiredPersistentEntity(user::class.java)
        val toInsert = mutableMapOf<CqlIdentifier, Any>()
        converter.write(user, toInsert, persistentEntity)
        val insert = QueryBuilder.insertInto(persistentEntity.getTableName())
            .value("id", QueryBuilder.literal(user.id))
        toInsert.forEach { (key, value) -> insert.value(key, QueryBuilder.literal(value)) }
        return insert.build()
        <%_ } else { /* reactive */ _%>
        val oldUser = user.id?.let { userDao.get(it) }?.orElse(null)
        if (oldUser != null) {
            if (!StringUtils.isEmpty(oldUser.activationKey) && oldUser.activationKey != user.activationKey) {
                session.execute(deleteByActivationKeyStmt.bind().setString("activation_key", oldUser.activationKey))
            }
            if (!StringUtils.isEmpty(oldUser.resetKey) && oldUser.resetKey != user.resetKey) {
                session.execute(deleteByResetKeyStmt.bind().setString("reset_key", oldUser.resetKey))
            }
            if (!StringUtils.isEmpty(oldUser.login) && oldUser.login != user.login) {
                session.execute(deleteByLoginStmt.bind().setString("login", oldUser.login))
            }
            if (!StringUtils.isEmpty(oldUser.email) && !oldUser.email.equals(user.email, ignoreCase = true)) {
                session.execute(deleteByEmailStmt.bind().setString("email", oldUser.email!!.lowercase()))
            }
        }
        val batch = BatchStatement.builder(DefaultBatchType.LOGGED)
        batch.addStatement(userDao.saveQuery(user))
        if (!StringUtils.isEmpty(user.activationKey)) {
            batch.addStatement(insertByActivationKeyStmt.bind()
                    .setString("activation_key", user.activationKey)
                    .setString("id", user.id)
            )
        }
        if (!StringUtils.isEmpty(user.resetKey)) {
            batch.addStatement(insertByResetKeyStmt.bind()
                    .setString("reset_key", user.resetKey)
                    .setString("id", user.id)
            )
        }
        batch.addStatement(insertByLoginStmt.bind()
                .setString("login", user.login)
                .setString("id", user.id)
        )
        batch.addStatement(insertByEmailStmt.bind()
                .setString("email", user.email!!.lowercase())
                .setString("id", user.id)
        )
        session.execute(batch.build())
        return user
        <%_ } _%>
    }

    fun delete(user: <%= asEntity('User') %>)<% if(reactive) { %>: Mono<Void><% } %> {
        val batch = BatchStatement.builder(DefaultBatchType.LOGGED)
        batch.addStatement(<% if(reactive) { %>deleteByIdStmt.bind().setString("id", user.id)<% } else { %>userDao.deleteQuery(user)<% } %>)
        if (!StringUtils.isEmpty(user.activationKey)) {
            batch.addStatement(deleteByActivationKeyStmt.bind().setString("activation_key", user.activationKey))
        }
        if (!StringUtils.isEmpty(user.resetKey)) {
            batch.addStatement(deleteByResetKeyStmt.bind().setString("reset_key", user.resetKey))
        }
        batch.addStatement(deleteByLoginStmt.bind().setString("login", user.login))
        batch.addStatement(deleteByEmailStmt.bind().setString("email", user.email!!.lowercase()))
        <%_ if(reactive) { _%>
        return session.execute(batch.build()).then()
        <%_ } else { _%>
        session.execute(batch.build())
        <%_ } _%>
    }

    <%_ if(reactive) { _%>
    private fun findOneFromIndex(stmt: BoundStatement): Mono<<%= asEntity('User') %>> {
        return session.execute(stmt).flatMap { rs -> rs.rows().next() }
            .map { row -> row.getString("id") }
            .flatMap(this::findById)
    }

    public fun deleteAll(): Mono<Void> {
        return Flux.just(truncateStmt, truncateByEmailStmt, truncateByLoginStmt, truncateByResetKeyStmt)
            .map(PreparedStatement::bind)
            .flatMap(session::execute)
            .then()
    }
    <%_ } else { _%>
    private fun findOneFromIndex(stmt: BoundStatement): Optional<<%= asEntity('User') %>> {
        val rs = session.execute(stmt)
        return Optional.ofNullable(rs.one())
            .map { it.getString("id") }
            .flatMap { it?.let { userDao.get(it) } }
    }

    fun deleteAll() {
        val truncate = truncateStmt.bind()
        session.execute(truncate)

        val truncateByEmail = truncateByEmailStmt.bind()
        session.execute(truncateByEmail)

        val truncateByLogin = truncateByLoginStmt.bind()
        session.execute(truncateByLogin)

        val truncateByResetKey = truncateByResetKeyStmt.bind()
        session.execute(truncateByResetKey)
    }
    <%_ } _%>

<%_ if (cacheManagerIsAvailable) { _%>
    companion object {
        const val USERS_BY_LOGIN_CACHE = "usersByLogin"

        const val USERS_BY_EMAIL_CACHE = "usersByEmail"
    }
<%_ } _%>
}
<%_ if (!reactive) { _%>
@Dao
interface UserDao {

    @Select
    fun get(id: String): Optional<User>

    @Select
    fun findAll(): PagingIterable<User>

    @Insert
    fun saveQuery(user: User): BoundStatement

    @Delete
    fun deleteQuery(user: User): BoundStatement
}

@Mapper
interface UserTokenMapper {
    @DaoFactory
    fun userTokenDao(@DaoKeyspace keyspace: CqlIdentifier): UserDao
}
    <%_ } _%>
<%_ } _%>
