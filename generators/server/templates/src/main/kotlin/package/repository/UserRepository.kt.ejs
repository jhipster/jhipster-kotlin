<%#
 Copyright 2013-2018 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see http://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
// TODO: cacheconfiguration needs to be completed before using this.
<%_
let cacheManagerIsAvailable = false;
if (['ehcache', 'hazelcast', 'infinispan'].includes(cacheProvider) || applicationType === 'gateway') {
    cacheManagerIsAvailable = true;
}
_%>
package <%=packageName%>.repository
<%_ if (databaseType === 'cassandra') { _%>

import com.datastax.driver.core.*
import com.datastax.driver.mapping.Mapper
import com.datastax.driver.mapping.MappingManager
<%_ } _%>

import <%=packageName%>.domain.User

<%_ if (cacheManagerIsAvailable === true) { _%>
import org.springframework.cache.annotation.Cacheable
<%_ } _%>
<%_ if (databaseType === 'sql' || databaseType === 'mongodb' || databaseType === 'couchbase') { _%>
import org.springframework.data.domain.Page
import org.springframework.data.domain.Pageable
<%_ } _%>
<%_ if (databaseType === 'sql') { _%>
import org.springframework.data.jpa.repository.EntityGraph
import org.springframework.data.jpa.repository.JpaRepository
<%_ } _%>
<%_ if (databaseType === 'mongodb') { _%>
import org.springframework.data.mongodb.repository.MongoRepository
<%_ } _%>
import org.springframework.stereotype.Repository
<%_ if (databaseType === 'cassandra') { _%>
import org.springframework.util.StringUtils

import javax.validation.ConstraintViolation
import javax.validation.ConstraintViolationException
import javax.validation.Validator
<%_ } _%>
import java.util.List
import java.util.Optional
<%_ if (databaseType === 'cassandra') { _%>
import java.util.Set
<%_ } _%>
<%_ if (databaseType !== 'cassandra') { _%>
import java.time.Instant
<%_ } _%>
<% if (databaseType === 'couchbase') { %>
import static <%=packageName%>.config.Constants.ID_DELIMITER
<% } %>
<%_ if (databaseType === 'sql') { _%>
/**
 * Spring Data JPA repository for the User entity.
 */
<%_ } _%>
<%_ if (databaseType === 'mongodb') { _%>
/**
 * Spring Data MongoDB repository for the User entity.
 */
<%_ } _%>
<%_ if (databaseType === 'couchbase') { _%>
/**
 * Spring Data Couchbase repository for the User entity.
 */
<%_ } _%>
<%_ if (databaseType === 'cassandra') { _%>
/**
 * Cassandra repository for the User entity.
 */
<%_ } _%>
<%_ if (databaseType === 'sql' || databaseType === 'mongodb' || databaseType === 'couchbase') { _%>
@Repository
interface UserRepository : <% if (databaseType === 'sql') { %>JpaRepository<User, Long><% } %><% if (databaseType === 'mongodb') { %>MongoRepository<User, String><% } %><% if (databaseType === 'couchbase') { %>N1qlCouchbaseRepository<User, String><% } %> {
    <%_ if (cacheManagerIsAvailable) { _%>

    companion object {

       const val USERS_BY_LOGIN_CACHE = "usersByLogin"

       const val USERS_BY_EMAIL_CACHE = "usersByEmail"
    }
    <%_ } _%>
    <%_ if (authenticationType !== 'oauth2') { _%>

    fun findOneByActivationKey(activationKey: String): Optional<User>
    <%_ } _%>

    fun findAllByActivatedIsFalseAndCreatedDateBefore(dateTime: Instant): List<User>
    <%_ if (authenticationType !== 'oauth2') { _%>

    fun findOneByResetKey(resetKey: String): Optional<User>
    <%_ } _%>

    <%_ if (databaseType === 'couchbase' || databaseType === 'mongodb') { _%>
        <%_ if (cacheManagerIsAvailable === true) { _%>
    @Cacheable(cacheNames = [USERS_BY_EMAIL_CACHE])
        <%_ } _%>
    <%_ } _%>
    fun findOneByEmailIgnoreCase(email: String): Optional<User>

    <%_ if (databaseType === 'couchbase') { _%>
        <%_ if (cacheManagerIsAvailable === true) { _%>
    @Cacheable(cacheNames = [USERS_BY_LOGIN_CACHE])
        <%_ } _%>        
    fun findOneByLogin(login: String): Optional<User>{
        return findById(User.PREFIX + ID_DELIMITER + login);
    }

    fun findById(login: String): Optional<User>
    <%_ } else if (databaseType === 'mongodb') { _%>
        <%_ if (cacheManagerIsAvailable === true) { _%>
    @Cacheable(cacheNames = [USERS_BY_LOGIN_CACHE])
        <%_ } _%>
    fun findOneByLogin(login: String): Optional<User>
    <%_ } else { _%>
    fun findOneByLogin(login: String): Optional<User>
    <%_ } _%>
    <%_ if (databaseType === 'sql') { _%>

    @EntityGraph(attributePaths = ["authorities"])
    fun findOneWithAuthoritiesById(id: <%= pkType %> ): Optional<User> 

    @EntityGraph(attributePaths = ["authorities"])
    <%_ if (cacheManagerIsAvailable === true) { _%>
    @Cacheable(cacheNames = [USERS_BY_LOGIN_CACHE])
    <%_ } _%>
    fun findOneWithAuthoritiesByLogin(login: String): Optional<User>

    @EntityGraph(attributePaths = ["authorities"])
    <%_ if (cacheManagerIsAvailable === true) { _%>
    @Cacheable(cacheNames = [USERS_BY_EMAIL_CACHE])
    <%_ } _%>
    fun findOneWithAuthoritiesByEmail(email: String): Optional<User>
    <%_ } _%>

    fun findAllByLoginNot(pageable: Pageable, login: String): Page<User>
}
<%_ } else if (databaseType === 'cassandra') { _%>
@Repository
class UserRepository {
    
    private val mapper: Mapper<User> = MappingManager(session).mapper(User::class.java)

    private val findAllStmt = session.prepare("SELECT * FROM user")

    private val findOneByActivationKeyStmt = session.prepare(
        "SELECT id " +
            "FROM user_by_activation_key " +
            "WHERE activation_key = :activation_key")

    private val findOneByResetKeyStmt = session.prepare(
        ("SELECT id " +
            "FROM user_by_reset_key " +
            "WHERE reset_key = :reset_key"))

    private val insertByActivationKeyStmt = session.prepare(
        ("INSERT INTO user_by_activation_key (activation_key, id) " + "VALUES (:activation_key, :id)"))

    private val insertByResetKeyStmt = session.prepare(
        ("INSERT INTO user_by_reset_key (reset_key, id) " + "VALUES (:reset_key, :id)"))

    private val deleteByActivationKeyStmt = session.prepare(
        ("DELETE FROM user_by_activation_key " + "WHERE activation_key = :activation_key"))

    private val deleteByResetKeyStmt = session.prepare(
        ("DELETE FROM user_by_reset_key " + "WHERE reset_key = :reset_key"))

    private val findOneByLoginStmt = session.prepare(
        ("SELECT id " +
            "FROM user_by_login " +
            "WHERE login = :login"))

    private val insertByLoginStmt = session.prepare(
        ("INSERT INTO user_by_login (login, id) " + "VALUES (:login, :id)"))

    private val deleteByLoginStmt = session.prepare(
        ("DELETE FROM user_by_login " + "WHERE login = :login"))

    private val findOneByEmailStmt = session.prepare(
        ("SELECT id " +
            "FROM user_by_email " +
            "WHERE email     = :email"))

    private val insertByEmailStmt = session.prepare(
        ("INSERT INTO user_by_email (email, id) " + "VALUES (:email, :id)"))

    private val deleteByEmailStmt = session.prepare(
        ("DELETE FROM user_by_email " + "WHERE email = :email"))

    private val truncateStmt = session.prepare("TRUNCATE user")

    private val truncateByResetKeyStmt = session.prepare("TRUNCATE user_by_reset_key")

    private val truncateByLoginStmt = session.prepare("TRUNCATE user_by_login")

    private val truncateByEmailStmt = session.prepare("TRUNCATE user_by_email")

    fun findById(id: String): Optional<User> {
        return Optional.ofNullable(mapper.get(id))
    }

    fun findOneByActivationKey(activationKey: String): Optional<User> {
        val stmt = findOneByActivationKeyStmt.bind()
        stmt.setString("activation_key", activationKey)
        return findOneFromIndex(stmt)
    }

    fun findOneByResetKey(resetKey: String): Optional<User> {
        val stmt = findOneByResetKeyStmt.bind()
        stmt.setString("reset_key", resetKey)
        return findOneFromIndex(stmt)
    }
    <%_ if (cacheManagerIsAvailable === true) { _%>
    @Cacheable(cacheNames = [USERS_BY_EMAIL_CACHE])
    <%_ } _%>
    fun findOneByEmailIgnoreCase(email: String): Optional<User> {
        val stmt = findOneByEmailStmt.bind()
        stmt.setString("email", email.toLowerCase())
        return findOneFromIndex(stmt)
    }
    <%_ if (cacheManagerIsAvailable === true) { _%>
    @Cacheable(cacheNames = [USERS_BY_LOGIN_CACHE])
    <%_ } _%>
    fun findOneByLogin(login: String): Optional<User> {
        val stmt = findOneByLoginStmt.bind()
        stmt.setString("login", login)
        return findOneFromIndex(stmt)
    }

    fun findAll(): List<User> {
        return mapper.map(session.execute(findAllStmt.bind())).all()
    }

    fun save(user: User): User {
        val violations = validator.validate(user)
        if (violations != null && !violations.isEmpty()) {
            throw ConstraintViolationException(violations)
        }
        val oldUser = mapper.get(user.id)
        if (oldUser != null) {
            if (!StringUtils.isEmpty(oldUser.activationKey) && oldUser.activationKey != user.activationKey) {
                session.execute(deleteByActivationKeyStmt.bind().setString("activation_key", oldUser.activationKey))
            }
            if (!StringUtils.isEmpty(oldUser.resetKey) && oldUser.resetKey != user.resetKey) {
                session.execute(deleteByResetKeyStmt.bind().setString("reset_key", oldUser.resetKey))
            }
            if (!StringUtils.isEmpty(oldUser.login) && oldUser.login != user.login) {
                session.execute(deleteByLoginStmt.bind().setString("login", oldUser.login))
            }
            if (!StringUtils.isEmpty(oldUser.email) && !oldUser.email.equals(user.email, ignoreCase = true)) {
                session.execute(deleteByEmailStmt.bind().setString("email", oldUser.email.toLowerCase()))
            }
        }
        val batch = BatchStatement()
        batch.add(mapper.saveQuery(user))
        if (!StringUtils.isEmpty(user.activationKey)) {
            batch.add(insertByActivationKeyStmt.bind()
                .setString("activation_key", user.activationKey)
                .setString("id", user.id))
        }
        if (!StringUtils.isEmpty(user.resetKey)) {
            batch.add(insertByResetKeyStmt.bind()
                .setString("reset_key", user.resetKey)
                .setString("id", user.id))
        }
        batch.add(insertByLoginStmt.bind()
            .setString("login", user.login)
            .setString("id", user.id))
        batch.add(insertByEmailStmt.bind()
            .setString("email", user.email.toLowerCase())
            .setString("id", user.id))
        session.execute(batch)
        return user
    }

    fun delete(user: User) {
        val batch = BatchStatement()
        batch.add(mapper.deleteQuery(user))
        if (!StringUtils.isEmpty(user.activationKey)) {
            batch.add(deleteByActivationKeyStmt.bind().setString("activation_key", user.activationKey))
        }
        if (!StringUtils.isEmpty(user.resetKey)) {
            batch.add(deleteByResetKeyStmt.bind().setString("reset_key", user.resetKey))
        }
        batch.add(deleteByLoginStmt.bind().setString("login", user.login))
        batch.add(deleteByEmailStmt.bind().setString("email", user.email.toLowerCase()))
        session.execute(batch)
    }

    private fun findOneFromIndex(stmt: BoundStatement): Optional<User> {
        val rs = session.execute(stmt)
        return if (rs.isExhausted) {
            Optional.empty()
        } else Optional.ofNullable(rs.one().getString("id"))
            .map { id -> Optional.ofNullable(mapper.get(id)) }
            .get()
    }

    fun deleteAll() {
        val truncate = truncateStmt.bind()
        session.execute(truncate)

        val truncateByEmail = truncateByEmailStmt.bind()
        session.execute(truncateByEmail)

        val truncateByLogin = truncateByLoginStmt.bind()
        session.execute(truncateByLogin)

        val truncateByResetKey = truncateByResetKeyStmt.bind()
        session.execute(truncateByResetKey)
    }
    
    <%_ if (cacheManagerIsAvailable) { _%>
    companion object {
        const val USERS_BY_LOGIN_CACHE = "usersByLogin"
        const val USERS_BY_EMAIL_CACHE = "usersByEmail"
    }
    <%_ } _%>
}
<%_ } _%>
