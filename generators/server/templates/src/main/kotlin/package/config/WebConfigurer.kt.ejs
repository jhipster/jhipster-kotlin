<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.config

<%_ if (reactive) { _%>
import com.fasterxml.jackson.databind.ObjectMapper
<%_ } _%>
<%_ if (!skipClient || devDatabaseTypeH2Any) { _%>
import tech.jhipster.config.JHipsterConstants
<%_ } _%>
import tech.jhipster.config.JHipsterProperties
<%_ if (devDatabaseTypeH2Any) { _%>
import tech.jhipster.config.h2.H2ConfigurationHelper
<%_ } _%>
<%_ if (!skipClient && reactive) { _%>
import tech.jhipster.web.filter.<% if (reactive) { %>reactive.<% } %>CachingHttpHeadersFilter
<%_ } _%>
import org.slf4j.LoggerFactory
<%_ if (!reactive) { _%>
import org.springframework.boot.web.server.MimeMappings
import org.springframework.boot.web.server.WebServerFactory
import org.springframework.boot.web.server.WebServerFactoryCustomizer
import org.springframework.boot.web.servlet.ServletContextInitializer
import org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory
<%_ } _%>
<%_ if (reactive && !skipClient) { _%>
import org.springframework.boot.autoconfigure.web.reactive.ResourceHandlerRegistrationCustomizer
<%_ } _%>
<%_ if (messageBrokerKafka) { _%>
import org.springframework.cloud.stream.annotation.EnableBinding
<%_ } _%>
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
<%_ if (reactive) { _%>
    <%_ if (!skipClient) { _%>
import org.springframework.context.annotation.Profile
    <%_ } _%>
import org.springframework.core.annotation.Order
<%_ } _%>
<%_ if (reactive && !databaseTypeNo) { _%>
import org.springframework.data.web.ReactivePageableHandlerMethodArgumentResolver
import org.springframework.data.web.ReactiveSortHandlerMethodArgumentResolver
<%_ } _%>
<%_ if (!reactive || (devDatabaseTypeH2Any && reactive)) { _%>
import org.springframework.core.env.Environment
import org.springframework.core.env.Profiles
<%_ } _%>
<%_ if (reactive && !skipClient) { _%>
import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher
import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers
<%_ } _%>
import org.springframework.util.CollectionUtils
<%_ if (!reactive) { _%>
import org.springframework.web.cors.UrlBasedCorsConfigurationSource
import org.springframework.web.filter.CorsFilter
<%_ } _%>
<%_ if (reactive) { _%>
import org.springframework.web.cors.reactive.CorsWebFilter
import org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource
import org.springframework.web.reactive.config.WebFluxConfigurer
    <%_ if (!skipClient) { _%>
import org.springframework.web.reactive.function.server.HandlerFunction
    <%_ } _%>
import org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver
    <%_ if (!skipClient) { _%>
import org.springframework.web.server.ServerWebExchange
    <%_ } _%>
import org.springframework.web.server.WebExceptionHandler
    <%_ if (!skipClient) { _%>
import org.springframework.web.server.WebFilter
import org.springframework.web.server.WebFilterChain
    <%_ } _%>
import org.zalando.problem.spring.webflux.advice.ProblemExceptionHandler
import org.zalando.problem.spring.webflux.advice.ProblemHandling
    <%_ if (!skipClient) { _%>
import reactor.core.publisher.Mono
    <%_ } _%>
<%_ } _%>
<%_ if (!reactive) { _%>

import javax.servlet.DispatcherType
import javax.servlet.ServletContext
import javax.servlet.ServletException
    <%_ if (!skipClient) { _%>
import java.io.File
import java.nio.charset.StandardCharsets
import java.nio.file.Paths
import java.util.EnumSet

import java.net.URLDecoder.decode
    <%_ } _%>
<%_ } _%>
<%_ if (reactive && !skipClient) { _%>

import java.util.concurrent.TimeUnit
<%_ } _%>

/**
 * Configuration of web application with Servlet 3.0 APIs.
 */
<%_ if (messageBrokerKafka) { _%>
@EnableBinding(KafkaSseConsumer::class, KafkaSseProducer::class)
<%_ } _%>
@Configuration
class WebConfigurer(
    <% if (!reactive || (devDatabaseTypeH2Any && reactive)) { %>
    private val env: Environment,
    <%_ } _%>
    private val jHipsterProperties: JHipsterProperties
) : <% if (!reactive) { %>ServletContextInitializer<% if (!skipClient) { %>, WebServerFactoryCustomizer<WebServerFactory><% } %><% } %><% if (reactive) { %>WebFluxConfigurer<% } %> {

    <%_ if (devDatabaseTypeH2Any && reactive) { _%>
    init {
        if (env.acceptsProfiles(Profiles.of(JHipsterConstants.SPRING_PROFILE_DEVELOPMENT))) {
            try {
                H2ConfigurationHelper.initH2Console()
            } catch (e: Exception) {
                // Console may already be running on another app or after a refresh.
                e.printStackTrace()
            }
        }
    }
    <%_ } _%>

    private val log = LoggerFactory.getLogger(javaClass)
    <%_ if (!reactive) { _%>

    @Throws(ServletException::class)
    override fun onStartup(servletContext: ServletContext) {
        if (env.activeProfiles.isNotEmpty()) {
            log.info("Web application configuration, using profiles: {}", *env.activeProfiles as Array<*>)
        }

        <%_ if (devDatabaseTypeH2Any) { _%>
        if (env.acceptsProfiles(Profiles.of(JHipsterConstants.SPRING_PROFILE_DEVELOPMENT))) {
            initH2Console(servletContext)
        }
        <%_ } _%>
        log.info("Web application fully configured")
    }
    <%_ if (!skipClient) { _%>

    /**
     * Customize the Servlet engine: Mime types, the document root, the cache.
     */
    override fun customize(server: WebServerFactory) {
        // When running in an IDE or with <% if (buildToolGradle) { %>./gradlew bootRun<% } else { %>./mvnw spring-boot:run<% } %>, set location of the static web assets.
        setLocationForStaticAssets(server)
    }

    private fun setLocationForStaticAssets(server: WebServerFactory) {
        if (server is ConfigurableServletWebServerFactory) {
            val prefixPath = resolvePathPrefix()
            val root = File(prefixPath + "<%= CLIENT_DIST_DIR %>")
            if (root.exists() && root.isDirectory) {
                server.setDocumentRoot(root)
            }
        }
    }

    /**
     * Resolve path prefix to static resources.
     */
    private fun resolvePathPrefix(): String {
        val fullExecutablePath = decode(this.javaClass.getResource("").path, StandardCharsets.UTF_8)
        val rootPath = Paths.get(".").toUri().normalize().path
        val extractedPath = fullExecutablePath.replace(rootPath, "")
        val extractionEndIndex = extractedPath.indexOf("<%= BUILD_DIR %>")
        if (extractionEndIndex <= 0) {
            return ""
        }
        return extractedPath.substring(0, extractionEndIndex)
    }

        <%_ } _%>
    <%_ } _%>

    @Bean
    fun corsFilter(): Cors<% if (reactive) { %>Web<% } %>Filter {
        val source = UrlBasedCorsConfigurationSource()
        val config = jHipsterProperties.cors
        if (!CollectionUtils.isEmpty(config.allowedOrigins) || ! CollectionUtils.isEmpty(config.allowedOriginPatterns)) {
            log.debug("Registering CORS filter")
            source.apply {
                registerCorsConfiguration("/api/**", config)
                registerCorsConfiguration("/management/**", config)
                registerCorsConfiguration("/v3/api-docs", config)
                registerCorsConfiguration("/swagger-ui/**", config)
                <%_ if (applicationTypeGateway) { _%>
                registerCorsConfiguration("/*/api/**", config)
                registerCorsConfiguration("/services/*/api/**", config)
                registerCorsConfiguration("/*/management/**", config)
                <%_ } _%>
            }
        }
        return Cors<% if (reactive) { %>Web<% } %>Filter(source)
    }
    <%_ if (reactive) { _%>

        <%_ if (!databaseTypeNo) { _%>
    // TODO: remove when this is supported in spring-data / spring-boot
    @Bean
    fun reactivePageableHandlerMethodArgumentResolver() = ReactivePageableHandlerMethodArgumentResolver()

    // TODO: remove when this is supported in spring-boot
    @Bean
    fun reactiveSortHandlerMethodArgumentResolver() = ReactiveSortHandlerMethodArgumentResolver()
        <%_ } _%>

    @Bean
    @Order(-2) // The handler must have precedence over WebFluxResponseStatusExceptionHandler and Spring Boot's ErrorWebExceptionHandler
    fun problemExceptionHandler(mapper: ObjectMapper, problemHandling: ProblemHandling): WebExceptionHandler {
        return ProblemExceptionHandler(mapper, problemHandling)
    }
        <%_ if (!skipClient) { _%>

    @Bean
    fun registrationCustomizer(): ResourceHandlerRegistrationCustomizer {
        // Disable built-in cache control to use our custom filter instead
        return ResourceHandlerRegistrationCustomizer { registration -> registration.setCacheControl(null)}
    }

    @Bean
    @Profile(JHipsterConstants.SPRING_PROFILE_PRODUCTION)
    fun cachingHttpHeadersFilter() : CachingHttpHeadersFilter {
        // Use a cache filter that only match selected paths
        return CachingHttpHeadersFilter(TimeUnit.DAYS.toMillis(jHipsterProperties.http.cache.timeToLiveInDays.toLong()))
    }
        <%_ } _%>
    <%_ } _%>
    <%_ if (devDatabaseTypeH2Any && !reactive) { _%>

    /**
     * Initializes H2 console.
     */
    private fun initH2Console(servletContext: ServletContext) {
        log.debug("Initialize H2 console")
        H2ConfigurationHelper.initH2Console(servletContext)
    }
    <%_ } _%>
}
