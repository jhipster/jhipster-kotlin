<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.config

import tech.jhipster.config.JHipsterProperties

import <%= packageName %>.gateway.accesscontrol.AccessControlFilter
import <%= packageName %>.gateway.responserewriting.SwaggerBasePathRewritingFilter
<%_ if (cacheProvider === 'hazelcast') { _%>
import <%= packageName %>.gateway.ratelimiting.RateLimitingFilter
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty
<%_ } _%>

import org.springframework.cloud.netflix.zuul.filters.RouteLocator
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration

@Configuration
class GatewayConfiguration {

    @Configuration
    class SwaggerBasePathRewritingConfiguration {
        @Bean
        fun swaggerBasePathRewritingFilter() = SwaggerBasePathRewritingFilter()
    }

    @Configuration
    class AccessControlFilterConfiguration {
        @Bean
        fun accessControlFilter(routeLocator: RouteLocator, jHipsterProperties: JHipsterProperties) =
            AccessControlFilter(routeLocator, jHipsterProperties)
    }

    <%_ if (cacheProvider === 'hazelcast') { _%>
    /**
     * Configures the Zuul filter that limits the number of API calls per user.
     *
     *
     * This uses Bucket4J to limit the API calls, see [<%= packageName %>.gateway.ratelimiting.RateLimitingFilter].
     */
    @Configuration
    @ConditionalOnProperty("jhipster.gateway.rate-limiting.enabled")
    class RateLimitingConfiguration(private val jHipsterProperties: JHipsterProperties) {
        @Bean
        fun rateLimitingFilter() = RateLimitingFilter(jHipsterProperties)
    }
    <%_ } _%>
}
