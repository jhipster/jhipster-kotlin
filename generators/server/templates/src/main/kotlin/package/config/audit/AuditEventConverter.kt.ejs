<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.config.audit

import <%=packageName%>.domain.PersistentAuditEvent

import org.springframework.boot.actuate.audit.AuditEvent
import org.springframework.security.web.authentication.WebAuthenticationDetails
import org.springframework.stereotype.Component

@Component
class AuditEventConverter {

    /**
     * Convert a list of [PersistentAuditEvent] to a list of [AuditEvent].
     *
     * @param persistentAuditEvents the list to convert.
     * @return the converted list.
     */
    fun convertToAuditEvent(persistentAuditEvents: Iterable<PersistentAuditEvent>?) =
        when (persistentAuditEvents) {
            null -> mutableListOf()
            else -> persistentAuditEvents.asSequence().mapNotNull { convertToAuditEvent(it) }.toMutableList()
        }

    /**
     * Convert a [PersistentAuditEvent] to an [AuditEvent].
     *
     * @param persistentAuditEvent the event to convert.
     * @return the converted list.
     */
    fun convertToAuditEvent(persistentAuditEvent: PersistentAuditEvent?): AuditEvent? =
        when (persistentAuditEvent) {
            null -> null
            else -> AuditEvent(
                persistentAuditEvent.auditEventDate, persistentAuditEvent.principal,
                persistentAuditEvent.auditEventType, convertDataToObjects(persistentAuditEvent.data)
            )
        }

    /**
     * Internal conversion. This is needed to support the current SpringBoot actuator[ AuditEventRepository] interface.
     *
     * @param data the data to convert.
     * @return a map of [String], [Any].
     */
    fun convertDataToObjects(data: MutableMap<String, String?>?): MutableMap<String, Any?> =
        data?.mapValuesTo(mutableMapOf()) { it.value } ?: mutableMapOf()

    /**
     * Internal conversion. This method will allow to save additional data.
     * By default, it will save the object as string.
     *
     * @param data the data to convert.
     * @return a map of [String], [String].
     */
    fun convertDataToStrings(data: Map<String, Any?>?): Map<String, String?> {
        val results = mutableMapOf<String, String?>()
        data?.forEach { (key, value) ->
            // Extract the data that will be saved.
            if (value is WebAuthenticationDetails) {
                results["remoteAddress"] = value.remoteAddress
                results["sessionId"] = value.sessionId
            } else {
                results[key] = value?.toString()
            }
        }
        return results
    }
}
