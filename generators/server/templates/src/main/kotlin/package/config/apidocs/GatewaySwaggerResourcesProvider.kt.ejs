<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.config.apidocs

import java.util.*
import java.util.concurrent.TimeUnit
import org.springframework.beans.factory.annotation.Qualifier
import org.springframework.beans.factory.annotation.Value
import org.springframework.cloud.gateway.route.Route
import org.springframework.cloud.gateway.route.RouteLocator
import org.springframework.context.annotation.Configuration
import org.springframework.context.annotation.Primary
import org.springframework.context.annotation.Profile
import org.springframework.stereotype.Component
import reactor.core.scheduler.Schedulers
import springfox.documentation.swagger.web.SwaggerResource
import springfox.documentation.swagger.web.SwaggerResourcesProvider
import tech.jhipster.config.JHipsterConstants

/**
 * Retrieves all registered microservices Swagger resources.
 */
@Component
@Primary
@Profile(JHipsterConstants.SPRING_PROFILE_API_DOCS)
@Configuration
class GatewaySwaggerResourcesProvider(
    private val routeLocator: RouteLocator,
    @Qualifier("SwaggerResources") private val swaggerResourcesProvider: SwaggerResourcesProvider
) : SwaggerResourcesProvider {

    @Value("\${eureka.instance.appname:<%= baseName.toLowerCase() %>}")
    private var gatewayName: String? = null

    override fun get(): MutableList<SwaggerResource> {
        val swaggerResources = mutableListOf(
            // Add the default swagger resource that correspond to the gateway's own swagger doc
            swaggerResource(gatewayName.plus(" (default)"), "/v3/api-docs"),
            swaggerResource(gatewayName.plus(" (management)"), "/v3/api-docs?group=management")
        )

        val microservices = routeLocator.routes.map { getMicroservicesName(it) }
            .collectList()
            .defaultIfEmpty(listOf())
            .subscribeOn(Schedulers.boundedElastic())
            .toFuture()
            .orTimeout(10, TimeUnit.SECONDS)
            .join()

        microservices
            .filter { isNotGateway(it) }
            <%_ if (serviceDiscoveryType === 'consul') { _%>
            .filter { isNotConsul(it) }
            <%_ } _%>
            .forEach { swaggerResources.add(swaggerResource(it, getMicroserviceApiDocs(it))) }

        return swaggerResources
    }

    companion object {
        fun swaggerResource(name: String, location: String) =
            SwaggerResource().apply {
                this.name = name
                this.location = location
                swaggerVersion = "3.0"
            }
    }
    
    private fun isNotGateway(name: String) = !name.equals(gatewayName, ignoreCase = true)

    <%_ if (serviceDiscoveryType === 'consul') { _%>
    private fun isNotConsul(name: String) = !name.equals("consul", ignoreCase = true)

    <%_ } _%>
   
    private fun getMicroserviceApiDocs(name: String): String {
        return "/services/$name/v3/api-docs"
    }

    private fun getMicroservicesName(route: Route): String {
        return route.uri.toString().replace("lb://", "").toLowerCase()
    }
}
