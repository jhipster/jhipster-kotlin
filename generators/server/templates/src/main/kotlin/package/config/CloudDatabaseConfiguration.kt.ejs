<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.config
<%_ if (databaseType === 'mongodb') { _%>

import com.github.mongobee.Mongobee

import tech.jhipster.config.JHipsterConstants
import tech.jhipster.domain.util.JSR310DateConverters.DateToZonedDateTimeConverter
import tech.jhipster.domain.util.JSR310DateConverters.DurationToLongConverter
import tech.jhipster.domain.util.JSR310DateConverters.ZonedDateTimeToDateConverter
<%_ } else { _%>

import tech.jhipster.config.JHipsterConstants
<%_ } _%>

<%_ if (databaseType === 'sql' || databaseType === 'mongodb') { _%>
import org.slf4j.LoggerFactory
<%_ } _%>
<%_ if (cacheProvider === 'hazelcast') { _%>
import org.springframework.cache.CacheManager
<%_ } _%>
<%_ if (databaseType === 'mongodb') { _%>
import org.springframework.cloud.Cloud
import org.springframework.cloud.CloudException
<%_ } _%>
import org.springframework.cloud.config.java.AbstractCloudConfig
<%_ if (databaseType === 'mongodb') { _%>
import org.springframework.cloud.service.common.MongoServiceInfo
<%_ } _%>
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.context.annotation.Profile
<%_ if (databaseType === 'mongodb') { _%>
import org.springframework.core.convert.converter.Converter
import org.springframework.data.mongodb.MongoDbFactory
import org.springframework.data.mongodb.core.MongoTemplate
import org.springframework.data.mongodb.core.convert.MongoCustomConversions
import org.springframework.data.mongodb.core.mapping.event.ValidatingMongoEventListener
import org.springframework.data.mongodb.repository.config.Enable<% if (reactive) { %>Reactive<% } %>MongoRepositories
import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean
<%_ } _%>
<%_ if (databaseType === 'sql') { _%>

import javax.sql.DataSource
import org.springframework.boot.context.properties.ConfigurationProperties
<%_ } _%>

<%_ if (databaseType === 'sql') { _%>
private const val CLOUD_CONFIGURATION_HIKARI_PREFIX = "spring.datasource.hikari"
<%_ } _%>

@Configuration
<%_ if (databaseType === 'mongodb') { _%>
@Enable<% if (reactive) { %>Reactive<% } %>MongoRepositories("<%= packageName %>.repository")
<%_ } _%>
@Profile(JHipsterConstants.SPRING_PROFILE_CLOUD)
class CloudDatabaseConfiguration : AbstractCloudConfig() {
    <%_ if (databaseType === 'sql' || databaseType === 'mongodb') { _%>

    private val log = LoggerFactory.getLogger(javaClass)
    <%_ } _%>
    <%_ if (databaseType === 'sql') { _%>

    @Bean
    @ConfigurationProperties(CLOUD_CONFIGURATION_HIKARI_PREFIX)
    fun dataSource(<% if (cacheProvider === 'hazelcast') { %>cacheManager: CacheManager<% } %>): DataSource {
        log.info("Configuring JDBC datasource from a cloud provider")
        return connectionFactory().dataSource()
    }
    <%_ } _%>
    <%_ if (databaseType === 'mongodb') { _%>

    @Bean
    fun mongoFactory(): MongoDbFactory = connectionFactory().mongoDbFactory()

    @Bean
    fun validator() = LocalValidatorFactoryBean()

    @Bean
    fun validatingMongoEventListener() = ValidatingMongoEventListener(validator())

    @Bean
    fun customConversions() =
        MongoCustomConversions(
            mutableListOf<Converter<*, *>>(
                DateToZonedDateTimeConverter.INSTANCE,
                ZonedDateTimeToDateConverter.INSTANCE,
                DurationToLongConverter.INSTANCE
            )
        )

    @Bean
    fun mongobee(mongoDbFactory: MongoDbFactory, mongoTemplate: MongoTemplate, cloud: Cloud): Mongobee {
        log.debug("Configuring Cloud Mongobee")
        val matchingServiceInfos = cloud.getServiceInfos(MongoDbFactory::class.java)

        if (matchingServiceInfos.size != 1) {
            throw CloudException("No unique service matching MongoDbFactory found. Expected 1, found $matchingServiceInfos.size")
        }
        val info = matchingServiceInfos[0] as MongoServiceInfo
        return Mongobee(info.uri).apply {
            setDbName(mongoDbFactory.db.name)
            setMongoTemplate(mongoTemplate)
            // package to scan for migrations
            setChangeLogsScanPackage("<%= packageName %>.config.dbmigrations")
            isEnabled = true
        }
    }
    <%_ } _%>
}
