<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.config

import java.lang.reflect.Method
import java.util.Optional

import org.springframework.beans.factory.annotation.Qualifier
import org.springframework.core.MethodParameter
import org.springframework.core.annotation.AnnotationUtils
import org.springframework.data.domain.PageRequest
import org.springframework.data.domain.Pageable
import org.springframework.data.domain.Sort
import org.springframework.data.web.PageableDefault
import org.springframework.lang.Nullable
import org.springframework.util.Assert
import org.springframework.util.ObjectUtils
import org.springframework.util.StringUtils
import org.springframework.web.reactive.BindingContext
import org.springframework.web.reactive.result.method.SyncHandlerMethodArgumentResolver
import org.springframework.web.server.ServerWebExchange

class ReactivePageableHandlerMethodArgumentResolver
@JvmOverloads
constructor(
    private val sortResolver: ReactiveSortHandlerMethodArgumentResolver = DEFAULT_SORT_RESOLVER
) : SyncHandlerMethodArgumentResolver {


    private var fallbackPageable: Pageable? = DEFAULT_PAGE_REQUEST
    /**
     * The parameter name to be used to find the page number in the request. Defaults to `page`. Must not be `null` or empty.
     */
    private var pageParameterName = DEFAULT_PAGE_PARAMETER
        set(pageParameterName) {
            Assert.hasText(pageParameterName, "Page parameter name must not be empty!")
            field = pageParameterName
        }
    /**
     * The parameter name to be used to find the page size in the request. Defaults to `size`. Must not be `null` or empty.
     */
    private var sizeParameterName = DEFAULT_SIZE_PARAMETER
        set(sizeParameterName) {
            Assert.hasText(sizeParameterName, "Size parameter name must not be null or empty!")
            field = sizeParameterName
        }
    private var prefix = DEFAULT_PREFIX
    private var qualifierDelimiter = DEFAULT_QUALIFIER_DELIMITER
    /**
     * The maximum page size to be accepted. This allows to put an upper boundary of the page size to prevent
     * potential attacks trying to issue an [OutOfMemoryError]. Defaults to [DEFAULT_MAX_PAGE_SIZE].
     */
    private var maxPageSize = DEFAULT_MAX_PAGE_SIZE
    /**
     * Configures whether to expose and assume 1-based page number indexes in the request parameters. Defaults to
     * false, meaning a page number of 0 in the request equals the first page. If this is set to
     * true, a page number of 1 in the request will be considered the first page.
     */
    private var isOneIndexedParameters = false

    /*
     * (non-Javadoc)
     * @see org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver#supportsParameter(org.springframework.core.MethodParameter)
     */
    override fun supportsParameter(parameter: MethodParameter): Boolean {
        return Pageable::class.java == parameter.parameterType
    }

    /*
     * (non-Javadoc)
     * @see org.springframework.web.reactive.result.method.SyncHandlerMethodArgumentResolver#resolveArgumentValue(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)
     */
    override fun resolveArgumentValue(parameter: MethodParameter, bindingContext: BindingContext,
                                      exchange: ServerWebExchange): Pageable {

        val queryParams = exchange.request.queryParams
        val page = queryParams.getFirst(getParameterNameToUse(pageParameterName, parameter))
        val pageSize = queryParams.getFirst(getParameterNameToUse(sizeParameterName, parameter))

        val sort = sortResolver.resolveArgumentValue(parameter, bindingContext, exchange)

        val pageable = getPageable(parameter, page, pageSize)

        return if (sort.isSorted) PageRequest.of(pageable.pageNumber, pageable.pageSize, sort) else pageable
    }

    /**
     * Configures the [Pageable] to be used as fallback in case no [PageableDefault] or
     * [PageableDefault] (the latter only supported in legacy mode) can be found at the method parameter to be
     * resolved.
     *
     *
     * If you set this to [Optional.empty], be aware that you controller methods will get `null`
     * handed into them in case no [Pageable] data can be found in the request. Note, that doing so will require you
     * supply both the page *and* the size parameter with the requests as there will be no default for any of the
     * parameters available.
     *
     * @param fallbackPageable the [Pageable] to be used as general fallback.
     */
    fun setFallbackPageable(fallbackPageable: Pageable) {
        Assert.notNull(fallbackPageable, "Fallback Pageable must not be null!")

        this.fallbackPageable = fallbackPageable
    }

    /**
     * Returns whether the given [Pageable] is the fallback one.
     *
     * @param pageable can be `null`.
     * @return true if the given [Pageable] is the fallback one; false otherwise.
     */
    fun isFallbackPageable(pageable: Pageable): Boolean {
        return if (fallbackPageable == null) false else fallbackPageable == pageable
    }

    /**
     * Configures a general prefix to be prepended to the page number and page size parameters. Useful to namespace the
     * property names used in case they are clashing with ones used by your application. By default, no prefix is used.
     *
     * @param prefix the prefix to be used or `null` to reset to the default.
     */
    fun setPrefix(prefix: String?) {
        this.prefix = prefix ?: DEFAULT_PREFIX
    }

    /**
     * The delimiter to be used between the qualifier and the actual page number and size properties. Defaults to
     * `_`. So a qualifier of `foo` will result in a page number parameter of `foo_page`.
     *
     * @param qualifierDelimiter the delimiter to be used or `null` to reset to the default.
     */
    fun setQualifierDelimiter(qualifierDelimiter: String?) {
        this.qualifierDelimiter = qualifierDelimiter ?: DEFAULT_QUALIFIER_DELIMITER
    }

    private fun getPageable(methodParameter: MethodParameter, @Nullable pageString: String?,
                            @Nullable pageSizeString: String?): Pageable {
        assertPageableUniqueness(methodParameter)

        val defaultOrFallback = getDefaultFromAnnotationOrFallback(methodParameter)!!.toOptional()

        val page = parseAndApplyBoundaries(pageString, Integer.MAX_VALUE, true)
        val pageSize = parseAndApplyBoundaries(pageSizeString, maxPageSize, false)

        if (!(page.isPresent && pageSize.isPresent) && !defaultOrFallback.isPresent) {
            return Pageable.unpaged()
        }

        val p = page.orElseGet { defaultOrFallback.map<Int> { it.pageNumber }.orElseThrow<IllegalStateException> { IllegalStateException() } }
        var ps = pageSize.orElseGet { defaultOrFallback.map<Int> { it.pageSize }.orElseThrow<IllegalStateException> { IllegalStateException() } }

        // Limit lower bound
        ps = if (ps < 1) defaultOrFallback.map<Int> { it.pageSize }.orElseThrow<IllegalStateException> { IllegalStateException() } else ps
        // Limit upper bound
        ps = if (ps > maxPageSize) maxPageSize else ps

        return PageRequest.of(p, ps, defaultOrFallback.map<Sort> { it.sort }.orElseGet { Sort.unsorted() })
    }

    /**
     * Returns the name of the request parameter to find the [Pageable] information in. Inspects the given
     * [MethodParameter] for [Qualifier] present and prefixes the given source parameter name with it.
     *
     * @param source the basic parameter name.
     * @param parameter the [MethodParameter] potentially qualified.
     * @return the name of the request parameter.
     */
    private fun getParameterNameToUse(source: String, @Nullable parameter: MethodParameter?): String {

        val builder = StringBuilder(prefix)

        val qualifier = parameter?.getParameterAnnotation(Qualifier::class.java)

        if (qualifier != null) {
            builder.append(qualifier.value)
            builder.append(qualifierDelimiter)
        }

        return builder.append(source).toString()
    }

    private fun getDefaultFromAnnotationOrFallback(methodParameter: MethodParameter): Pageable? {
        val defaults = methodParameter.getParameterAnnotation(PageableDefault::class.java)

        return defaults?.let { getDefaultPageRequestFrom(methodParameter, it) } ?: fallbackPageable
    }

    /**
     * Tries to parse the given [String] into an integer and applies the given boundaries. Will return 0 if the
     * [String] cannot be parsed.
     *
     * @param parameter the parameter value.
     * @param upper the upper bound to be applied.
     * @param shiftIndex whether to shift the index if [.oneIndexedParameters] is set to true.
     * @return the parsed integer.
     */
    private fun parseAndApplyBoundaries(@Nullable parameter: String?, upper: Int, shiftIndex: Boolean): Optional<Int> {
        if (!StringUtils.hasText(parameter)) {
            return Optional.empty()
        }

        return try {
            val parsed = Integer.parseInt(parameter!!) - if (isOneIndexedParameters && shiftIndex) 1 else 0
            Optional.of(if (parsed < 0) 0 else if (parsed > upper) upper else parsed)
        } catch (e: NumberFormatException) {
            Optional.of(0)
        }

    }

    companion object {

        private const val INVALID_DEFAULT_PAGE_SIZE = "Invalid default page size configured for method %s! Must not be less than one!"

        private const val DEFAULT_PAGE_PARAMETER = "page"
        private const val DEFAULT_SIZE_PARAMETER = "size"
        private const val DEFAULT_PREFIX = ""
        private const val DEFAULT_QUALIFIER_DELIMITER = "_"
        private const val DEFAULT_MAX_PAGE_SIZE = 2000

        private val DEFAULT_SORT_RESOLVER = ReactiveSortHandlerMethodArgumentResolver()
        internal val DEFAULT_PAGE_REQUEST: Pageable = PageRequest.of(0, 20)

        private fun getDefaultPageRequestFrom(parameter: MethodParameter, defaults: PageableDefault): Pageable {

            val defaultPageNumber = defaults.page
            val defaultPageSize = getSpecificPropertyOrDefaultFromValue<Int>(defaults, "size")

            if (defaultPageSize < 1) {
                val annotatedMethod = parameter.method
                throw IllegalStateException(String.format(INVALID_DEFAULT_PAGE_SIZE, annotatedMethod))
            }

            return if (defaults.sort.isEmpty()) {
                PageRequest.of(defaultPageNumber, defaultPageSize)
            } else PageRequest.of(defaultPageNumber, defaultPageSize, defaults.direction, *defaults.sort)

        }

        fun assertPageableUniqueness(parameter: MethodParameter) {
            val method = parameter.method
                ?: throw IllegalArgumentException(String.format("Method parameter %s is not backed by a method.", parameter))

            if (containsMoreThanOnePageableParameter(method)) {
                val annotations = method.parameterAnnotations
                assertQualifiersFor(method.parameterTypes, annotations)
            }
        }

        /**
         * Returns whether the given [Method] has more than one [Pageable] parameter.
         *
         * @param method must not be `null`.
         * @return whether the given [Method] has more than one [Pageable] parameter
         */
        private fun containsMoreThanOnePageableParameter(method: Method): Boolean {
            var pageableFound = false

            for (type in method.parameterTypes) {

                if (pageableFound && type == Pageable::class.java) {
                    return true
                }

                if (type == Pageable::class.java) {
                    pageableFound = true
                }
            }

            return false
        }

        /**
         * Returns the value of the given specific property of the given annotation. If the value of that property is the
         * properties default, we fall back to the value of the `value` attribute.
         *
         * @param annotation must not be `null`.
         * @param property must not be `null` or empty.
         * @return the value of the given specific property of the given annotation.
         */
        fun <T> getSpecificPropertyOrDefaultFromValue(annotation: Annotation, property: String): T {

            val propertyDefaultValue = AnnotationUtils.getDefaultValue(annotation, property)
            val propertyValue = AnnotationUtils.getValue(annotation, property)

            val result =
                (if (ObjectUtils.nullSafeEquals(propertyDefaultValue, propertyValue))
                    AnnotationUtils.getValue(annotation)
                else
                    propertyValue)
                    ?: throw IllegalStateException("Exepected to be able to look up an annotation property value but failed!")

            return result as T
        }

        /**
         * Asserts that every [Pageable] parameter of the given parameters carries an [Qualifier] annotation to
         * distinguish them from each other.
         *
         * @param parameterTypes must not be `null`.
         * @param annotations must not be `null`.
         */
        private fun assertQualifiersFor(parameterTypes: Array<Class<*>>, annotations: Array<Array<Annotation>>) {

            val values = mutableSetOf<String>()

            for (i in annotations.indices) {

                if (Pageable::class.java == parameterTypes[i]) {

                    val qualifier = findAnnotation(annotations[i]) ?: throw IllegalStateException(
                        "Ambiguous Pageable arguments in handler method. If you use multiple parameters of type Pageable you need to qualify them with @Qualifier")

                    if (values.contains(qualifier.value)) {
                        throw IllegalStateException("Values of the user Qualifiers must be unique!")
                    }

                    values.add(qualifier.value)
                }
            }
        }

        /**
         * Returns the first [Qualifier] annotation from the given array of [Annotation]s. Returns `null` if the
         * array does not contain a [Qualifier] annotation.
         *
         * @param annotations must not be `null`.
         * @return the first [Qualifier] annotation from the given array of [Annotation]s.
         */
        @Nullable
        private fun findAnnotation(annotations: Array<Annotation>): Qualifier? {

            for (annotation in annotations) {
                if (annotation is Qualifier) {
                    return annotation
                }
            }

            return null
        }
    }
}
