<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.config

import <%= packageName %>.security.ADMIN
    <%_ if (authenticationTypeOauth2 && !applicationTypeMicroservice) { _%>
import <%= packageName %>.security.extractAuthorityFromClaims
    <%_ } _%>
    <%_ if (authenticationTypeJwt) { _%>
import <%= packageName %>.security.jwt.JWTConfigurer
import <%= packageName %>.security.jwt.TokenProvider
    <%_ } _%>
import tech.jhipster.config.JHipsterProperties
    <%_ if (authenticationTypeSession) { _%>
import tech.jhipster.security.AjaxAuthenticationFailureHandler
import tech.jhipster.security.AjaxAuthenticationSuccessHandler
import tech.jhipster.security.AjaxLogoutSuccessHandler
    <%_ } _%>

import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Import
    <%_ if (authenticationTypeOauth2) { _%>
import org.springframework.core.convert.converter.Converter
    <%_ } _%>
    <%_ if (!applicationTypeMicroservice || !authenticationTypeOauth2) { _%>
import org.springframework.http.HttpMethod
    <%_ } _%>
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity
import org.springframework.security.config.annotation.web.builders.HttpSecurity
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity
import org.springframework.security.web.SecurityFilterChain
    <%_ if (authenticationTypeJwt || (authenticationTypeOauth2 && applicationTypeMicroservice)) { _%>
import org.springframework.security.config.http.SessionCreationPolicy
    <%_ } _%>
    <%_ if (!authenticationTypeOauth2 && !skipUserManagement) { _%>
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder
    <%_ } _%>
    <%_ if (authenticationTypeOauth2) { _%>
import <%= packageName %>.security.oauth2.AudienceValidator
import org.springframework.security.authentication.AbstractAuthenticationToken
import org.springframework.security.oauth2.core.DelegatingOAuth2TokenValidator
import org.springframework.security.oauth2.jwt.Jwt
import org.springframework.security.oauth2.jwt.JwtDecoder
import org.springframework.security.oauth2.jwt.JwtDecoders
import org.springframework.security.oauth2.jwt.JwtValidators
import org.springframework.security.oauth2.jwt.NimbusJwtDecoder
import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter
import org.springframework.beans.factory.annotation.Value
import org.springframework.security.core.GrantedAuthority
        <%_ if (!applicationTypeMicroservice) { _%>
import org.springframework.security.core.authority.mapping.GrantedAuthoritiesMapper
import org.springframework.security.oauth2.core.oidc.user.OidcUserAuthority
        <%_ } _%>
    <%_ } _%>
    <%_ if (authenticationTypeSession) { _%>
        <%_ if (!skipUserManagement) { _%>
import org.springframework.security.web.authentication.RememberMeServices
        <%_ } _%>
import org.springframework.security.web.csrf.CookieCsrfTokenRepository
import org.springframework.security.web.csrf.CsrfFilter
    <%_ } _%>
    <%_ if (authenticationTypeOauth2 && !applicationTypeMicroservice) { _%>
import org.springframework.security.web.csrf.CookieCsrfTokenRepository
import org.springframework.security.web.csrf.CsrfFilter
    <%_ } _%>
    <%_ if (authenticationTypeOauth2) { _%>
import <%= packageName %>.security.oauth2.JwtGrantedAuthorityConverter
    <%_ } _%>
    <%_ if (authenticationTypeJwt && !applicationTypeMicroservice) { _%>
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter
    <%_ } _%>
    <%_ if (authenticationTypeOauth2 && applicationTypeMonolith) { _%>
import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository
import org.springframework.boot.web.client.RestTemplateBuilder
import <%= packageName %>.security.oauth2.CustomClaimConverter
    <%_ } _%>
<%_ if(!skipClient) { _%>
import org.springframework.security.web.header.writers.ReferrerPolicyHeaderWriter
<%_ } _%>
<%_ if (!applicationTypeMicroservice) { _%>
import org.springframework.web.filter.CorsFilter
<%_ } _%>
import org.zalando.problem.spring.web.advice.security.SecurityProblemSupport

@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)
@Import(SecurityProblemSupport::class)
class SecurityConfiguration(
    private val jHipsterProperties: JHipsterProperties,
    <%_ if (authenticationTypeSession && !skipUserManagement) { _%>
    private val rememberMeServices: RememberMeServices,
    <%_ } _%>
    <%_ if (authenticationTypeJwt) { _%>
    private val tokenProvider: TokenProvider,
    <%_ } _%>
    <%_ if (!applicationTypeMicroservice) { _%>
    private val corsFilter: CorsFilter,
    <%_ } _%>
    private val problemSupport: SecurityProblemSupport
) {
    <%_ if (authenticationTypeOauth2) { _%>

    @Value("\${spring.security.oauth2.client.provider.oidc.issuer-uri}")
    private lateinit var issuerUri: String
    <%_ } _%>
    <%_ if (authenticationTypeSession) { _%>

    @Bean
    fun ajaxAuthenticationSuccessHandler() = AjaxAuthenticationSuccessHandler()

    @Bean
    fun ajaxAuthenticationFailureHandler() = AjaxAuthenticationFailureHandler()

    @Bean
    fun ajaxLogoutSuccessHandler() = AjaxLogoutSuccessHandler()
    <%_ } _%>
    <%_ if (!authenticationTypeOauth2 && !skipUserManagement) { _%>

    @Bean
    fun passwordEncoder() = BCryptPasswordEncoder()
    <%_ } _%>

    @Bean
    @Throws(Exception::class)
    fun filterChain(http: HttpSecurity): SecurityFilterChain {
        http
            .csrf()
<%_ if (devDatabaseTypeH2Any) { _%>
            .ignoringAntMatchers("/h2-console/**")
<%_ } _%>
            <%_ if (['session','oauth2'].includes(authenticationType) && !applicationTypeMicroservice) { _%>
            .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())
        .and()
            <%_ } else { _%>
            .disable()
            <%_ } _%>
            <%_ if (!applicationTypeMicroservice) { _%>
                <%_ if (authenticationTypeJwt) { _%>
            .addFilterBefore(corsFilter, UsernamePasswordAuthenticationFilter::class.java)
                <%_ } else if (authenticationTypeSession || authenticationTypeOauth2) { _%>
            .addFilterBefore(corsFilter, CsrfFilter::class.java)
                <%_ } _%>
            <%_ } _%>
            .exceptionHandling()
            .authenticationEntryPoint(problemSupport)
            .accessDeniedHandler(problemSupport)
            <%_ if (authenticationTypeSession) { _%>
                <%_ if (!skipUserManagement) { _%>
        .and()
            .rememberMe()
            .rememberMeServices(rememberMeServices)
            .rememberMeParameter("remember-me")
            .key(jHipsterProperties.security.rememberMe.key)
                <%_ } _%>
        .and()
            .formLogin()
            .loginProcessingUrl("/api/authentication")
            .successHandler(ajaxAuthenticationSuccessHandler())
            .failureHandler(ajaxAuthenticationFailureHandler())
            .permitAll()
        .and()
            .logout()
            .logoutUrl("/api/logout")
            .logoutSuccessHandler(ajaxLogoutSuccessHandler())
            .permitAll()
            <%_ } _%>
<%_ if (!skipClient) { _%>
        .and()
            .headers()
            .contentSecurityPolicy(jHipsterProperties.security.contentSecurityPolicy)
        .and()
            .referrerPolicy(ReferrerPolicyHeaderWriter.ReferrerPolicy.STRICT_ORIGIN_WHEN_CROSS_ORIGIN)
        .and()
            .permissionsPolicy().policy("camera=(), fullscreen=(self), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), midi=(), payment=(), sync-xhr=()")
        .and()
            .frameOptions().sameOrigin()
<%_ } _%>
        <%_ if (authenticationTypeJwt || (authenticationTypeOauth2 && applicationTypeMicroservice)) { _%>
            .and()
            .sessionManagement()
            .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
        <%_ } _%>
            .and()
            .authorizeRequests()
<%_ if (!applicationTypeMicroservice) { _%>
            .antMatchers(HttpMethod.OPTIONS, "/**").permitAll()
    <%_ if (!skipClient) { _%>
            .antMatchers("/app/**/*.{js,html}").permitAll()
            .antMatchers("/i18n/**").permitAll()
            .antMatchers("/content/**").permitAll()
    <%_ } _%>
            .antMatchers("/swagger-ui/**").permitAll()
            .antMatchers("/test/**").permitAll()
<%_ } _%>
    <%_ if (devDatabaseTypeH2Any) { _%>
            .antMatchers("/h2-console/**").permitAll()
    <%_ } _%>
            .antMatchers("/api/authenticate").permitAll()
            <%_ if (!authenticationTypeOauth2 && !skipUserManagement) { _%>
            .antMatchers("/api/register").permitAll()
            .antMatchers("/api/activate").permitAll()
            .antMatchers("/api/account/reset-password/init").permitAll()
            .antMatchers("/api/account/reset-password/finish").permitAll()
            <%_ } _%>
            <%_ if (authenticationTypeOauth2) { _%>
            .antMatchers("/authorize").authenticated()
            .antMatchers("/api/auth-info").permitAll()
            <%_ } _%>
            .antMatchers("/api/admin/**").hasAuthority(ADMIN)
            .antMatchers("/api/**").authenticated()
            <%_ if (communicationSpringWebsocket) { _%>
            .antMatchers("/websocket/**").authenticated()
            <%_ } _%>
            .antMatchers("/management/health").permitAll()
            .antMatchers("/management/health/**").permitAll()
            .antMatchers("/management/info").permitAll()
            .antMatchers("/management/prometheus").permitAll()
            .antMatchers("/management/**").hasAuthority(ADMIN)
        <%_ if (authenticationTypeJwt) { _%>
            <%_ if (applicationTypeMonolith) { _%>
        .and()
            .httpBasic()
            <%_ } _%>
        .and()
            .apply(securityConfigurerAdapter())
        <%_ } else if (authenticationTypeOauth2) { _%>
            <%_ if (applicationTypeMonolith) { _%>
        .and()
            .oauth2Login()
            <%_ } _%>
        .and()
            .oauth2ResourceServer()
                .jwt()
                .jwtAuthenticationConverter(authenticationConverter())
                .and()
            .and()
                .oauth2Client()
        <%_ } _%>
        return http.build()
    }
    <%_ if (authenticationTypeJwt) { _%>

    private fun securityConfigurerAdapter() = JWTConfigurer(tokenProvider)
    <%_ } _%>
    <%_ if (authenticationTypeOauth2) { _%>

    fun authenticationConverter(): Converter<Jwt, AbstractAuthenticationToken> {
        val jwtAuthenticationConverter = JwtAuthenticationConverter()
        jwtAuthenticationConverter.setJwtGrantedAuthoritiesConverter(JwtGrantedAuthorityConverter())
        return jwtAuthenticationConverter
    }

    <%_ if (!applicationTypeMicroservice) { _%>
    /**
     * Map authorities from "groups" or "roles" claim in ID Token.
     *
     * @return a [GrantedAuthoritiesMapper] that maps groups from
     * the IdP to Spring Security Authorities.
     */
    @Bean
    fun userAuthoritiesMapper() =
        GrantedAuthoritiesMapper { authorities ->
            val mappedAuthorities = mutableSetOf<GrantedAuthority>()

            authorities.forEach {
                // Check for OidcUserAuthority because Spring Security 5.2 returns
                // each scope as a GrantedAuthority, which we don't care about.
                if (it is OidcUserAuthority) {
                    extractAuthorityFromClaims(it.userInfo.claims)?.let (mappedAuthorities::addAll)
                }
            }
            mappedAuthorities
        }
    <%_ } _%>

    @Bean
    fun jwtDecoder(<%_ if (!applicationTypeMicroservice) { _%>clientRegistrationRepository: ClientRegistrationRepository, restTemplateBuilder: RestTemplateBuilder<%_ } _%>): JwtDecoder {
        val jwtDecoder = JwtDecoders.fromOidcIssuerLocation(issuerUri) as NimbusJwtDecoder

        val audienceValidator = AudienceValidator(jHipsterProperties.security.oauth2.audience)
        val withIssuer = JwtValidators.createDefaultWithIssuer(issuerUri)
        val withAudience = DelegatingOAuth2TokenValidator(withIssuer, audienceValidator)

        jwtDecoder.setJwtValidator(withAudience)
        <%_ if (!applicationTypeMicroservice) { _%>
        jwtDecoder.setClaimSetConverter(CustomClaimConverter(clientRegistrationRepository.findByRegistrationId("oidc"), restTemplateBuilder.build()))
        <%_ } _%>

        return jwtDecoder
    }
    <%_ } _%>
}
