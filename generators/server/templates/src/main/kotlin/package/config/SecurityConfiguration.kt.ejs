<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.config

<%_ if (authenticationType === 'session' || authenticationType === 'jwt' || authenticationType === 'oauth2') { _%>
import <%= packageName %>.security.AuthoritiesConstants
<%_ if (authenticationType === 'jwt') { _%>
import <%= packageName %>.security.jwt.JWTConfigurer
import <%= packageName %>.security.jwt.TokenProvider
<%_ } _%>
<%_ if (authenticationType === 'session') { _%>

import io.github.jhipster.config.JHipsterProperties
import io.github.jhipster.security.AjaxAuthenticationFailureHandler
import io.github.jhipster.security.AjaxAuthenticationSuccessHandler
import io.github.jhipster.security.AjaxLogoutSuccessHandler
<%_ } _%>

<%_ if (authenticationType !== 'oauth2' && !skipUserManagement) { _%>
import org.springframework.beans.factory.BeanInitializationException
import org.springframework.beans.factory.InitializingBean
<%_ } _%>
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Import
<%_ if (authenticationType !== 'uaa' && !(applicationType === 'microservice' && authenticationType === 'oauth2')) { _%>
import org.springframework.http.HttpMethod
<%_ } _%>
<%_ if (authenticationType !== 'oauth2' && !skipUserManagement) { _%>
import org.springframework.security.authentication.AuthenticationManager
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder
<%_ } _%>
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity
import org.springframework.security.config.annotation.web.builders.HttpSecurity
<%_ if (authenticationType !== 'uaa' && !(applicationType === 'microservice' && authenticationType === 'oauth2')) { _%>
import org.springframework.security.config.annotation.web.builders.WebSecurity
<%_ } _%>
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter
<%_ if (authenticationType === 'jwt' || (authenticationType === 'oauth2' && applicationType === 'microservice')) { _%>
import org.springframework.security.config.http.SessionCreationPolicy
<%_ } _%>
<%_ if (authenticationType !== 'oauth2' && !skipUserManagement) { _%>
import org.springframework.security.core.userdetails.UserDetailsService
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder
import org.springframework.security.crypto.password.PasswordEncoder
<%_ } _%>
<%_ if (authenticationType === 'oauth2') { _%>
import <%= packageName %>.security.oauth2.AudienceValidator
import org.springframework.security.oauth2.core.DelegatingOAuth2TokenValidator
import org.springframework.security.oauth2.jwt.JwtDecoder
import org.springframework.security.oauth2.jwt.JwtDecoders
import org.springframework.security.oauth2.jwt.JwtValidators
import org.springframework.security.oauth2.jwt.NimbusJwtDecoderJwkSupport
    <%_ if (applicationType === 'gateway') { _%>
import <%=packageName%>.security.oauth2.AuthorizationHeaderFilter
import <%=packageName%>.security.oauth2.AuthorizationHeaderUtil
    <%_ } _%>
import org.springframework.beans.factory.annotation.Value
import org.springframework.security.core.GrantedAuthority
import org.springframework.security.core.authority.SimpleGrantedAuthority
import org.springframework.security.core.authority.mapping.GrantedAuthoritiesMapper
import org.springframework.security.oauth2.core.oidc.user.OidcUserAuthority
<%_ } _%>
<%_ if (authenticationType === 'session') { _%>
import org.springframework.security.web.authentication.RememberMeServices
import org.springframework.security.web.csrf.CookieCsrfTokenRepository
import org.springframework.security.web.csrf.CsrfFilter
<%_ } _%>
<%_ if (authenticationType === 'oauth2' && applicationType !== 'microservice') { _%>
import org.springframework.security.web.csrf.CookieCsrfTokenRepository
import org.springframework.security.web.csrf.CsrfFilter
<%_ } _%>
<%_ if (authenticationType === 'jwt' && applicationType !== 'microservice') { _%>
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter
<%_ } _%>
<%_ if (applicationType !== 'microservice') { _%>
import org.springframework.web.filter.CorsFilter
<%_ } _%>
import org.zalando.problem.spring.web.advice.security.SecurityProblemSupport

@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)
@Import(SecurityProblemSupport::class)
class SecurityConfiguration(
    <%_ if (authenticationType !== 'oauth2' && !skipUserManagement) { _%>
    private val authenticationManagerBuilder: AuthenticationManagerBuilder,
    private val userDetailsService: UserDetailsService,
    <%_ } _%>
    <%_ if (authenticationType === 'session') { _%>
    private val jHipsterProperties: JHipsterProperties,
    private val rememberMeServices: RememberMeServices,
    <%_ } _%>
    <%_ if (authenticationType === 'jwt') { _%>
    private val tokenProvider: TokenProvider,
    <%_ } _%>
    <%_ if (applicationType !== 'microservice') { _%>
    private val corsFilter: CorsFilter,
    <%_ } _%>
    private val problemSupport: SecurityProblemSupport
) : WebSecurityConfigurerAdapter()<% if (authenticationType !== 'oauth2' && !skipUserManagement) { %>, InitializingBean<% } %> {
    <%_ if (authenticationType === 'oauth2') { _%>

    @Value("\${spring.security.oauth2.client.provider.oidc.issuer-uri}")
    private lateinit var issuerUri: String
    <%_ } _%>
    <%_ if (authenticationType !== 'oauth2' && !skipUserManagement) { _%>

    @Throws(Exception::class)
    override fun afterPropertiesSet() {
        try {
            authenticationManagerBuilder
                .userDetailsService(userDetailsService)
                .passwordEncoder(passwordEncoder())
        } catch (e: Exception) {
            throw BeanInitializationException("Security configuration failed", e)
        }
    }

    @Throws(Exception::class)
    @Bean
    override fun authenticationManagerBean(): AuthenticationManager {
        return super.authenticationManagerBean()
    }
    <%_ } _%>
    <%_ if (authenticationType === 'session') { _%>

    @Bean
    fun ajaxAuthenticationSuccessHandler(): AjaxAuthenticationSuccessHandler {
        return AjaxAuthenticationSuccessHandler()
    }

    @Bean
    fun ajaxAuthenticationFailureHandler(): AjaxAuthenticationFailureHandler {
        return AjaxAuthenticationFailureHandler()
    }
    <%_ } _%>
    <%_ if (authenticationType === 'session') { _%>

    @Bean
    fun ajaxLogoutSuccessHandler(): AjaxLogoutSuccessHandler {
        return AjaxLogoutSuccessHandler()
    }
    <%_ } _%>
    <%_ if (authenticationType !== 'oauth2' && !skipUserManagement) { _%>

    @Bean
    fun passwordEncoder(): PasswordEncoder {
        return BCryptPasswordEncoder()
    }
    <%_ } _%>
    <%_ if (authenticationType !== 'uaa' && !(applicationType === 'microservice' && authenticationType === 'oauth2')) { _%>

    @Throws(Exception::class)
    override fun configure(web: WebSecurity?) {
        web!!.ignoring()
            .antMatchers(HttpMethod.OPTIONS, "/**")
            <%_ if (!skipClient) { _%>
            .antMatchers("/app/**/*.{js,html}")
            .antMatchers("/i18n/**")
            .antMatchers("/content/**")
            <%_ } _%>
            <%_ if (devDatabaseType === 'h2Disk' || devDatabaseType === 'h2Memory') { _%>
            .antMatchers("/h2-console/**")
            <%_ } _%>
            .antMatchers("/swagger-ui/index.html")
            .antMatchers("/test/**")
    }
    <%_ } _%>

    @Throws(Exception::class)
    public override fun configure(http: HttpSecurity) {
        http
            .csrf()
            <%_ if (['session','oauth2'].includes(authenticationType) && applicationType !== 'microservice') { _%>
            .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())
        .and()
            <%_ } else{ _%>
            .disable()
            <%_ } _%>
            <%_ if (applicationType !== 'microservice') { _%>
                <%_ if (authenticationType === 'jwt') { _%>
            .addFilterBefore(corsFilter, UsernamePasswordAuthenticationFilter::class.java)
                <%_ } else if (authenticationType === 'session' || authenticationType === 'oauth2') { _%>
            .addFilterBefore(corsFilter, CsrfFilter::class.java)
                <%_ } _%>
            <%_ } _%>
            .exceptionHandling()
            <%_ if (authenticationType !== 'oauth2') { _%>
            .authenticationEntryPoint(problemSupport)
            <%_ } _%>
            .accessDeniedHandler(problemSupport)<% if (authenticationType === 'session') { %>
        .and()
            .rememberMe()
            .rememberMeServices(rememberMeServices)
            .rememberMeParameter("remember-me")
            .key(jHipsterProperties.security.rememberMe.key)
        .and()
            .formLogin()
            .loginProcessingUrl("/api/authentication")
            .successHandler(ajaxAuthenticationSuccessHandler())
            .failureHandler(ajaxAuthenticationFailureHandler())
            .permitAll()<% } %><% if (authenticationType === 'session') { %>
        .and()
            .logout()
            .logoutUrl("/api/logout")
            .logoutSuccessHandler(ajaxLogoutSuccessHandler())
            .permitAll()<% } %>
        .and()
            .headers()
            .frameOptions()
            .disable()
        .and()
        <%_ if (authenticationType === 'jwt' || (authenticationType === 'oauth2' && applicationType === 'microservice')) { _%>
            .sessionManagement()
            .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
        .and()
        <%_ } _%>
            .authorizeRequests()
            <%_ if (authenticationType !== 'oauth2' && !skipUserManagement) { _%>
            .antMatchers("/api/register").permitAll()
            .antMatchers("/api/activate").permitAll()
            .antMatchers("/api/authenticate").permitAll()
            .antMatchers("/api/account/reset-password/init").permitAll()
            .antMatchers("/api/account/reset-password/finish").permitAll()
            <%_ } _%>
            .antMatchers("/api/**").authenticated()
            <%_ if (authenticationType === 'oauth2') { _%>
            .antMatchers("/authorize").authenticated()
            .antMatchers("/api/auth-info").permitAll()
            <%_ } _%>
            <%_ if (websocket === 'spring-websocket') { _%>
            .antMatchers("/websocket/tracker").hasAuthority(AuthoritiesConstants.ADMIN)
            .antMatchers("/websocket/**").permitAll()
            <%_ } _%>
            .antMatchers("/management/health").permitAll()
            .antMatchers("/management/info").permitAll()
            .antMatchers("/management/prometheus").permitAll()
            .antMatchers("/management/**").hasAuthority(AuthoritiesConstants.ADMIN)
        <%_ if (authenticationType === 'jwt') { _%>
        .and()
            .apply(securityConfigurerAdapter())
        <%_ } else if (authenticationType === 'oauth2') { _%>
            <%_ if (['monolith', 'gateway'].includes(applicationType)) { _%>
        .and()
            .oauth2Login()
            <%_ } _%>
        .and()
            .oauth2ResourceServer().jwt()
        <%_ } _%>
    }
    <%_ if (authenticationType === 'jwt') { _%>

    private fun securityConfigurerAdapter(): JWTConfigurer {
        return JWTConfigurer(tokenProvider)
    }
    <%_ } _%>
    <%_ if (authenticationType === 'oauth2') { _%>

    /**
     * Map authorities from "groups" or "roles" claim in ID Token.
     *
     * @return a [GrantedAuthoritiesMapper] that maps groups from
     * the IdP to Spring Security Authorities.
     */
    @Suppress("UNCHECKED_CAST")
    @Bean
    fun userAuthoritiesMapper(): GrantedAuthoritiesMapper {
        return GrantedAuthoritiesMapper { authorities ->
            val mappedAuthorities = mutableSetOf<GrantedAuthority>()

            authorities.forEach { authority ->
                val oidcUserAuthority = authority as OidcUserAuthority
                val userInfo = oidcUserAuthority.userInfo
                var groups = userInfo.claims["groups"] as Collection<String>?
                if (groups == null) {
                    groups = userInfo.claims.get("roles") as Collection<String>?
                }
                groups?.let {
                    mappedAuthorities.addAll(
                        it.asSequence()
                            .filter { group -> group.startsWith("ROLE_") }
                            .map { a -> SimpleGrantedAuthority(a) }
                    )
                }
            }
            mappedAuthorities
        }
    }

    @Bean
    fun jwtDecoder(): JwtDecoder {
        val jwtDecoder = JwtDecoders.fromOidcIssuerLocation(issuerUri) as NimbusJwtDecoderJwkSupport

        val audienceValidator = AudienceValidator()
        val withIssuer = JwtValidators.createDefaultWithIssuer(issuerUri)
        val withAudience = DelegatingOAuth2TokenValidator(withIssuer, audienceValidator)

        jwtDecoder.setJwtValidator(withAudience)

        return jwtDecoder
    }
        <%_ if (applicationType === 'gateway') { _%>

    @Bean
    fun authHeaderFilter(headerUtil: AuthorizationHeaderUtil): AuthorizationHeaderFilter {
        return AuthorizationHeaderFilter(headerUtil)
    }
        <%_ } _%>
    <%_ } _%>
}
<%_ } _%>
<%_ if (authenticationType === 'uaa') { _%>
import <%= packageName %>.config.oauth2.OAuth2JwtAccessTokenConverter
import <%= packageName %>.config.oauth2.OAuth2Properties
import <%= packageName %>.security.oauth2.OAuth2SignatureVerifierClient
import <%= packageName %>.security.AuthoritiesConstants

import org.springframework.beans.factory.annotation.Qualifier
import org.springframework.cloud.client.loadbalancer.RestTemplateCustomizer
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity
import org.springframework.security.config.annotation.web.builders.HttpSecurity
import org.springframework.security.config.http.SessionCreationPolicy
import org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer
import org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter
import org.springframework.security.oauth2.provider.token.TokenStore
import org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter
import org.springframework.security.oauth2.provider.token.store.JwtTokenStore
import org.springframework.security.web.csrf.CookieCsrfTokenRepository
<%_ if (applicationType === 'gateway') { _%>
import org.springframework.security.web.csrf.CsrfFilter
import org.springframework.web.filter.CorsFilter
<%_ } _%>
import org.springframework.web.client.RestTemplate

@Configuration
@EnableResourceServer
@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)
public class SecurityConfiguration(private val oAuth2Properties: OAuth2Properties<% if (applicationType === 'gateway') { %>, private val corsFilter: CorsFilter<% } %>) : ResourceServerConfigurerAdapter() {

    @Throws(Exception::class)
    override fun configure(http: HttpSecurity) {
        http
            .csrf()
		<%_ if (applicationType === 'gateway') { _%>
            .ignoringAntMatchers("/h2-console/**")
            .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())
        .and()
            .addFilterBefore(corsFilter, CsrfFilter::class.java)
		<%_ } else { _%>
            .disable()
		<%_ } _%>
            .headers()
            .frameOptions()
            .disable()
        .and()
            .sessionManagement()
            .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
        .and()
            .authorizeRequests()
            .antMatchers("/api/**").authenticated()
            .antMatchers("/management/health").permitAll()
            .antMatchers("/management/info").permitAll()
            .antMatchers("/management/prometheus").permitAll()
            .antMatchers("/management/**").hasAuthority(AuthoritiesConstants.ADMIN)
    }

    @Bean
    fun tokenStore(jwtAccessTokenConverter: JwtAccessTokenConverter): TokenStore {
        return JwtTokenStore(jwtAccessTokenConverter)
    }

    @Bean
    fun jwtAccessTokenConverter(signatureVerifierClient: OAuth2SignatureVerifierClient): JwtAccessTokenConverter {
        return OAuth2JwtAccessTokenConverter(oAuth2Properties, signatureVerifierClient)
    }

    @Bean
    @Qualifier("loadBalancedRestTemplate")
    fun loadBalancedRestTemplate(customizer: RestTemplateCustomizer): RestTemplate {
        val restTemplate = RestTemplate()
        customizer.customize(restTemplate)
        return restTemplate
    }

    @Bean
    @Qualifier("vanillaRestTemplate")
    fun vanillaRestTemplate(): RestTemplate {
        return RestTemplate()
    }
}
<%_ } _%>
