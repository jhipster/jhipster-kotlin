<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.config

import <%= packageName %>.security.ANONYMOUS

import tech.jhipster.config.JHipsterProperties

import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.http.server.ServerHttpRequest
import org.springframework.http.server.ServerHttpResponse
import org.springframework.http.server.ServletServerHttpRequest
import org.springframework.messaging.simp.config.MessageBrokerRegistry
import org.springframework.security.authentication.AnonymousAuthenticationToken
import org.springframework.security.core.authority.SimpleGrantedAuthority
import org.springframework.web.socket.WebSocketHandler
import org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker
import org.springframework.web.socket.config.annotation.StompEndpointRegistry
import org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer
import org.springframework.web.socket.server.HandshakeInterceptor
import org.springframework.web.socket.server.support.DefaultHandshakeHandler

import java.security.Principal
import java.util.Optional

@Configuration
@EnableWebSocketMessageBroker
class WebsocketConfiguration(private val jHipsterProperties: JHipsterProperties) : WebSocketMessageBrokerConfigurer {

    override fun configureMessageBroker(config: MessageBrokerRegistry?) {
        config!!.enableSimpleBroker("/topic")
    }

    override fun registerStompEndpoints(registry: StompEndpointRegistry?) {
        val allowedOrigins =
            Optional.ofNullable(jHipsterProperties.cors.allowedOrigins)
                .map { origins -> origins.toTypedArray() }
                .orElse(arrayOfNulls(0))

        registry!!.addEndpoint("/websocket/tracker")
            .setHandshakeHandler(defaultHandshakeHandler())
            .setAllowedOrigins(*allowedOrigins)
            .withSockJS()
            .setInterceptors(httpSessionHandshakeInterceptor())
    }

    @Bean
    fun httpSessionHandshakeInterceptor(): HandshakeInterceptor {
        return object : HandshakeInterceptor {

            @Throws(Exception::class)
            override fun beforeHandshake(
                request: ServerHttpRequest,
                response: ServerHttpResponse,
                wsHandler: WebSocketHandler,
                attributes: MutableMap<String, Any>
            ): Boolean {
                if (request is ServletServerHttpRequest) {
                    attributes[IP_ADDRESS] = request.remoteAddress
                }
                return true
            }

            override fun afterHandshake(
                request: ServerHttpRequest,
                response: ServerHttpResponse,
                wsHandler: WebSocketHandler,
                exception: Exception?
            ) {
            }
        }
    }

    private fun defaultHandshakeHandler(): DefaultHandshakeHandler {
        return object : DefaultHandshakeHandler() {
            override fun determineUser(
                request: ServerHttpRequest,
                wsHandler: WebSocketHandler?,
                attributes: Map<String, Any>?
            ): Principal? {
                var principal: Principal? = request.principal
                if (principal == null) {
                    val authorities = mutableListOf<SimpleGrantedAuthority>()
                    authorities.add(SimpleGrantedAuthority(ANONYMOUS))
                    principal = AnonymousAuthenticationToken("WebsocketConfiguration", "anonymous", authorities)
                }
                return principal
            }
        }
    }

    companion object {

        const val IP_ADDRESS = "IP_ADDRESS"
    }
}
