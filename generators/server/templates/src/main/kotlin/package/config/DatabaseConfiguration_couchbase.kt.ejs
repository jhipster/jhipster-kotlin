<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

This file is part of the JHipster project, see https://jhipster.github.io/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License")
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>

package <%= packageName %>.config

import com.couchbase.client.java.Cluster
import com.couchbase.client.java.Collection
import com.github.couchmove.Couchmove
import org.slf4j.LoggerFactory
import org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties
import org.springframework.boot.context.properties.EnableConfigurationProperties
import org.springframework.context.annotation.*
import org.springframework.core.convert.TypeDescriptor
import org.springframework.core.convert.converter.Converter
import org.springframework.core.convert.converter.GenericConverter
import org.springframework.core.convert.support.GenericConversionService
<%_ if (searchEngineElasticsearch) { _%>
import org.springframework.data.elasticsearch.repository.config.Enable<% if (reactive) { %>Reactive<% } %>ElasticsearchRepositories
<%_ } _%>
import org.springframework.data.convert.ReadingConverter
import org.springframework.data.convert.WritingConverter
import org.springframework.data.couchbase.config.AbstractCouchbaseConfiguration
import org.springframework.data.couchbase.config.BeanNames
import org.springframework.data.couchbase.core.convert.CouchbaseCustomConversions
import org.springframework.data.couchbase.core.convert.MappingCouchbaseConverter
import org.springframework.data.couchbase.core.mapping.CouchbaseMappingContext
import org.springframework.data.couchbase.core.mapping.event.ValidatingCouchbaseEventListener
<%_ if (!reactive) { _%>
import org.springframework.data.couchbase.repository.auditing.EnableCouchbaseAuditing
<%_ } _%>
import org.springframework.data.couchbase.repository.config.Enable<%_ if (reactive) { _%>Reactive<% } %>CouchbaseRepositories
import org.springframework.data.repository.util.QueryExecutionConverters
import org.springframework.util.StringUtils
import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean
import reactor.core.publisher.Flux
import tech.jhipster.config.JHipsterConstants
import tech.jhipster.config.JHipsterProperties
import java.math.BigDecimal
import java.math.BigInteger
import java.time.ZoneId
import java.time.ZonedDateTime
import java.time.Duration
import java.util.*

@Configuration
@EnableConfigurationProperties(CouchbaseProperties::class)
<%_ if (searchEngineElasticsearch) { _%>
@Enable<% if (reactive) { %>Reactive<% } %>ElasticsearchRepositories("<%= packageName %>.repository.search")
<%_ } _%>
@Profile("!" + JHipsterConstants.SPRING_PROFILE_CLOUD)
@Enable<% if (reactive) { %>Reactive<% } %>CouchbaseRepositories(basePackages = ["<%= packageName %>.repository"]<%_ if (searchEngineElasticsearch) { %>,
    includeFilters = [Filter(type = FilterType.ASSIGNABLE_TYPE, value = [<% if (reactive) { %>Reactive<% } %>CouchbaseRepository::class])]<%_ } _%>)
<%_ if (!reactive) { _%>
@EnableCouchbaseAuditing(auditorAwareRef = "springSecurityAuditorAware", dateTimeProviderRef = "")
<%_ } _%>
class DatabaseConfiguration(
    private val jHipsterProperties: JHipsterProperties,
    private val couchbaseProperties: CouchbaseProperties
) : AbstractCouchbaseConfiguration() {

    private val CHANGELOG_COLLECTION = "changelog"
    private val TYPE_KEY = "type"
    private val log = LoggerFactory.getLogger(javaClass)
    
    <%_ if (reactive) { _%>
    init {
        allowPageable()
    }

    // Temporary Hack to fix pageable
    @SuppressWarnings("unchecked")
    private fun allowPageable() {
        try {
            val allowedPageableTypes = QueryExecutionConverters::class.java.getDeclaredField("ALLOWED_PAGEABLE_TYPES")
            allowedPageableTypes.isAccessible = true
            val apt = allowedPageableTypes.get(QueryExecutionConverters::class) as Set<*>
            apt.plus(Flux::class)
        } catch (e: Exception) {
            e.printStackTrace()
        }
    }

    <%_ } _%>

    @Bean
    fun validatingCouchbaseEventListener() = ValidatingCouchbaseEventListener(validator())

    @Bean
    fun validator() = LocalValidatorFactoryBean()

    override fun getConnectionString() =
        couchbaseProperties.connectionString

    override fun getUserName() =
        couchbaseProperties.username
    
    override fun getPassword() =
        couchbaseProperties.password

    override fun  getBucketName() =
        jHipsterProperties.database.couchbase.bucketName

    @Bean
    fun bucket(cluster: Cluster) =
        cluster.bucket(jHipsterProperties.database.couchbase.bucketName)

    @Bean(name = [BeanNames.COUCHBASE_CUSTOM_CONVERSIONS])
    override fun customConversions() =
        CouchbaseCustomConversions(
            mutableListOf<Converter<*, *>>(
                ZonedDateTimeToLongConverter,
                NumberToLocalDateTimeConverter,
                BigIntegerToStringConverter,
                StringToBigIntegerConverter,
                BigDecimalToStringConverter,
                StringToBigDecimalConverter,
                StringToByteConverter,
                UUIDToStringConverter,
                StringToUUIDConverter
            )
        )
    
    override fun mappingCouchbaseConverter(couchbaseMappingContext: CouchbaseMappingContext, couchbaseCustomConversions: CouchbaseCustomConversions): MappingCouchbaseConverter {
        val mappingCouchbaseConverter = super.mappingCouchbaseConverter(couchbaseMappingContext, couchbaseCustomConversions)
        (mappingCouchbaseConverter.conversionService as (GenericConversionService)).addConverter(StringToObjectConverter)
        return mappingCouchbaseConverter
    }

    @Bean
    fun couchmove(cluster: Cluster): Couchmove {
        log.debug("Configuring Couchmove")
        val bucket = cluster.bucket(bucketName)
        val collection = bucket.scope(getScopeName()).collection(CHANGELOG_COLLECTION)
        val couchmove = Couchmove(collection, cluster, "config/couchmove/changelog");
        couchmove.migrate()
        couchmove.buildN1qlDeferredIndexes(getScopeName())
        return couchmove
    }

    @Bean
    @Profile(*[JHipsterConstants.SPRING_PROFILE_TEST, JHipsterConstants.SPRING_PROFILE_E2E])
    fun waitForIndexes(couchmove: Couchmove): Couchmove {
        couchmove.waitForN1qlIndexes(scopeName, Duration.ofMinutes(15))
        return couchmove
    }

    override fun typeKey() = TYPE_KEY

    override protected fun getScopeName() = jHipsterProperties.database.couchbase.scopeName

    /**
     * Simple singleton to convert [ZonedDateTime]s to their [Long] representation.
     */
    @WritingConverter
    object ZonedDateTimeToLongConverter : Converter<ZonedDateTime, Long> {
        override fun convert(source: ZonedDateTime) = Date.from(source.toInstant()).time
    }

    /**
     * Simple singleton to convert from [Number] [BigDecimal] representation.
     */
    @ReadingConverter
    object NumberToLocalDateTimeConverter : Converter<Number, ZonedDateTime> {
        override fun convert(source: Number): ZonedDateTime =
            ZonedDateTime.ofInstant(Date(source.toLong()).toInstant(), ZoneId.systemDefault())
    }

    /**
     * Simple singleton to convert [BigDecimal]s to their [String] representation.
     */
    @WritingConverter
    object BigDecimalToStringConverter : Converter<BigDecimal, String> {
        override fun convert(source: BigDecimal) = source.toString()
    }

    /**
     * Simple singleton to convert from [String] [BigDecimal] representation.
     */
    @ReadingConverter
    object StringToBigDecimalConverter : Converter<String, BigDecimal> {
        override fun convert(source: String) =
            if (StringUtils.hasText(source)) BigDecimal(source) else null
    }

    /**
     * Simple singleton to convert [BigInteger]s to their [String] representation.
     */
    @WritingConverter
    object BigIntegerToStringConverter : Converter<BigInteger, String> {
        override fun convert(source: BigInteger) = source.toString()
    }

    /**
     * Simple singleton to convert from [String] [BigInteger] representation.
     */
    @ReadingConverter
    object StringToBigIntegerConverter : Converter<String, BigInteger> {
        override fun convert(source: String) =
            if (StringUtils.hasText(source)) BigInteger(source) else null
    }

    /**
     * Simple singleton to convert from [String] `byte[]` representation.
     */
    @ReadingConverter
    object StringToByteConverter : Converter<String, ByteArray> {
        override fun convert(source: String): ByteArray = Base64.getDecoder().decode(source)
    }

    /**
     * Simple singleton to convert [UUID]s to their [String] representation.
     */
    @WritingConverter
    object UUIDToStringConverter : Converter<UUID, String> {
        override fun convert(source: UUID) = source.toString()
    }

    /**
     * Simple singleton to convert from [String] [UUID] representation.
     */
    @ReadingConverter
    object StringToUUIDConverter : Converter<String, UUID> {
        override fun convert(source: String) =
            if (StringUtils.hasText(source)) UUID.fromString(source) else null
    }

    object StringToObjectConverter : GenericConverter {
        override fun getConvertibleTypes(): Set<GenericConverter.ConvertiblePair> =
            Collections.singleton(GenericConverter.ConvertiblePair(String::class.java, Any::class.java))

        override fun convert(source: Any?, sourceType: TypeDescriptor, targetType: TypeDescriptor): Any? {
            return null
        }
    }

}
