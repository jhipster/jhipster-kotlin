<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

  This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

  Licensed under the Apache License, Version 2.0 (the "
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.config.neo4j

import ac.simons.neo4j.migrations.core.JavaBasedMigration
import ac.simons.neo4j.migrations.core.MigrationContext
import ac.simons.neo4j.migrations.core.MigrationsException
import com.fasterxml.jackson.databind.ObjectMapper
import org.neo4j.driver.Values
import org.springframework.core.io.Resource
import org.springframework.core.io.support.PathMatchingResourcePatternResolver
import java.io.IOException
import java.util.*

/**
* Initial database setup for Neo4j.
*/
class Neo4jMigrations {

     /**
     * Load users including authorities from JSON files.
     */
    class V0001__CreateUsers: JavaBasedMigration {

        override fun apply(context: MigrationContext) {

            val om = ObjectMapper()
            val resourcePatternResolver = PathMatchingResourcePatternResolver()
            val resources: Array<Resource>
            try {
                resources = resourcePatternResolver.getResources("classpath:config/neo4j/migrations/user__*.json")
            } catch (e: IOException) {
                throw MigrationsException("Could not load user definition resources.", e)
            }
            val type = om.typeFactory.constructMapType(Map::class.java, String::class.java, Object::class.java)
            val userLabel = "<%= jhiTablePrefix %>_user"
            val authorityLabel = "<%= jhiTablePrefix %>_authority"
            val query = String.format(
                ""
                    + "CREATE (u:%s) SET u = \$user WITH u "
                    + "UNWIND \$authorities AS authority "
                    + "MERGE (a:%s {name: authority}) "
                    + "CREATE (u) - [:HAS_AUTHORITY] -> (a) ",
                userLabel, authorityLabel
            )

           context.session.use { session ->
               resources.forEach {
                   try {
                       val user = om.readValue(it.inputStream, type) as MutableMap<String, Any>
                       user["user_id"] = UUID.randomUUID().toString() as Any
                       val authorities = user.remove("authorities") as List<*>
                       user.remove("_class")
                       session.writeTransaction {t ->
                           t.run(query, Values.parameters("user", user, "authorities", authorities))
                               .consume()
                       }
                   } catch (e: IOException) {
                       throw MigrationsException("could not load resource ${it.description}.", e)
                   }
               }
            }
        }
    }
}
