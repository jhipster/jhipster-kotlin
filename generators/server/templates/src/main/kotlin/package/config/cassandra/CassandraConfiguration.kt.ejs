<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.config.cassandra

import com.codahale.metrics.MetricRegistry
import com.datastax.driver.core.Cluster
import com.datastax.driver.core.CodecRegistry
import com.datastax.driver.core.DataType
import com.datastax.driver.core.ProtocolVersion
import com.datastax.driver.core.Session
import com.datastax.driver.core.TupleType
import com.datastax.driver.core.TupleValue
import com.datastax.driver.extras.codecs.jdk8.InstantCodec
import com.datastax.driver.extras.codecs.jdk8.LocalDateCodec
import com.datastax.driver.extras.codecs.jdk8.ZonedDateTimeCodec
import tech.jhipster.config.JHipsterConstants
import org.slf4j.LoggerFactory
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.beans.factory.annotation.Value
import org.springframework.boot.autoconfigure.cassandra.CassandraProperties
import org.springframework.boot.autoconfigure.cassandra.ClusterBuilderCustomizer
<%_ if (applicationType === 'gateway' && databaseType !== 'cassandra') { _%>
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty
<%_ } _%>
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.context.annotation.Profile
import org.springframework.core.convert.converter.Converter
import org.springframework.data.cassandra.core.convert.CassandraCustomConversions
import org.springframework.data.convert.ReadingConverter
import org.springframework.data.convert.WritingConverter

import javax.annotation.PostConstruct
import java.time.ZoneId
import java.time.ZoneOffset
import java.time.ZonedDateTime
import java.util.Date

@Configuration<% if (applicationType === 'gateway' && databaseType !== 'cassandra') { %>
@ConditionalOnProperty("jhipster.gateway.rate-limiting.enabled")<% } %>
@Profile(JHipsterConstants.SPRING_PROFILE_DEVELOPMENT, JHipsterConstants.SPRING_PROFILE_PRODUCTION)
class CassandraConfiguration {

    @Value("\${spring.data.cassandra.protocolVersion:V4}")
    private lateinit var protocolVersion: ProtocolVersion

    @Autowired(required = false)
    internal var metricRegistry: MetricRegistry? = null

    private val log = LoggerFactory.getLogger(javaClass)

    @Autowired
    private lateinit var cluster: Cluster

    @PostConstruct
    fun postConstruct() {
        val tupleType = cluster.metadata.newTupleType(DataType.timestamp(), DataType.varchar())

        cluster.configuration.codecRegistry
            .register(LocalDateCodec.instance)
            .register(InstantCodec.instance)
            .register(ZonedDateTimeCodec(tupleType))

        cluster.init()
    }

    @Bean
    fun cassandraCustomConversions(cluster: Cluster): CassandraCustomConversions {
        val converters = mutableListOf<Converter<*, *>>(
            TupleToZonedDateTimeConverter,
            ZonedDateTimeToTupleConverter(protocolVersion, cluster.configuration.codecRegistry)
        )
        return CassandraCustomConversions(converters)
    }

    @ReadingConverter
    internal object TupleToZonedDateTimeConverter : Converter<TupleValue, ZonedDateTime> {
        override fun convert(source: TupleValue): ZonedDateTime {
            val timestamp = source.getTimestamp(0)
            val zoneId = ZoneId.of(source.getString(1))
            return timestamp.toInstant().atZone(zoneId)
        }
    }

    @WritingConverter
    internal object ZonedDateTimeToTupleConverter : Converter<ZonedDateTime, TupleValue> {

        private lateinit var type: TupleType

        override fun convert(source: ZonedDateTime): TupleValue? =
            type.newValue().apply {
                setTimestamp(0, Date.from(source.toLocalDateTime().toInstant(ZoneOffset.UTC)))
                setString(1, source.zone.toString())
            }

        internal operator fun invoke(
            version: ProtocolVersion,
            codecRegistry: CodecRegistry?
        ): ZonedDateTimeToTupleConverter {
            type = TupleType.of(version, codecRegistry, DataType.timestamp(), DataType.text())
            return this
        }
    }

    @Bean
    internal fun clusterBuilderCustomizer(properties: CassandraProperties) =
        ClusterBuilderCustomizer {
            it
                .withProtocolVersion(protocolVersion)
                .withPort(getPort(properties))
                .withoutJMXReporting()
                .withoutMetrics()
        }

    protected fun getPort(properties: CassandraProperties) = properties.port

    @Bean(destroyMethod = "close")
    fun session(properties: CassandraProperties, cluster: Cluster): Session {
        log.debug("Configuring Cassandra session")
        return when {
            properties.keyspaceName.isNullOrBlank() -> cluster.connect()
            else -> cluster.connect(properties.keyspaceName)
        }
    }
}
