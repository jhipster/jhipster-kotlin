<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.config

import ch.qos.logback.classic.LoggerContext
import com.fasterxml.jackson.databind.ObjectMapper
import tech.jhipster.config.JHipsterProperties
import org.slf4j.LoggerFactory
import org.springframework.beans.factory.annotation.Value
<%_ if (serviceDiscoveryType && ['microservice', 'gateway', 'uaa'].includes(applicationType)) { _%>
import org.springframework.boot.info.BuildProperties
<%_ } _%>
<%_ if (serviceDiscoveryType === "consul") { _%>
import org.springframework.cloud.consul.serviceregistry.ConsulRegistration
<%_ } _%>
<%_ if (["eureka", "consul"].includes(serviceDiscoveryType)) { _%>
import org.springframework.cloud.context.config.annotation.RefreshScope
<%_ } _%>
import org.springframework.context.annotation.Configuration

import tech.jhipster.config.logging.LoggingUtils.addContextListener
import tech.jhipster.config.logging.LoggingUtils.addJsonConsoleAppender
import tech.jhipster.config.logging.LoggingUtils.addLogstashTcpSocketAppender
import tech.jhipster.config.logging.LoggingUtils.setMetricsMarkerLogbackFilter

/*
 * Configures the console and Logstash log appenders from the app properties.
 */
@Configuration
<%_ if (["eureka", "consul"].includes(serviceDiscoveryType)) { _%>
@RefreshScope
<%_ } _%>
class LoggingConfiguration(
    @Value("\${spring.application.name}") appName: String,
    @Value("\${server.port}") serverPort: String,
    jHipsterProperties: JHipsterProperties,
    <%_ if (serviceDiscoveryType === "consul") { _%>
    consulRegistration: ConsulRegistration?,
    <%_ } _%>
    <%_ if (serviceDiscoveryType && ['microservice', 'gateway', 'uaa'].includes(applicationType)) { _%>
    buildProperties: BuildProperties?,
    <%_ } _%>
    mapper: ObjectMapper
) {
    init {
        val context = LoggerFactory.getILoggerFactory() as LoggerContext

        val map = mutableMapOf<String, String?>()
        map["app_name"] = appName
        map["app_port"] = serverPort
        <%_ if (serviceDiscoveryType && ['microservice', 'gateway', 'uaa'].includes(applicationType)) { _%>
        buildProperties?.apply { map["version"] = this.version }
        <%_ } _%>
        <%_ if (serviceDiscoveryType === 'consul') { _%>
        consulRegistration?.apply { map["instance_id"] = this.instanceId }
        <%_ } _%>
        val customFields = mapper.writeValueAsString(map)

        val loggingProperties = jHipsterProperties.logging
        val logstashProperties = loggingProperties.logstash

        if (loggingProperties.isUseJsonFormat) {
            addJsonConsoleAppender(context, customFields)
        }
        if (logstashProperties.isEnabled) {
            addLogstashTcpSocketAppender(context, customFields, logstashProperties)
        }
        if (loggingProperties.isUseJsonFormat || logstashProperties.isEnabled) {
            addContextListener(context, customFields, loggingProperties)
        }
        if (jHipsterProperties.metrics.logs.isEnabled) {
            setMetricsMarkerLogbackFilter(context, loggingProperties.isUseJsonFormat)
        }
    }
}
