<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License")
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.config

import java.net.InetSocketAddress

import io.github.jhipster.config.JHipsterProperties

import ch.qos.logback.classic.AsyncAppender
import ch.qos.logback.classic.Level
import ch.qos.logback.classic.LoggerContext
import ch.qos.logback.classic.boolex.OnMarkerEvaluator
import ch.qos.logback.classic.spi.ILoggingEvent
import ch.qos.logback.classic.spi.LoggerContextListener
import ch.qos.logback.core.filter.EvaluatorFilter
import ch.qos.logback.core.spi.ContextAwareBase
import ch.qos.logback.core.spi.FilterReply
import net.logstash.logback.appender.LogstashTcpSocketAppender
import net.logstash.logback.encoder.LogstashEncoder
import net.logstash.logback.stacktrace.ShortenedThrowableConverter
import org.slf4j.LoggerFactory
import org.springframework.beans.factory.annotation.Value
<%_ if (serviceDiscoveryType === "eureka") { _%>
import org.springframework.cloud.context.config.annotation.RefreshScope
<%_ } _%>
<%_ if (serviceDiscoveryType === "consul") { _%>
import org.springframework.cloud.consul.ConditionalOnConsulEnabled
import org.springframework.cloud.consul.serviceregistry.ConsulRegistration
import org.springframework.cloud.context.config.annotation.RefreshScope
<%_ } _%>
import org.springframework.context.annotation.Configuration

@Configuration
<%_ if (serviceDiscoveryType === "eureka") { _%>
@RefreshScope
<%_ } _%>
<%_ if (serviceDiscoveryType === "consul") { _%>
@ConditionalOnConsulEnabled
@RefreshScope
<%_ } _%>
class LoggingConfiguration(@param:Value("\${spring.application.name}") private val appName: String, @param:Value("\${server.port}") private val serverPort: String,
    <% if (serviceDiscoveryType === "consul") { %> private val consulRegistration: ConsulRegistration,<% } %><% if (serviceDiscoveryType && (applicationType === 'microservice' || applicationType === 'gateway' || applicationType === 'uaa')) { %> @Value("\${info.project.version:}") private val version: String,<% } %>
                           private val jHipsterProperties: JHipsterProperties) {

    private val log = LoggerFactory.getLogger(LoggingConfiguration::class.java)

    private val context = LoggerFactory.getILoggerFactory() as LoggerContext

    init {
        if (jHipsterProperties.logging.logstash.isEnabled) {
            addLogstashAppender(context)
            addContextListener(context)
        }
        if (jHipsterProperties.metrics.logs.isEnabled) {
            setMetricsMarkerLogbackFilter(context)
        }
    }

    private fun addContextListener(context: LoggerContext) {
        val loggerContextListener = LogbackLoggerContextListener()
        loggerContextListener.context = context
        context.addListener(loggerContextListener)
    }

    private fun addLogstashAppender(context: LoggerContext) {
        log.info("Initializing Logstash logging")

        val logstashAppender = LogstashTcpSocketAppender()
        logstashAppender.name = LOGSTASH_APPENDER_NAME
        logstashAppender.context = context
        <%_ if (serviceDiscoveryType && (applicationType === 'microservice' || applicationType === 'gateway' || applicationType === 'uaa')) { _%>
        var optionalFields = ""
        <%_ if (serviceDiscoveryType === 'consul') { _%>
        if (consulRegistration != null) {
            optionalFields = "\"instance_id\":\"" + consulRegistration.getInstanceId() + "\","
        }
        <%_ } _%>
        val customFields = "{\"app_name\":\"" + appName + "\",\"app_port\":\"" + serverPort + "\"," +
            optionalFields + "\"version\":\"" + version + "\"}"
        <%_ } else { _%>
        val customFields = "{\"app_name\":\"" + appName + "\",\"app_port\":\"" + serverPort + "\"}"
        <%_ } _%>

        // More documentation is available at: https://github.com/logstash/logstash-logback-encoder
        val logstashEncoder = LogstashEncoder()
        // Set the Logstash appender config from JHipster properties
        logstashAppender.addDestinations(InetSocketAddress(jHipsterProperties.logging.logstash.host, jHipsterProperties.logging.logstash.port))

        val throwableConverter = ShortenedThrowableConverter()
        throwableConverter.isRootCauseFirst = true
        logstashEncoder.throwableConverter = throwableConverter
        logstashEncoder.customFields = customFields

        logstashAppender.encoder = logstashEncoder
        logstashAppender.start()

        // Wrap the appender in an Async appender for performance
        val asyncLogstashAppender = AsyncAppender()
        asyncLogstashAppender.context = context
        asyncLogstashAppender.name = ASYNC_LOGSTASH_APPENDER_NAME
        asyncLogstashAppender.queueSize = jHipsterProperties.logging.logstash.queueSize
        asyncLogstashAppender.addAppender(logstashAppender)
        asyncLogstashAppender.start()

        context.getLogger("ROOT").addAppender(asyncLogstashAppender)
    }

    // Configure a log filter to remove "metrics" logs from all appenders except the "LOGSTASH" appender
    private fun setMetricsMarkerLogbackFilter(context: LoggerContext) {
        log.info("Filtering metrics logs from all appenders except the {} appender", LOGSTASH_APPENDER_NAME)
        val onMarkerMetricsEvaluator = OnMarkerEvaluator()
        onMarkerMetricsEvaluator.context = context
        onMarkerMetricsEvaluator.addMarker("metrics")
        onMarkerMetricsEvaluator.start()
        val metricsFilter = EvaluatorFilter<ILoggingEvent>()
        metricsFilter.context = context
        metricsFilter.evaluator = onMarkerMetricsEvaluator
        metricsFilter.onMatch = FilterReply.DENY
        metricsFilter.start()

        for (logger in context.loggerList) {
            val it = logger.iteratorForAppenders()
            while (it.hasNext()) {
                val appender = it.next()
                if (appender.name != ASYNC_LOGSTASH_APPENDER_NAME) {
                    log.debug("Filter metrics logs from the {} appender", appender.name)
                    appender.context = context
                    appender.addFilter(metricsFilter)
                    appender.start()
                }
            }
        }
    }

    /**
     * Logback configuration is achieved by configuration file and API.
     * When configuration file change is detected, the configuration is reset.
     * This listener ensures that the programmatic configuration is also re-applied after reset.
     */
    internal inner class LogbackLoggerContextListener : ContextAwareBase(), LoggerContextListener {

        override fun isResetResistant(): Boolean {
            return true
        }

        override fun onStart(context: LoggerContext) {
            addLogstashAppender(context)
        }

        override fun onReset(context: LoggerContext) {
            addLogstashAppender(context)
        }

        override fun onStop(context: LoggerContext) {
            // Nothing to do.
        }

        override fun onLevelChange(logger: ch.qos.logback.classic.Logger, level: Level) {
            // Nothing to do.
        }
    }

    companion object {

        private const val LOGSTASH_APPENDER_NAME = "LOGSTASH"

        private const val ASYNC_LOGSTASH_APPENDER_NAME = "ASYNC_LOGSTASH"
    }

}
