<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.config

import org.hibernate.service.ServiceRegistry
import org.infinispan.hibernate.cache.v53.InfinispanRegionFactory
import org.infinispan.manager.EmbeddedCacheManager

import java.util.Properties

/**
 * Factory class for initializing Hibernate 2nd-level cache with Infinispan cache.
 *
 * This will be created through reflection. With Hibernate 5, support
 * to manage this cache through Spring has been removed and there is no way to inject it using
 * Dependency Injection. This needs to be initialized from
 * [CacheConfiguration ][CacheConfiguration.cacheConfigurer] to keep the same cache manager
 * between the Spring Cache and Hibernate.
 */
class CacheFactoryConfiguration : InfinispanRegionFactory() {

    /**
     * Defines a Hibernate L2 cache: infinispan-hibernate-cache.
     */
    override fun createCacheManager(properties: Properties, serviceRegistry: ServiceRegistry) =
        CacheConfiguration.cacheManager // Not a managed bean from the Spring Context (as it gets created through reflection) and hence override the static instance

    companion object {
        private const val serialVersionUID = 1L
    }
}
