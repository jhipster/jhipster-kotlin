<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.config

import com.fasterxml.jackson.databind.DeserializationFeature
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.databind.SerializationFeature
import com.github.vanroy.springdata.jest.JestElasticsearchTemplate
import com.github.vanroy.springdata.jest.mapper.DefaultJestResultsMapper
import io.searchbox.client.JestClient
import org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchProperties
import org.springframework.boot.context.properties.EnableConfigurationProperties
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.context.annotation.Primary
import org.springframework.data.elasticsearch.core.ElasticsearchOperations
import org.springframework.data.elasticsearch.core.EntityMapper
import org.springframework.data.elasticsearch.core.convert.ElasticsearchConverter
import org.springframework.data.elasticsearch.core.mapping.SimpleElasticsearchMappingContext
<%_ if (databaseType === 'mongodb') { _%>
import org.springframework.data.elasticsearch.core.mapping.ElasticsearchPersistentProperty
import org.springframework.data.elasticsearch.core.mapping.SimpleElasticsearchPersistentProperty
import org.springframework.data.mapping.PersistentEntity
import org.springframework.data.mapping.model.Property
import org.springframework.data.mapping.model.SimpleTypeHolder
import org.springframework.data.elasticsearch.core.convert.MappingElasticsearchConverter
import org.springframework.data.elasticsearch.core.mapping.SimpleElasticsearchPersistentEntity
<%_ } _%>

import java.io.IOException

@Configuration
@EnableConfigurationProperties(ElasticsearchProperties::class)
class ElasticsearchConfiguration(private val mapper: ObjectMapper) {

    @Bean
    fun getEntityMapper(): EntityMapper {
        return CustomEntityMapper(mapper)
    }

    @Bean
    @Primary
    fun elasticsearchTemplate(
        jestClient: JestClient,
        elasticsearchConverter: ElasticsearchConverter,
        simpleElasticsearchMappingContext: SimpleElasticsearchMappingContext,
        mapper: EntityMapper
    ): ElasticsearchOperations {
        return JestElasticsearchTemplate(
            jestClient,
            <%_ if (databaseType === 'mongodb') { _%>
            MappingElasticsearchConverter(CustomElasticsearchMappingContext()),
            <%_ } else { _%>
            elasticsearchConverter,
            <%_ } _%>
            DefaultJestResultsMapper(simpleElasticsearchMappingContext, mapper))
    }

    inner class CustomEntityMapper(private val objectMapper: ObjectMapper) : EntityMapper {

        init {
            objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)
            objectMapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true)
            objectMapper.configure(SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS, true)
            objectMapper.configure(SerializationFeature.INDENT_OUTPUT, false)
            objectMapper.configure(DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS, true)
        }

        @Throws(IOException::class)
        override fun mapToString(`object`: Any): String {
            return objectMapper.writeValueAsString(`object`)
        }

        @Throws(IOException::class)
        override fun <T> mapToObject(source: String, clazz: Class<T>): T {
            return objectMapper.readValue(source, clazz)
        }
    }
}
<%_ if (databaseType === 'mongodb') { _%>

internal class CustomElasticsearchMappingContext : SimpleElasticsearchMappingContext() {

    override fun createPersistentProperty(property: Property, owner: SimpleElasticsearchPersistentEntity<*>,
                                          simpleTypeHolder: SimpleTypeHolder): ElasticsearchPersistentProperty {
        return CustomElasticsearchPersistentProperty(property, owner, simpleTypeHolder)
    }
}

internal class CustomElasticsearchPersistentProperty(property: Property, owner: PersistentEntity<*, *>,
                                                     simpleTypeHolder: SimpleTypeHolder
) : SimpleElasticsearchPersistentProperty(property, owner, simpleTypeHolder) {

    override fun isAssociation(): Boolean {
        return false
    }
}
<%_ } _%>
