<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.config

import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.core.convert.converter.Converter
import org.springframework.data.convert.ReadingConverter
import org.springframework.data.convert.WritingConverter
import org.springframework.data.elasticsearch.config.ElasticsearchConfigurationSupport
import org.springframework.data.elasticsearch.core.convert.ElasticsearchCustomConversions
<%_ if (databaseType === 'mongodb') { _%>
import org.springframework.data.elasticsearch.core.mapping.SimpleElasticsearchMappingContext
import org.springframework.data.elasticsearch.core.mapping.ElasticsearchPersistentProperty
import org.springframework.data.elasticsearch.core.mapping.SimpleElasticsearchPersistentProperty
import org.springframework.data.mapping.PersistentEntity
import org.springframework.data.mapping.model.Property
import org.springframework.data.mapping.model.SimpleTypeHolder
import org.springframework.data.elasticsearch.core.mapping.SimpleElasticsearchPersistentEntity
<%_ } _%>

import java.time.Instant
import java.time.LocalDate
import java.time.ZoneId
import java.time.ZonedDateTime

@Configuration
class ElasticsearchConfiguration: ElasticsearchConfigurationSupport() {

    @Bean
    override fun elasticsearchCustomConversions() = ElasticsearchCustomConversions(
        listOf (
                ZonedDateTimeWritingConverter(),
                ZonedDateTimeReadingConverter(),
                InstantWritingConverter(),
                InstantReadingConverter(),
                LocalDateWritingConverter(),
                LocalDateReadingConverter()
            )
    )


    @WritingConverter
    class ZonedDateTimeWritingConverter: Converter<ZonedDateTime, String> {
        override fun convert(source: ZonedDateTime?): String? {
            if (source == null) {
                return null;
            }
            return source.toInstant().toString()
        }
    }

    @ReadingConverter
    class ZonedDateTimeReadingConverter: Converter<String, ZonedDateTime> {
        override fun convert(source: String?): ZonedDateTime? {
            if (source == null) {
                return null
            }
            return Instant.parse(source).atZone(ZoneId.systemDefault())
        }
    }

    @WritingConverter
    class InstantWritingConverter: Converter<Instant, String> {
        override fun convert(source: Instant?): String? {
            if (source == null) {
                return null
            }
            return source.toString()
        }
    }

    @ReadingConverter
    class InstantReadingConverter: Converter<String, Instant> {
        override fun convert(source: String?): Instant? {
            if (source == null) {
                return null
            }
            return Instant.parse(source)
        }
    }

    @WritingConverter
    class LocalDateWritingConverter: Converter<LocalDate, String> {
        override fun convert(source: LocalDate?): String? {
            if (source == null) {
                return null
            }
            return source.toString()
        }
    }

    @ReadingConverter
    static class LocalDateReadingConverter: Converter<String, LocalDate> {
        override fun convert(source: String?): LocalDate? {
            if (source == null) {
                return null
            }
            return LocalDate.parse(source)
        }
    }
<%_ if (databaseType === 'mongodb') { _%>

    @Bean
    override fun elasticsearchMappingContext(): SimpleElasticsearchMappingContext {
        val mappingContext = CustomElasticsearchMappingContext()
        mappingContext.initialEntitySet = this.initialEntitySet
        mappingContext.simpleTypeHolder = this.elasticsearchCustomConversions().simpleTypeHolder
        return mappingContext
    }
<%_ } _%>
}
<%_ if (databaseType === 'mongodb') { _%>

/**
* Custom mapping context in order to use the same entities for both MongoDB and Elasticsearch datasources
*/
class CustomElasticsearchMappingContext : SimpleElasticsearchMappingContext() {

    override fun createPersistentProperty(property: Property, owner: SimpleElasticsearchPersistentEntity<*>,
                                          simpleTypeHolder: SimpleTypeHolder): ElasticsearchPersistentProperty =
        CustomElasticsearchPersistentProperty(property, owner, simpleTypeHolder)
}

internal class CustomElasticsearchPersistentProperty(property: Property, owner: PersistentEntity<*, ElasticsearchPersistentProperty>,
                                                     simpleTypeHolder: SimpleTypeHolder
) : SimpleElasticsearchPersistentProperty(property, owner, simpleTypeHolder) {

    override fun isAssociation() = false
}
<%_ } _%>
