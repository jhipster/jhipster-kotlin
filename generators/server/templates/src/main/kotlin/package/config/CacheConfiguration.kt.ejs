<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.config

<%_ if (cacheProvider === 'ehcache') { _%>
import java.time.Duration

import org.ehcache.config.builders.CacheConfigurationBuilder
import org.ehcache.config.builders.ExpiryPolicyBuilder
import org.ehcache.config.builders.ResourcePoolsBuilder
import org.ehcache.jsr107.Eh107Configuration

import tech.jhipster.config.JHipsterProperties

    <%_ if (enableHibernateCache) { _%>
import org.hibernate.cache.jcache.ConfigSettings
    <%_ } _%>

<%_ } _%>
<%_ if (cacheProvider === 'caffeine') { _%>
import com.github.benmanes.caffeine.jcache.configuration.CaffeineConfiguration
import java.util.OptionalLong
import java.util.concurrent.TimeUnit

<%_ if (enableHibernateCache) { _%>
import org.hibernate.cache.jcache.ConfigSettings
<%_ } _%>
import tech.jhipster.config.JHipsterProperties

<%_ } _%>
<%_ if (cacheProvider === 'hazelcast') { _%>
import tech.jhipster.config.JHipsterConstants
import tech.jhipster.config.JHipsterProperties

import com.hazelcast.config.Config
import com.hazelcast.config.EvictionPolicy
import com.hazelcast.config.ManagementCenterConfig
import com.hazelcast.config.MapConfig
import com.hazelcast.config.MaxSizeConfig
import com.hazelcast.core.Hazelcast
import com.hazelcast.core.HazelcastInstance

import org.slf4j.LoggerFactory
<%_ } _%>
<%_ if (cacheProvider === 'ehcache' || cacheProvider === 'caffeine') { _%>
import org.springframework.boot.autoconfigure.cache.JCacheManagerCustomizer
    <%_ if (enableHibernateCache) { _%>
import org.springframework.boot.autoconfigure.orm.jpa.HibernatePropertiesCustomizer
    <%_ } _%>
<%_ } _%>
<%_ if (cacheProvider === 'hazelcast') { _%>
    <%_ if (serviceDiscoveryType === 'eureka' || serviceDiscoveryType === 'consul') { _%>
import org.springframework.boot.autoconfigure.web.ServerProperties
    <%_ } _%>

import org.springframework.cache.CacheManager
<%_ } _%>
<%_ if (cacheProvider !== 'no') { _%>
import org.springframework.boot.info.BuildProperties
import org.springframework.boot.info.GitProperties
import org.springframework.cache.interceptor.KeyGenerator
import org.springframework.beans.factory.annotation.Autowired
import tech.jhipster.config.cache.PrefixedKeyGenerator
<%_ } _%>
<%_ if (cacheProvider === 'memcached') { _%>
    <%_ if (!skipUserManagement || (authenticationType === 'oauth2' && databaseType !== 'no')) { _%>
import <%= packageName %>.repository.UserRepository
    <%_ } _%>

import org.slf4j.LoggerFactory
import org.springframework.cache.CacheManager
<%_ } _%>
import org.springframework.cache.annotation.EnableCaching
<%_ if (cacheProvider !== 'memcached') { _%>
    <%_ if (serviceDiscoveryType === 'eureka' || serviceDiscoveryType === 'consul') { _%>
import org.springframework.cloud.client.discovery.DiscoveryClient
import org.springframework.cloud.client.serviceregistry.Registration
    <%_ } _%>
<%_ } _%>
<%_ if (cacheProvider === 'memcached') { _%>
import org.springframework.cache.support.NoOpCacheManager
<%_ } _%>
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
<%_ if (cacheProvider === 'infinispan') { _%>
import org.springframework.context.annotation.Import
<%_ } _%>
<%_ if (cacheProvider === 'hazelcast') { _%>
import org.springframework.core.env.Environment
import org.springframework.core.env.Profiles
import javax.annotation.PreDestroy
<%_ } _%>
<%_ if (cacheProvider === 'infinispan') { _%>
import org.infinispan.configuration.cache.CacheMode
import org.infinispan.configuration.cache.ConfigurationBuilder
import org.infinispan.configuration.global.GlobalConfigurationBuilder
import org.infinispan.jboss.marshalling.core.JBossUserMarshaller
import org.slf4j.LoggerFactory
import tech.jhipster.config.JHipsterProperties
import java.util.concurrent.TimeUnit
import org.hibernate.cfg.AvailableSettings
import org.infinispan.eviction.EvictionType
import org.infinispan.manager.EmbeddedCacheManager
import org.infinispan.spring.starter.embedded.InfinispanCacheConfigurer
import org.infinispan.spring.starter.embedded.InfinispanGlobalConfigurer
import org.infinispan.transaction.TransactionMode
import org.springframework.boot.autoconfigure.orm.jpa.HibernatePropertiesCustomizer
import java.util.stream.Stream
    <%_ if (serviceDiscoveryType === 'eureka' || serviceDiscoveryType === 'consul') { _%>
import org.infinispan.remoting.transport.jgroups.JGroupsTransport
import org.jgroups.JChannel
import org.jgroups.PhysicalAddress
import org.jgroups.protocols.*
import org.jgroups.protocols.pbcast.GMS
import org.jgroups.protocols.pbcast.NAKACK2
import org.jgroups.protocols.pbcast.STABLE
import org.jgroups.stack.IpAddress
import org.jgroups.stack.ProtocolStack
import java.net.InetAddress
import java.net.InetSocketAddress
import org.springframework.beans.factory.BeanInitializationException
    <%_ } _%>
<%_ } _%>
<%_ if (cacheProvider === 'memcached') { _%>
import java.net.InetSocketAddress
import net.rubyeye.xmemcached.auth.AuthInfo
import net.rubyeye.xmemcached.utils.AddrUtil
import com.google.code.ssm.providers.xmemcached.XMemcachedConfiguration
import com.google.code.ssm.CacheFactory
import com.google.code.ssm.config.DefaultAddressProvider
import com.google.code.ssm.providers.xmemcached.MemcacheClientFactoryImpl
import com.google.code.ssm.spring.SSMCache
import com.google.code.ssm.spring.SSMCacheManager

import tech.jhipster.config.JHipsterProperties
<%_ } _%>
<%_ if (cacheProvider === 'redis') { _%>
import java.net.URI
import org.redisson.Redisson
import org.redisson.config.Config
import org.redisson.config.ClusterServersConfig
import org.redisson.config.SingleServerConfig
import org.redisson.jcache.configuration.RedissonConfiguration
import org.springframework.boot.autoconfigure.cache.JCacheManagerCustomizer
    <%_ if (enableHibernateCache) { _%>
import org.springframework.boot.autoconfigure.orm.jpa.HibernatePropertiesCustomizer
import org.hibernate.cache.jcache.ConfigSettings
    <%_ } _%>

import java.util.concurrent.TimeUnit

import javax.cache.configuration.MutableConfiguration
import javax.cache.expiry.CreatedExpiryPolicy
import javax.cache.expiry.Duration

import tech.jhipster.config.JHipsterProperties
<%_ } _%>

@Configuration
@EnableCaching
class CacheConfiguration(<%_ if (cacheProvider !== 'no') { _%>
    @Autowired val gitProperties: GitProperties?, 
    @Autowired val buildProperties: BuildProperties?<% } %><% if (cacheProvider === 'ehcache' || cacheProvider === 'caffeine') { %>, 
    jHipsterProperties: JHipsterProperties<% } else if (cacheProvider === 'hazelcast') { %>, 
    private val env: Environment<% if (serviceDiscoveryType === 'eureka' || serviceDiscoveryType === 'consul') { %>, 
    private val serverProperties: ServerProperties,
    private val discoveryClient: DiscoveryClient,
    @Autowired(required = false) val registration: Registration?<% } %><% } else if (cacheProvider === 'infinispan') { %><% if (serviceDiscoveryType === 'eureka' || serviceDiscoveryType === 'consul') { %>, 
    @Autowired(required = false) val discoveryClient: DiscoveryClient?, 
    @Autowired(required = false) val registration: Registration?<% } %><% } %>
) {
    <%_ if (cacheProvider === 'ehcache' || cacheProvider === 'caffeine') { _%>

    private val jcacheConfiguration: javax.cache.configuration.Configuration<Any, Any>

    init {
        <%_ if (cacheProvider === 'ehcache') { _%>
        val ehcache = jHipsterProperties.cache.ehcache

        jcacheConfiguration = Eh107Configuration.fromEhcacheCacheConfiguration(
            CacheConfigurationBuilder.newCacheConfigurationBuilder(
                Any::class.java, Any::class.java,
                ResourcePoolsBuilder.heap(ehcache.maxEntries)
            )
                .withExpiry(ExpiryPolicyBuilder.timeToLiveExpiration(Duration.ofSeconds(ehcache.timeToLiveSeconds.toLong())))
                .build()
        )
        <%_ } else { _%>
        val caffeine = jHipsterProperties.cache.caffeine

        val caffeineConfiguration = CaffeineConfiguration<Any, Any>()
        caffeineConfiguration.maximumSize = OptionalLong.of(caffeine.maxEntries)
        caffeineConfiguration.expireAfterWrite = OptionalLong.of(TimeUnit.SECONDS.toNanos(caffeine.timeToLiveSeconds.toLong()))
        caffeineConfiguration.isStatisticsEnabled = true
        jcacheConfiguration = caffeineConfiguration

        <%_ } _%>
    }

    <%_ if (enableHibernateCache) { _%>
    @Bean
    fun hibernatePropertiesCustomizer(cacheManager: javax.cache.CacheManager) =  HibernatePropertiesCustomizer  {
        hibernateProperties -> hibernateProperties[ConfigSettings.CACHE_MANAGER] = cacheManager
    }
    <%_ } _%>

    @Bean
    fun cacheManagerCustomizer(): JCacheManagerCustomizer {
        return JCacheManagerCustomizer { cm ->
            <%_ if (authenticationType === 'oauth2' && applicationType === 'microservice') { _%>
            createCache(cm, "oAuth2Authentication")
            <%_ } _%>
            <%_ if (!skipUserManagement || (authenticationType === 'oauth2' && databaseType !== 'no')) { _%>
            createCache(cm, <%= packageName %>.repository.UserRepository.USERS_BY_LOGIN_CACHE)
            createCache(cm, <%= packageName %>.repository.UserRepository.USERS_BY_EMAIL_CACHE)
                <%_ if (enableHibernateCache) { _%>
            createCache(cm, <%= packageName %>.domain.<%= asEntity('User') %>::class.java.name)
            createCache(cm, <%= packageName %>.domain.Authority::class.java.name)
            createCache(cm, <%= packageName %>.domain.<%= asEntity('User') %>::class.java.name + ".authorities")
                    <%_ if (authenticationType === 'session') { _%>
            createCache(cm, <%= packageName %>.domain.PersistentToken::class.java.name)
            createCache(cm, <%= packageName %>.domain.<%= asEntity('User') %>::class.java.name + ".persistentTokens")
                    <%_ } _%>
                <%_ } _%>
            <%_ } _%>
            <%_ if (cacheProvider === 'ehcache') { _%>
            // jhipster-needle-ehcache-add-entry
            <%_ } _%>
            <%_ if (cacheProvider === 'caffeine') { _%>
            // jhipster-needle-caffeine-add-entry
            <%_ } _%>
        }
    }

    private fun createCache(cm: javax.cache.CacheManager, cacheName: String) {
        val cache: javax.cache.Cache<Any, Any>? = cm.getCache(cacheName)
        if (cache != null) {
            cache.clear()
        } else {
            cm.createCache(cacheName, jcacheConfiguration)
        }
    }
    <%_ } _%>
    <%_ if (cacheProvider === 'hazelcast') { _%>

    private val log = LoggerFactory.getLogger(javaClass)

    @PreDestroy
    fun destroy() {
        log.info("Closing Cache Manager")
        Hazelcast.shutdownAll()
    }

    @Bean
    fun cacheManager(hazelcastInstance: HazelcastInstance): CacheManager {
        log.debug("Starting HazelcastCacheManager")
        return com.hazelcast.spring.cache.HazelcastCacheManager(hazelcastInstance)
    }

    @Bean
    fun hazelcastInstance(jHipsterProperties: JHipsterProperties): HazelcastInstance {
        log.debug("Configuring Hazelcast")
        val hazelCastInstance = Hazelcast.getHazelcastInstanceByName("<%=baseName%>")
        if (hazelCastInstance != null) {
            log.debug("Hazelcast already initialized")
            return hazelCastInstance
        }
        val config = Config()
        config.instanceName = "<%=baseName%>"
        <%_ if (serviceDiscoveryType === 'eureka' || serviceDiscoveryType === 'consul') { _%>
        config.networkConfig.join.multicastConfig.isEnabled = false
        if (registration == null) {
            log.warn("No discovery service is set up, Hazelcast cannot create a cluster.")
        } else {
            // The serviceId is by default the application's name,
            // see the "spring.application.name" standard Spring property
            val serviceId = registration!!.serviceId
            log.debug("Configuring Hazelcast clustering for instanceId: $serviceId")
            // In development, everything goes through 127.0.0.1, with a different port
            if (env.acceptsProfiles(Profiles.of(JHipsterConstants.SPRING_PROFILE_DEVELOPMENT))) {
                log.debug("Application is running with the \"dev\" profile, Hazelcast cluster will only work with localhost instances")

                config.networkConfig.port = serverProperties.port!! + 5701
                config.networkConfig.join.tcpIpConfig.isEnabled = true
                for (instance in discoveryClient.getInstances(serviceId)) {
                    val clusterMember = "127.0.0.1:" + (instance.port + 5701)
                    log.debug("Adding Hazelcast (dev) cluster member $clusterMember")
                    config.networkConfig.join.tcpIpConfig.addMember(clusterMember)
                }
            } else { // Production configuration, one host per instance all using port 5701
                config.networkConfig.port = 5701
                config.networkConfig.join.tcpIpConfig.isEnabled = true
                for (instance in discoveryClient.getInstances(serviceId)) {
                    val clusterMember = instance.host + ":5701"
                    log.debug("Adding Hazelcast (prod) cluster member $clusterMember")
                    config.networkConfig.join.tcpIpConfig.addMember(clusterMember)
                }
            }
        }
        <%_ } else { _%>
        config.networkConfig.port = 5701
        config.networkConfig.isPortAutoIncrement = true

        // In development, remove multicast auto-configuration
        if (env.acceptsProfiles(Profiles.of(JHipsterConstants.SPRING_PROFILE_DEVELOPMENT))) {
            System.setProperty("hazelcast.local.localAddress", "127.0.0.1")

            config.networkConfig.join.awsConfig.isEnabled = false
            config.networkConfig.join.multicastConfig.isEnabled = false
            config.networkConfig.join.tcpIpConfig.isEnabled = false
        }
        <%_ } _%>
        config.mapConfigs["default"] = initializeDefaultMapConfig(jHipsterProperties)

        // Full reference is available at: https://docs.hazelcast.org/docs/management-center/3.9/manual/html/Deploying_and_Starting.html
        config.managementCenterConfig = ManagementCenterConfig()
        <%_ if (enableHibernateCache) { _%>
        config.mapConfigs["<%= packageName %>.domain.*"] = initializeDomainMapConfig(jHipsterProperties)
        <%_ } _%>
        return Hazelcast.newHazelcastInstance(config)
    }

    private fun initializeDefaultMapConfig(jHipsterProperties: JHipsterProperties): MapConfig {
        val mapConfig = MapConfig()

        /*
        Number of backups. If 1 is set as the backup-count for example,
        then all entries of the map will be copied to another JVM for
        fail-safety. Valid numbers are 0 (no backup), 1, 2, 3.
        */
        mapConfig.backupCount = jHipsterProperties.cache.hazelcast.backupCount

        /*
        Valid values are:
        NONE (no eviction),
        LRU (Least Recently Used),
        LFU (Least Frequently Used).
        NONE is the default.
        */
        mapConfig.evictionConfig.evictionPolicy = EvictionPolicy.LRU

        /*
        Maximum size of the map. When max size is reached,
        map is evicted based on the policy defined.
        Any integer between 0 and Integer.MAX_VALUE. 0 means
        Integer.MAX_VALUE. Default is 0.
        */
        mapConfig.evictionConfig.maxSizePolicy = MaxSizePolicy.USED_HEAP_SIZE

        return mapConfig
    }
    <%_ if (cacheProvider === 'hazelcast') { _%>

    private fun initializeDomainMapConfig(jHipsterProperties: JHipsterProperties): MapConfig =
        MapConfig().apply { timeToLiveSeconds = jHipsterProperties.cache.hazelcast.timeToLiveSeconds }
    <%_ } _%>
    <%_ } _%>
    <%_ if (cacheProvider === 'infinispan') { _%>

    private val log = LoggerFactory.getLogger(javaClass)

    /**
     * Inject a [GlobalConfiguration][org.infinispan.configuration.global.GlobalConfiguration] for Infinispan cache.
     *
     * If a service discovery solution is enabled (JHipster Registry or Consul),
     * then the host list will be populated from the service discovery.
     *
     * If the service discovery is not enabled, host discovery will be based on
     * the default transport settings defined in the 'config-file' packaged within
     * the Jar. The 'config-file' can be overridden using the application property
     * *jhipster.cache.infinispan.config-file*
     *
     *
     * If no service discovery is defined, you have the choice of 'config-file'
     * based on the underlying platform for hosts discovery. Infinispan
     * supports discovery natively for most of the platforms like Kubernetes/OpenShift,
     * AWS, Azure and Google.
     *
     * @param jHipsterProperties the jhipster properties to configure from.
     * @return the infinispan global configurer.
     */
    @Bean
    fun globalConfiguration(jHipsterProperties: JHipsterProperties): InfinispanGlobalConfigurer {
        log.info("Defining Infinispan Global Configuration")
        <%_ if (serviceDiscoveryType === 'eureka' || serviceDiscoveryType === 'consul') { _%>
        if (registration == null) { // if registry is not defined, use native discovery
            log.warn("No discovery service is set up, Infinispan will use default discovery for cluster formation")
            return InfinispanGlobalConfigurer {
                GlobalConfigurationBuilder
                    .defaultClusteredBuilder().defaultCacheName("infinispan-<%=baseName%>-cluster-cache").transport().defaultTransport()
                    .addProperty("configurationFile", jHipsterProperties.cache.infinispan.configFile)
                    .clusterName("infinispan-<%=baseName%>-cluster").jmx()
                    .enabled(jHipsterProperties.cache.infinispan.isStatsEnabled)
                    .serialization().marshaller(JBossUserMarshaller()).build()
            }
        } else if (discoveryClient?.getInstances(registration?.serviceId)?.size == 0) {
          return InfinispanGlobalConfigurer {
            GlobalConfigurationBuilder
                .defaultClusteredBuilder().defaultCacheName("infinispan-<%=baseName%>-cluster-cache").transport()
                .transport(JGroupsTransport())
                .clusterName("infinispan-<%=baseName%>-cluster").jmx()
                .enabled(jHipsterProperties.cache.infinispan.isStatsEnabled)
                .serialization().marshaller(JBossUserMarshaller()).build()
          }
        } else {
          return InfinispanGlobalConfigurer {
              GlobalConfigurationBuilder
                  .defaultClusteredBuilder().defaultCacheName("infinispan-<%=baseName%>-cluster-cache").transport()
                  .transport(JGroupsTransport(getTransportChannel()))
                  .clusterName("infinispan-<%=baseName%>-cluster").jmx()
                  .enabled(jHipsterProperties.cache.infinispan.isStatsEnabled)
                  .serialization().marshaller(JBossUserMarshaller()).build()
          }
        }
        <%_ } else { _%>
        return InfinispanGlobalConfigurer {
            GlobalConfigurationBuilder
                .defaultClusteredBuilder().defaultCacheName("infinispan-<%=baseName%>-cluster-cache").transport().defaultTransport()
                .addProperty("configurationFile", jHipsterProperties.cache.infinispan.configFile)
                .clusterName("infinispan-<%=baseName%>-cluster").jmx()
                .enabled(jHipsterProperties.cache.infinispan.isStatsEnabled)
                .serialization().marshaller(JBossUserMarshaller()).build()
        }
        <%_ } _%>
    }

    /**
     * Initialize cache configuration for Hibernate L2 cache and Spring Cache.
     *
     * There are three different modes: local, distributed and replicated, and L2 cache options are pre-configured.
     *
     * It supports both jCache and Spring cache abstractions.
     *
     * Usage:
     *
     * 1. jCache: `@CacheResult(cacheName = "dist-app-data")` - for creating a distributed cache. In a similar way other cache names and options can be used
     * 2. Spring Cache: `@Cacheable(value = "repl-app-data")` - for creating a replicated cache. In a similar way other cache names and options can be used
     * 3. Cache manager can also be injected through DI/CDI and data can be manipulated using Infinispan APIs,
     * ```
     *      @Autowired (or) @Inject
     *      private lateinit val cacheManager: EmbeddedCacheManager
     *
     *      fun cacheSample() {
     *          cacheManager.getCache("dist-app-data")["hi"] = "there"
     *      }
     * ```
     * @param jHipsterProperties the jhipster properties to configure from.
     * @return the infinispan cache configurer.
     */
    @Bean
    fun cacheConfigurer(jHipsterProperties: JHipsterProperties): InfinispanCacheConfigurer {
        log.info("Defining {} configuration", "app-data for local, replicated and distributed modes")
        val cacheInfo = jHipsterProperties.cache.infinispan

        return InfinispanCacheConfigurer { manager ->
            // initialize application cache
            manager.defineConfiguration("local-app-data", ConfigurationBuilder()
                .clustering().cacheMode(CacheMode.LOCAL)
                .statistics().enabled(cacheInfo.isStatsEnabled)
                .memory().evictionType(EvictionType.COUNT).size(cacheInfo.local.maxEntries).expiration()
                .lifespan(cacheInfo.local.timeToLiveSeconds, TimeUnit.SECONDS).build())
            manager.defineConfiguration("dist-app-data", ConfigurationBuilder()
                .clustering().cacheMode(CacheMode.DIST_SYNC).hash().numOwners(cacheInfo.distributed.instanceCount)
                .statistics().enabled(cacheInfo.isStatsEnabled)
                .memory().evictionType(EvictionType.COUNT).size(cacheInfo.distributed.maxEntries).expiration()
                .lifespan(cacheInfo.distributed.timeToLiveSeconds, TimeUnit.SECONDS).build())
            manager.defineConfiguration("repl-app-data", ConfigurationBuilder()
                .clustering().cacheMode(CacheMode.REPL_SYNC)
                .statistics().enabled(cacheInfo.isStatsEnabled)
                .memory().evictionType(EvictionType.COUNT).size(cacheInfo.replicated.maxEntries).expiration()
                .lifespan(cacheInfo.replicated.timeToLiveSeconds, TimeUnit.SECONDS).build())

            // initialize Hibernate L2 cache configuration templates
            manager.defineConfiguration("entity", ConfigurationBuilder().clustering().cacheMode(CacheMode.INVALIDATION_SYNC)
                .statistics().enabled(cacheInfo.isStatsEnabled)
                .locking().concurrencyLevel(1000).lockAcquisitionTimeout(15000).template(true).build())
            manager.defineConfiguration("replicated-entity", ConfigurationBuilder().clustering().cacheMode(CacheMode.REPL_SYNC)
                .statistics().enabled(cacheInfo.isStatsEnabled)
                .locking().concurrencyLevel(1000).lockAcquisitionTimeout(15000).template(true).build())
            manager.defineConfiguration("local-query", ConfigurationBuilder().clustering().cacheMode(CacheMode.LOCAL)
                .statistics().enabled(cacheInfo.isStatsEnabled)
                .locking().concurrencyLevel(1000).lockAcquisitionTimeout(15000).template(true).build())
            manager.defineConfiguration("replicated-query", ConfigurationBuilder().clustering().cacheMode(CacheMode.REPL_ASYNC)
                .statistics().enabled(cacheInfo.isStatsEnabled)
                .locking().concurrencyLevel(1000).lockAcquisitionTimeout(15000).template(true).build())
            manager.defineConfiguration("timestamps", ConfigurationBuilder().clustering().cacheMode(CacheMode.REPL_ASYNC)
                .statistics().enabled(cacheInfo.isStatsEnabled)
                .locking().concurrencyLevel(1000).lockAcquisitionTimeout(15000).template(true).build())
            manager.defineConfiguration("pending-puts", ConfigurationBuilder().clustering().cacheMode(CacheMode.LOCAL)
                .statistics().enabled(cacheInfo.isStatsEnabled)
                .simpleCache(true).transaction().transactionMode(TransactionMode.NON_TRANSACTIONAL).expiration().maxIdle(60000).template(true).build())

            <%_ if (!skipUserManagement || (authenticationType === 'oauth2' && databaseType !== 'no')) { _%>
            Stream.of(<%= packageName %>.repository.UserRepository.USERS_BY_LOGIN_CACHE, <%= packageName %>.repository.UserRepository.USERS_BY_EMAIL_CACHE)
                .forEach { cacheName -> manager.defineConfiguration(cacheName, ConfigurationBuilder().clustering()
                    .cacheMode(CacheMode.INVALIDATION_SYNC)
                    .statistics()
                    .enabled(cacheInfo.isStatsEnabled())
                    .locking()
                    .concurrencyLevel(1000)
                    .lockAcquisitionTimeout(15000)
                    .build())}
            <%_ } _%>
            <%_ if (authenticationType === 'oauth2' && applicationType === 'microservice') { _%>
            manager.defineConfiguration("oAuth2Authentication", ConfigurationBuilder()
                .clustering().cacheMode(CacheMode.LOCAL)
                .statistics().enabled(cacheInfo.isStatsEnabled())
                .memory().evictionType(EvictionType.COUNT).size(cacheInfo.getLocal().getMaxEntries()).expiration()
                .lifespan(cacheInfo.getLocal().getTimeToLiveSeconds(), TimeUnit.SECONDS).build())
            <%_ } _%>
        }
    }

    <%_ if (enableHibernateCache) { _%>
    /**
    * Hibernate properties customizer.
    * This component ensures that Hibernate L2 cache region factory uses, as cache manager, the
    * same instance already configured in Spring Context with {@link CacheConfiguration}
    *
    * @param cacheFactoryConfiguration custom infinispan region factory
    * @return hibernate properties with custom cache region factory
    */
    @Bean
    fun hibernatePropertiesCustomizer(cacheFactoryConfiguration: CacheFactoryConfiguration) = HibernatePropertiesCustomizer {
        props -> props[AvailableSettings.CACHE_REGION_FACTORY] = cacheFactoryConfiguration
    }
    <%_ } _%>

        <%_ if (serviceDiscoveryType === 'eureka' || serviceDiscoveryType === 'consul') { _%>
    /**
     * TCP channel with the host details populated from the service discovery
     * (JHipster Registry or Consul).
     *
     * MPING multicast is replaced with TCPPING with the host details discovered
     * from registry and sends only unicast messages to the host list.
     */
    private fun getTransportChannel(): JChannel {
        var channel: JChannel
        val initialHosts = mutableListOf<InetSocketAddress>()
        try {
            for (instance in  discoveryClient?.getInstances(registration?.serviceId)!!) {
                log.debug("Adding Infinispan cluster member ${instance.host}:7800")
                initialHosts.add(InetSocketAddress(instance.host, 7800))
            }
            val tcp = TCP().apply {
                setBindAddress<TP>(InetAddress.getLocalHost())
                setBindPort<TP>(7800)
                setThreadPoolMinThreads<TP>(2)
                setThreadPoolMaxThreads<TP>(30)
                setThreadPoolKeepAliveTime<TP>(60000)
            }

            val tcpping = TCPPING().apply {
                initialHosts.add(InetSocketAddress(InetAddress.getLocalHost(), 7800))
                setInitialHosts<TCPPING>(initialHosts)
                setErgonomics<TCPPING>(false)
                setPortRange<TCPPING>(10)
                sendCacheInformation()
            }

            val nakack = NAKACK2().apply {
                isUseMcastXmit = false
                isDiscardDeliveredMsgs = false
            }

            val merge = MERGE3().apply {
                minInterval = 10000
                maxInterval = 30000
            }

            val fd = FD_ALL().apply {
                timeout = 60000
                interval = 15000
                timeoutCheckInterval = 5000
            }

            val stack = ProtocolStack()
            // Order shouldn't be changed
            stack
                .addProtocol(tcp)
                .addProtocol(tcpping)
                .addProtocol(merge)
                .addProtocol(FD_SOCK())
                .addProtocol(fd)
                .addProtocol(VERIFY_SUSPECT())
                .addProtocol(nakack)
                .addProtocol(UNICAST3())
                .addProtocol(STABLE())
                .addProtocol(GMS())
                .addProtocol(MFC())
                .addProtocol(FRAG2())

            channel = JChannel(stack)
            stack.init()
        } catch (e: Exception) {
            throw BeanInitializationException("Cache (Infinispan protocol stack) configuration failed", e)
        }
        return channel
    }
        <%_ } _%>

    <%_ } _%>
    <%_ if (cacheProvider === 'memcached') { _%>

    private val log = LoggerFactory.getLogger(javaClass)

    @Throws(Exception::class)
    @Bean
    fun memcachedCacheManager(jHipsterProperties: JHipsterProperties, caches: List<CacheFactory>): CacheManager {

        if (!jHipsterProperties.cache.memcached.isEnabled) {
            // Note that Memcached cannot work with Spring Boot devtools
            // So it should be disabled in development mode
            log.debug("Memcached is disabled")
            return NoOpCacheManager()
        }
        log.debug("Starting Memcached configuration")
        val cacheManager = SSMCacheManager()
        val ssmCaches = mutableListOf<SSMCache>()
        for (cache in caches) {
            val ssmCache = SSMCache(cache.getObject(), jHipsterProperties.cache.memcached.expiration,false)

            ssmCaches.add(ssmCache)
        }
        cacheManager.caches = ssmCaches
        return cacheManager
    }
    <%_ if (!skipUserManagement || (authenticationType === 'oauth2' && databaseType !== 'no')) { _%>

    @Bean
    fun usersByLoginCache(jHipsterProperties: JHipsterProperties): CacheFactory? =
        createCache(UserRepository.USERS_BY_LOGIN_CACHE, jHipsterProperties)

    @Bean
    fun usersByEmailCache(jHipsterProperties: JHipsterProperties): CacheFactory? =
        createCache(UserRepository.USERS_BY_EMAIL_CACHE, jHipsterProperties)
    <%_ } _%>

    private fun createCache(cacheName: String,jHipsterProperties: JHipsterProperties): CacheFactory? {
        if (!jHipsterProperties.cache.memcached.isEnabled) {
            // Note that Memcached cannot work with Spring Boot devtools
            // So it should be disabled in development mode
            return null
        }
        val defaultCache = CacheFactory().apply {
            this.cacheName = cacheName
            cacheClientFactory = MemcacheClientFactoryImpl()
        }

        defaultCache.addressProvider = DefaultAddressProvider().apply {
            address = jHipsterProperties.cache.memcached.servers
        }

        var authInfoMap = mutableMapOf<InetSocketAddress, AuthInfo>()
        
        if (jHipsterProperties.cache.memcached.authentication.isEnabled) {
            val memcachedServers = AddrUtil.getOneAddress(jHipsterProperties.cache.memcached.servers)
            val authInfo = AuthInfo.plain(
                jHipsterProperties.cache.memcached.authentication.username,
                jHipsterProperties.cache.memcached.authentication.password
            )
            authInfoMap[memcachedServers] = authInfo
        }

        val cacheConfiguration = XMemcachedConfiguration().apply {
            authInfoMap = authInfoMap
            isConsistentHashing = true
            isUseBinaryProtocol = jHipsterProperties.cache.memcached.isUseBinaryProtocol
        }
        defaultCache.configuration = cacheConfiguration

        return defaultCache
    }
    <%_ } _%>
    <%_ if (cacheProvider === 'redis') { _%>
    @Bean
    fun jcacheConfiguration(jHipsterProperties: JHipsterProperties): javax.cache.configuration.Configuration<Any, Any>  {
        val jcacheConfig = MutableConfiguration<Any, Any>()
        val redisUri = URI.create(jHipsterProperties.cache.redis.server[0])
        val config = Config()
        if (jHipsterProperties.cache.redis.isCluster) {
            var clusterServersConfig = config
                .useClusterServers()
                .setMasterConnectionPoolSize(jHipsterProperties.cache.redis.connectionPoolSize)
                .setMasterConnectionMinimumIdleSize(jHipsterProperties.cache.redis.connectionMinimumIdleSize)
                .setSubscriptionConnectionPoolSize(jHipsterProperties.cache.redis.subscriptionConnectionPoolSize)
                .addNodeAddress(*jHipsterProperties.cache.redis.server)
            if (redisUri.userInfo != null) {
                clusterServersConfig.setPassword(redisUri.userInfo.substring(redisUri.userInfo.indexOf(':') + 1))
            }
        } else {
            var singleServerConfig = config
                .useSingleServer()
                .setConnectionPoolSize(jHipsterProperties.cache.redis.connectionPoolSize)
                .setConnectionMinimumIdleSize(jHipsterProperties.cache.redis.connectionMinimumIdleSize)
                .setSubscriptionConnectionPoolSize(jHipsterProperties.cache.redis.subscriptionConnectionPoolSize)
                .setAddress(jHipsterProperties.cache.redis.server[0])

            if (redisUri.userInfo != null) {
                singleServerConfig.setPassword(redisUri.userInfo.substring(redisUri.userInfo.indexOf(':') + 1))
            }
        }
        jcacheConfig.isStatisticsEnabled = true
        jcacheConfig.setExpiryPolicyFactory(CreatedExpiryPolicy.factoryOf(Duration(TimeUnit.SECONDS, jHipsterProperties.cache.redis.expiration.toLong())))
        return RedissonConfiguration.fromInstance(Redisson.create(config), jcacheConfig)
    }

    <%_ if (enableHibernateCache) { _%>
    @Bean
    fun hibernatePropertiesCustomizer(cm: javax.cache.CacheManager) = HibernatePropertiesCustomizer {
        props -> props[ConfigSettings.CACHE_REGION_FACTORY] = cm
    }
    <%_ } _%>

    @Bean
    fun cacheManagerCustomizer(jcacheConfiguration: javax.cache.configuration.Configuration<Any, Any> ): JCacheManagerCustomizer {
        return JCacheManagerCustomizer {
            <%_ if (!skipUserManagement || (authenticationType === 'oauth2' && databaseType !== 'no')) { _%>
            createCache(it, <%= packageName %>.repository.UserRepository.USERS_BY_LOGIN_CACHE, jcacheConfiguration)
            createCache(it, <%= packageName %>.repository.UserRepository.USERS_BY_EMAIL_CACHE, jcacheConfiguration)
                <%_ if (enableHibernateCache) { _%>
            createCache(it, <%= packageName %>.domain.<%= asEntity('User') %>::class.java.name, jcacheConfiguration)
            createCache(it, <%= packageName %>.domain.Authority::class.java.name, jcacheConfiguration)
            createCache(it, <%= packageName %>.domain.<%= asEntity('User') %>::class.java.name + ".authorities", jcacheConfiguration)
                    <%_ if (authenticationType === 'session') { _%>
            createCache(it, <%= packageName %>.domain.PersistentToken::class.java.name, jcacheConfiguration)
            createCache(it, <%= packageName %>.domain.<%= asEntity('User') %>::class.java.name + ".persistentTokens", jcacheConfiguration)
                    <%_ } _%>
                <%_ } _%>
            <%_ } _%>
            // jhipster-needle-redis-add-entry
        }
    }

    private fun createCache(cm: javax.cache.CacheManager, cacheName: String, jcacheConfiguration: javax.cache.configuration.Configuration<Any, Any>): Unit {
        val cache = cm.getCache<Any, Any>(cacheName)
        if (cache != null) {
            cache.clear()
        } else {
            cm.createCache(cacheName, jcacheConfiguration)
        }
    }

    <%_ } _%>

    <%_ if (cacheProvider !== 'no') { _%>
        @Bean
        fun keyGenerator() = PrefixedKeyGenerator(gitProperties, buildProperties)
    <%_ } _%>
}
