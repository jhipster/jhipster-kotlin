<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.config

import org.springframework.boot.context.properties.ConfigurationProperties
import org.springframework.context.annotation.Configuration

@Configuration
@ConfigurationProperties(prefix="kafka", ignoreUnknownFields = true)
class KafkaProperties {

    private var bootStrapServers: String = "localhost:9092"

    private var consumer: MutableMap<String, Any> = hashMapOf()

    private var producer: MutableMap<String, Any> = hashMapOf()

    fun getBootStrapServers(): String {
        return bootStrapServers
    }

    fun setBootStrapServers(bootStrapServers: String) {
        this.bootStrapServers = bootStrapServers
    }

    fun getConsumerProps(): MutableMap<String, Any> {
        val properties = consumer
        if (!properties.containsKey("bootstrap.servers")) {
            properties["bootstrap.servers"] = bootStrapServers
        }
        return properties
    }

    fun setConsumer(consumer: MutableMap<String, Any>) {
        this.consumer = consumer
    }

    fun getProducerProps(): MutableMap<String, Any> {
        val properties = producer
        if (!properties.containsKey("bootstrap.servers")) {
            properties["bootstrap.servers"] = bootStrapServers
        }

        if(producer["key"] != null) {
            val key = producer["key"] as Map<String, Any>
            val serializer = key["serializer"]
            if (serializer != null) {
                properties["key.serializer"] = serializer
            }
        }

        if(producer["value"] != null) {
            val value = producer["value"] as Map<String, Any>
            val serializer = value["serializer"]
            if (serializer != null) {
                properties["value.serializer"] = serializer
            }
        }

        return properties
    }

    fun setProducer(producer: MutableMap<String, Any>) {
        this.producer = producer
    }
}
