<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://jhipster.github.io/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License")
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.security.oauth2

import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.node.ObjectNode
import org.springframework.core.convert.converter.Converter
import org.springframework.http.HttpEntity
import org.springframework.http.HttpHeaders
import org.springframework.http.HttpMethod
import org.springframework.http.ResponseEntity
import org.springframework.security.oauth2.client.registration.ClientRegistration
import org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter
import org.springframework.security.oauth2.server.resource.web.BearerTokenResolver
import org.springframework.security.oauth2.server.resource.web.DefaultBearerTokenResolver
import org.springframework.web.client.RestTemplate
import org.springframework.web.context.request.RequestContextHolder
import org.springframework.web.context.request.ServletRequestAttributes

class CustomClaimConverter(private val registration: ClientRegistration, private val restTemplate: RestTemplate): Converter<Map<String, Any>, Map<String, Any>> {

    private val bearerTokenResolver: BearerTokenResolver = DefaultBearerTokenResolver()
    private val delegate: MappedJwtClaimSetConverter = MappedJwtClaimSetConverter.withDefaults(emptyMap())
    val users: MutableMap<String, ObjectNode> = hashMapOf()


    override fun convert(claims: Map<String, Any>): Map<String, Any>? {
        val convertedClaims = delegate.convert(claims)
        if (RequestContextHolder.getRequestAttributes() != null) {
            // Retrieve and set the token
            val token = bearerTokenResolver.resolve((RequestContextHolder.getRequestAttributes() as ServletRequestAttributes).request)
            val httpHeaders = HttpHeaders().apply {
                set("Authorization", "Bearer $token")
            }


            // Retrieve user infos from OAuth provider if not already loaded
            val user = users.computeIfAbsent(claims["sub"].toString()) {
                val userInfo: ResponseEntity<ObjectNode> = restTemplate.exchange(
                    registration.providerDetails.userInfoEndpoint.uri,
                    HttpMethod.GET,
                    HttpEntity<String>(httpHeaders),
                    ObjectNode::class.java
                )
                userInfo.body
            }

            // Add custom claims
            if (user != null) {
                convertedClaims["preferred_username"] = user.get("preferred_username").asText()
                convertedClaims["given_name"] = user.get("given_name").asText()
                convertedClaims["family_name"] = user.get("family_name").asText()
                val groups = user.get("groups").map(JsonNode::asText)
                convertedClaims["groups"] = groups
            }
        }

        return convertedClaims
    }

}

