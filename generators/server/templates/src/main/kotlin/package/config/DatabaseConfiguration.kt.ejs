<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.config

import tech.jhipster.config.JHipsterConstants
<%_ if (devDatabaseType === 'h2Disk' || devDatabaseType === 'h2Memory') { _%>
import tech.jhipster.config.h2.H2ConfigurationHelper
<%_ } _%>
<%_ if (databaseType === 'sql' && reactive) { _%>
import io.r2dbc.spi.ConnectionFactory
<%_ } _%>
<%_ if (databaseType === 'mongodb') { _%>
import com.github.mongobee.Mongobee
import com.mongodb.MongoClient
<%_ } _%>
<%_ if (databaseType === 'couchbase') { _%>

import com.couchbase.client.java.Bucket
import com.github.couchmove.Couchmove
import <%= packageName %>.repository.Custom<% if (reactive) { %>Reactive<% } %>N1qlCouchbaseRepository
    <%_ if (searchEngine === 'elasticsearch') { _%>
import <%= packageName %>.repository.<% if (reactive) { %>Reactive<% } %>N1qlCouchbaseRepository
    <%_ } _%>
import org.apache.commons.codec.binary.Base64
<%_ } _%>
<%_ if (databaseType === 'mongodb') { _%>
import tech.jhipster.domain.util.JSR310DateConverters.DateToZonedDateTimeConverter
import tech.jhipster.domain.util.JSR310DateConverters.ZonedDateTimeToDateConverter
<%_ } _%>
<%_ if (databaseType === 'mongodb' || databaseType === 'couchbase' || (databaseType==='sql' && (devDatabaseType === 'h2Disk' || devDatabaseType === 'h2Memory'))) { _%>
import org.slf4j.LoggerFactory
<%_ } _%>
<%_ if (databaseType === 'mongodb') { _%>
import org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration
import org.springframework.boot.autoconfigure.mongo.MongoProperties
    <%_ if (reactive) { _%>
import org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration
    <%_ } _%>
<%_ } _%>
<%_ if (databaseType === 'couchbase') { _%>
import org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration
import org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties
<%_ } _%>
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.ComponentScan
import org.springframework.context.annotation.ComponentScan.Filter
import org.springframework.context.annotation.Configuration
import org.springframework.context.annotation.FilterType
import org.springframework.context.annotation.Import
import org.springframework.context.annotation.Profile
<%_ if (databaseType === 'mongodb' || databaseType === 'couchbase' || (databaseType === 'sql' && reactive)) { _%>
import org.springframework.core.convert.converter.Converter
<%_ } _%>
<%_ if (searchEngine === 'elasticsearch') { _%>
import org.springframework.data.elasticsearch.repository.config.Enable<% if (reactive) { %>Reactive<% } %>ElasticsearchRepositories
<%_ } _%>
<%_ if (databaseType === 'neo4j') { _%>
import org.neo4j.springframework.data.repository.config.Enable<% if (reactive) { %>Reactive<% } %>Neo4jRepositories
<%_ if (searchEngine === 'elasticsearch') { _%>
import org.neo4j.springframework.data.repository.<% if (reactive) { %>Reactive<% } %>Neo4jRepository
<%_ } _%>
<%_ } _%>
<%_ if (databaseType === 'mongodb') { _%>
    <%_ if (!reactive) { _%>
import org.springframework.data.mongodb.config.EnableMongoAuditing
    <%_ } _%>
import org.springframework.data.mongodb.core.MongoTemplate
import org.springframework.data.mongodb.core.convert.MongoCustomConversions
import org.springframework.data.mongodb.core.mapping.event.ValidatingMongoEventListener
    <%_ if (searchEngine === 'elasticsearch') { _%>
import org.springframework.data.mongodb.repository.<% if (reactive) { %>Reactive<% } %>MongoRepository
    <%_ } _%>
import org.springframework.data.mongodb.repository.config.Enable<% if (reactive) { %>Reactive<% } %>MongoRepositories
<%_ } _%>
<%_ if (databaseType === 'couchbase') { _%>
import org.springframework.data.convert.ReadingConverter
import org.springframework.data.convert.WritingConverter
import org.springframework.data.couchbase.config.BeanNames
import org.springframework.data.couchbase.core.convert.CouchbaseCustomConversions
import org.springframework.data.couchbase.core.mapping.event.ValidatingCouchbaseEventListener
    <%_ if (!reactive) { _%>
import org.springframework.data.couchbase.repository.auditing.EnableCouchbaseAuditing
    <%_ } _%>
import org.springframework.data.couchbase.repository.config.Enable<%_ if (reactive) { _%>Reactive<% } %>CouchbaseRepositories
import org.springframework.util.StringUtils<% } %><% if (databaseType === 'mongodb' || databaseType === 'couchbase') { %>
import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean<% } %>
<%_ if (databaseType === 'sql') { _%>
    <%_ if (devDatabaseType === 'h2Disk' || devDatabaseType === 'h2Memory') { _%>
import org.springframework.core.env.Environment
    <%_ } _%>
    <%_ if (reactive) { _%>
import org.springframework.data.convert.CustomConversions
import org.springframework.data.convert.ReadingConverter
import org.springframework.data.convert.WritingConverter
import org.springframework.data.r2dbc.convert.R2dbcCustomConversions
import org.springframework.data.r2dbc.dialect.DialectResolver
import org.springframework.data.r2dbc.dialect.R2dbcDialect
import org.springframework.data.r2dbc.repository.config.EnableR2dbcRepositories
    <%_ } else { _%>
import org.springframework.data.jpa.repository.config.EnableJpaAuditing
import org.springframework.data.jpa.repository.config.EnableJpaRepositories
    <%_ } _%>
import org.springframework.transaction.annotation.EnableTransactionManagement

<%_ if (devDatabaseType === 'h2Disk' || devDatabaseType === 'h2Memory') { _%>
import java.sql.SQLException
<%_ } } _%>
<%_ if (databaseType === 'sql' && reactive) { _%>
import java.time.Instant
import java.time.LocalDateTime
import java.time.ZoneOffset
<%_ } _%>
<%_ if (databaseType === 'couchbase') { _%>

import java.math.BigDecimal
import java.math.BigInteger
import java.time.ZoneId
import java.time.ZonedDateTime
import java.util.Date
import java.util.UUID
<%_ } _%>

@Configuration
<%_ if (databaseType === 'sql') { _%>
    <%_ if (reactive) { _%>
@EnableR2dbcRepositories("<%= packageName %>.repository")
    <%_ } else { _%>
@EnableJpaRepositories("<%= packageName %>.repository")
@EnableJpaAuditing(auditorAwareRef = "springSecurityAuditorAware")
    <%_ } _%>
@EnableTransactionManagement
<%_ } _%>
<%_ if (databaseType === 'neo4j') { _%>
    <%_ if (searchEngine === 'elasticsearch') { _%>
@Enable<% if (reactive) { %>Reactive<% } %>Neo4jRepositories(basePackages = ["<%= packageName %>.repository"], includeFilters = [ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE, value = <% if (reactive) { %>Reactive<% } %>Neo4jRepository::class])])
    <%_ } else { _%>
@Enable<% if (reactive) { %>Reactive<% } %>Neo4jRepositories("<%= packageName %>.repository")
    <%_ } _%>
<%_ } _%>
<%_ if (searchEngine === 'elasticsearch') { _%>
@Enable<% if (reactive) { %>Reactive<% } %>ElasticsearchRepositories("<%= packageName %>.repository.search")
<%_ } _%>
<%_ if (databaseType === 'mongodb') { _%>
    <%_ if (searchEngine === 'elasticsearch') { _%>
@Enable<% if (reactive) { %>Reactive<% } %>MongoRepositories(basePackages = ["<%= packageName %>.repository"], includeFilters = [ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE, value = [<% if (reactive) { %>Reactive<% } %>MongoRepository::class])])
    <%_ } else { _%>
@Enable<% if (reactive) { %>Reactive<% } %>MongoRepositories("<%= packageName %>.repository")
    <%_ } _%>
<%_ } _%>
<%_ if (databaseType === 'mongodb' || databaseType === 'couchbase') { _%>
@Profile("!" + JHipsterConstants.SPRING_PROFILE_CLOUD)
<%_ } _%>
<%_ if (databaseType === 'mongodb') { _%>
    <%_ if (reactive) { _%>
@Import(value = [MongoAutoConfiguration::class, MongoReactiveAutoConfiguration::class])
    <%_ } else { _%>
@Import(value = [MongoAutoConfiguration::class])
@EnableMongoAuditing(auditorAwareRef = "springSecurityAuditorAware")
    <%_ } _%>
<%_ } _%>
<%_ if (databaseType === 'couchbase') { _%>
@Enable<% if (reactive) { %>Reactive<% } %>CouchbaseRepositories(repositoryBaseClass = Custom<% if (reactive) { %>Reactive<% } %>N1qlCouchbaseRepository::class, basePackages = ["<%= packageName %>.repository"]<%_ if (searchEngine === 'elasticsearch') { %>,
    includeFilters = [ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE, value = [<% if (reactive) { %>Reactive<% } %>N1qlCouchbaseRepository::class])]<%_ } _%>)
        <%_ if (!reactive) { _%>
@EnableCouchbaseAuditing(auditorAwareRef = "springSecurityAuditorAware")
  <%_ } _%>
@Import(value = [CouchbaseAutoConfiguration::class])
<%_ } _%>
class DatabaseConfiguration<%_ if (databaseType === 'sql' && (devDatabaseType === 'h2Disk' || devDatabaseType === 'h2Memory') ) { _%>(private val env: Environment) { <%_ } else if (databaseType === 'mongodb' || databaseType === 'couchbase') { %> {<% } %>
<%_ if (databaseType === 'sql' && (devDatabaseType === 'h2Disk' || devDatabaseType === 'h2Memory')) { _%>

    private val log = LoggerFactory.getLogger(javaClass)

    /**
     * Open the TCP port for the H2 database, so it is available remotely.
     *
     * @return the H2 database TCP server.
     * @throws SQLException if the server failed to start.
     */
    @Throws(SQLException::class)
    @Bean(initMethod = "start", destroyMethod = "stop")
    @Profile(JHipsterConstants.SPRING_PROFILE_DEVELOPMENT)
    fun h2TCPServer(): Any {
        val port = getValidPortForH2()
        log.debug("H2 database is available on port $port")
        return H2ConfigurationHelper.createServer(port)
    }

    private fun getValidPortForH2(): String {
        var port = Integer.parseInt(env.getProperty("server.port"))
        if (port < 10000) {
            port += 10000
        } else {
            if (port < 63536) {
                port += 2000
            } else {
                port -= 2000
            }
        }
        return port.toString()
    }
<%_ } _%>
<%_ if (databaseType === 'mongodb' || databaseType === 'couchbase') { _%>

    private val log = LoggerFactory.getLogger(javaClass)
<%_ } _%>
<%_ if (databaseType === 'mongodb') { _%>

    @Bean
    fun validatingMongoEventListener() = ValidatingMongoEventListener(validator())
<%_ } _%>
<%_ if (databaseType === 'couchbase') { _%>

    @Bean
    fun validatingCouchbaseEventListener() = ValidatingCouchbaseEventListener(validator())
<%_ } _%>
<%_ if (databaseType === 'mongodb' || databaseType === 'couchbase') { _%>

    @Bean
    fun validator() = LocalValidatorFactoryBean()
<%_ } if (databaseType === 'mongodb') { _%>

    @Bean
    fun customConversions() =
        MongoCustomConversions(
            mutableListOf<Converter<*, *>>(
                DateToZonedDateTimeConverter.INSTANCE,
                ZonedDateTimeToDateConverter.INSTANCE
            )
        )

    @Bean
    fun mongobee(mongoClient: MongoClient, mongoTemplate: MongoTemplate, mongoProperties: MongoProperties): Mongobee {
        log.debug("Configuring Mongobee")
        return Mongobee(mongoClient).apply {
            setDbName(mongoProperties.mongoClientDatabase)
            setMongoTemplate(mongoTemplate)
            // package to scan for migrations
            setChangeLogsScanPackage("<%= packageName %>.config.dbmigrations")
            isEnabled = true
        }
    }
<%_ } %><% if (databaseType === 'couchbase') { _%>

    @Bean(name = [BeanNames.COUCHBASE_CUSTOM_CONVERSIONS])
    fun customConversions() =
        CouchbaseCustomConversions(
            mutableListOf<Converter<*, *>>(
                ZonedDateTimeToLongConverter,
                NumberToLocalDateTimeConverter,
                BigIntegerToStringConverter,
                StringToBigIntegerConverter,
                BigDecimalToStringConverter,
                StringToBigDecimalConverter,
                StringToByteConverter,
                UUIDToStringConverter,
                StringToUUIDConverter
            )
        )

    @Bean
    fun couchmove(couchbaseBucket: Bucket, properties: CouchbaseProperties): Couchmove {
        log.debug("Configuring Couchmove")
        return Couchmove(couchbaseBucket, properties.bucket.name, properties.bucket.password, "config/couchmove/changelog").apply { migrate() }
    }

    /**
     * Simple singleton to convert [ZonedDateTime]s to their [Long] representation.
     */
    @WritingConverter
    object ZonedDateTimeToLongConverter : Converter<ZonedDateTime, Long> {
        override fun convert(source: ZonedDateTime) = Date.from(source.toInstant()).time
    }

    /**
     * Simple singleton to convert from [Number] [BigDecimal] representation.
     */
    @ReadingConverter
    object NumberToLocalDateTimeConverter : Converter<Number, ZonedDateTime> {
        override fun convert(source: Number): ZonedDateTime =
            ZonedDateTime.ofInstant(Date(source.toLong()).toInstant(), ZoneId.systemDefault())
    }

    /**
     * Simple singleton to convert [BigDecimal]s to their [String] representation.
     */
    @WritingConverter
    object BigDecimalToStringConverter : Converter<BigDecimal, String> {
        override fun convert(source: BigDecimal) = source.toString()
    }

    /**
     * Simple singleton to convert from [String] [BigDecimal] representation.
     */
    @ReadingConverter
    object StringToBigDecimalConverter : Converter<String, BigDecimal> {
        override fun convert(source: String) =
            if (StringUtils.hasText(source)) BigDecimal(source) else null
    }

    /**
     * Simple singleton to convert [BigInteger]s to their [String] representation.
     */
    @WritingConverter
    object BigIntegerToStringConverter : Converter<BigInteger, String> {
        override fun convert(source: BigInteger) = source.toString()
    }

    /**
     * Simple singleton to convert from [String] [BigInteger] representation.
     */
    @ReadingConverter
    object StringToBigIntegerConverter : Converter<String, BigInteger> {
        override fun convert(source: String) =
            if (StringUtils.hasText(source)) BigInteger(source) else null
    }

    /**
     * Simple singleton to convert from [String] `byte[]` representation.
     */
    @ReadingConverter
    object StringToByteConverter : Converter<String, ByteArray> {
        override fun convert(source: String): ByteArray = Base64.decodeBase64(source)
    }

    /**
     * Simple singleton to convert [UUID]s to their [String] representation.
     */
    @WritingConverter
    object UUIDToStringConverter : Converter<UUID, String> {
        override fun convert(source: UUID) = source.toString()
    }

    /**
     * Simple singleton to convert from [String] [UUID] representation.
     */
    @ReadingConverter
    object StringToUUIDConverter : Converter<String, UUID> {
        override fun convert(source: String) =
            if (StringUtils.hasText(source)) UUID.fromString(source) else null
    }
<%_ } _%>
<%_ if (databaseType === 'sql' && reactive) { _%>
    // LocalDateTime seems to be the only type that is supported across all drivers atm
    // See https://github.com/r2dbc/r2dbc-h2/pull/139 https://github.com/mirromutth/r2dbc-mysql/issues/105
    @Bean
    fun r2dbcCustomConversions(connectionFactory: ConnectionFactory): R2dbcCustomConversions {
        val dialect = DialectResolver.getDialect(connectionFactory)
        val converters = dialect.converters.toMutableList()
        converters.add(InstantWriteConverter())
        converters.add(InstantReadConverter())
        converters.addAll(R2dbcCustomConversions.STORE_CONVERTERS)
        return R2dbcCustomConversions(CustomConversions.StoreConversions.of(dialect.simpleTypeHolder, converters), mutableListOf<Any>())
    }

    @WritingConverter
    class InstantWriteConverter: Converter<Instant, LocalDateTime> {
        override fun convert(source: Instant) = LocalDateTime.ofInstant(source, ZoneOffset.UTC)
    }

    @ReadingConverter
    class InstantReadConverter: Converter<LocalDateTime, Instant> {
        override fun convert(localDateTime: LocalDateTime) = localDateTime.toInstant(ZoneOffset.UTC)
    }
<%_ } _%>
<%_ if (databaseType === 'mongodb' || databaseType === 'couchbase' || (databaseType === 'sql' && (devDatabaseType === 'h2Disk' || devDatabaseType === 'h2Memory'))) { _%>
}
<%_ } _%>
