<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://jhipster.github.io/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.config

import org.springframework.boot.context.properties.ConfigurationProperties
import org.springframework.stereotype.Component

/**
 * Properties for UAA-based OAuth2 security.
 */
@Component
@ConfigurationProperties(prefix = "uaa", ignoreUnknownFields = false)
class UaaProperties {
    val keyStore = KeyStore()

    val webClientConfiguration = WebClientConfiguration()

    /**
     * Keystore configuration for signing and verifying JWT tokens.
     */
    class KeyStore {
        //name of the keystore in the classpath
        var name = "config/tls/keystore.p12"
        //password used to access the key
        var password = "password"
        //name of the alias to fetch
        var alias = "selfsigned"
    }

    class WebClientConfiguration {
        //validity of the short-lived access token in secs (min: 60), don't make it too long
        var accessTokenValidityInSeconds = 5 * 60
        //validity of the refresh token in secs (defines the duration of "remember me")
        var refreshTokenValidityInSecondsForRememberMe = 7 * 24 * 60 * 60
        var clientId = "web_app"
        var secret = "changeit"
    }
}
