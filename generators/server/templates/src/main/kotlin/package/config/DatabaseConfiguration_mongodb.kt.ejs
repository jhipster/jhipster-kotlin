<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

This file is part of the JHipster project, see https://jhipster.github.io/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License")
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>

package <%= packageName %>.config

import io.github.jhipster.config.JHipsterConstants
import com.github.cloudyrock.mongock.driver.mongodb.springdata.v3.SpringDataMongo3Driver
import com.github.cloudyrock.spring.v5.MongockSpring5
import com.github.cloudyrock.spring.v5.MongockSpring5.MongockInitializingBeanRunner
import io.github.jhipster.domain.util.JSR310DateConverters.DateToZonedDateTimeConverter
import io.github.jhipster.domain.util.JSR310DateConverters.ZonedDateTimeToDateConverter
import org.slf4j.Logger
import org.slf4j.LoggerFactory
import org.springframework.beans.factory.annotation.Value
import org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration
import org.springframework.context.ApplicationContext
<%_ if (reactive) { _%>
import org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration
<%_ } _%>
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.context.annotation.Import
<%_ if (searchEngine === 'elasticsearch') { _%>
import org.springframework.context.annotation.ComponentScan.Filter
import org.springframework.context.annotation.FilterType
<%_ } _%>
import org.springframework.context.annotation.Profile
import org.springframework.core.convert.converter.Converter
<%_ if (searchEngine === 'elasticsearch') { _%>
import org.springframework.data.elasticsearch.repository.config.Enable<% if (reactive) { %>Reactive<% } %>ElasticsearchRepositories
<%_ } _%>
<%_ if (!reactive) { _%>
import org.springframework.data.mongodb.config.EnableMongoAuditing
<%_ } _%>
import org.springframework.data.mongodb.core.MongoTemplate
import org.springframework.data.mongodb.core.convert.MongoCustomConversions
import org.springframework.data.mongodb.core.mapping.event.ValidatingMongoEventListener
<%_ if (searchEngine === 'elasticsearch') { _%>
import org.springframework.data.mongodb.repository.<% if (reactive) { %>Reactive<% } %>MongoRepository
<%_ } _%>
import org.springframework.data.mongodb.repository.config.Enable<% if (reactive) { %>Reactive<% } %>MongoRepositories
import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean
import java.util.ArrayList
import java.util.List

@Configuration
<%_ if (searchEngine === 'elasticsearch') { _%>
@Enable<% if (reactive) { %>Reactive<% } %>ElasticsearchRepositories("<%= packageName %>.repository.search")
<%_ } _%>
<%_ if (searchEngine === 'elasticsearch') { _%>
@Enable<% if (reactive) { %>Reactive<% } %>MongoRepositories(basePackages = "<%= packageName %>.repository", includeFilters = @Filter(type = FilterType.ASSIGNABLE_TYPE, value = <% if (reactive) { %>Reactive<% } %>MongoRepository.class))
<%_ } else { _%>
@Enable<% if (reactive) { %>Reactive<% } %>MongoRepositories("<%= packageName %>.repository")
<%_ } _%>
@Profile("!" + JHipsterConstants.SPRING_PROFILE_CLOUD)
<%_ if (reactive) { _%>
@Import(value = {MongoAutoConfiguration.class, MongoReactiveAutoConfiguration.class})
<%_ } else { _%>
@Import(value = MongoAutoConfiguration.class)
@EnableMongoAuditing(auditorAwareRef = "springSecurityAuditorAware")
<%_ } _%>
public class DatabaseConfiguration {

    private val log = LoggerFactory.getLogger(javaClass)

    @Bean
    fun validatingMongoEventListener() = ValidatingMongoEventListener(validator())

    @Bean
    fun validator() = LocalValidatorFactoryBean()

    @Bean
    fun customConversions() =
        MongoCustomConversions(
            mutableListOf<Converter<*, *>>(
                DateToZonedDateTimeConverter.INSTANCE,
                ZonedDateTimeToDateConverter.INSTANCE
            )
        )

    @Bean
    fun mongockInitializingBeanRunner(
        springContext: ApplicationContext,
        monogTemplate: MongoTemplate, 
        @Value("\${mongock.lockAcquiredForMinutes:5}") lockAcquiredForMinutes: Long,
        @Value("\${mongock.maxWaitingForLockMinutes:3}") maxWaitingForLockMinutes: Long,
        @Value("\${mongock.maxTries:3}") maxTries: Int
    ) : MongockInitializingBeanRunner {
        val driver = SpringDataMongo3Driver.withLockSetting(mongoTemplate, lockAcquiredForMinutes, maxWaitingForLockMinutes, maxTries)
        return  MongockSpring5.builder()
            .setDriver(driver)
            .addChangeLogsScanPackage("<%= packageName %>.config.dbmigrations")
            .setSpringContext(springContext)
            .buildInitializingBeanRunner()
    }
}
