<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

This file is part of the JHipster project, see https://jhipster.github.io/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License")
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.config

import <%= packageName %>.security.AuthoritiesConstants
<%_ if (authenticationType === 'jwt') { _%>
import <%= packageName %>.security.jwt.JWTFilter
import <%= packageName %>.security.jwt.TokenProvider
<%_ } _%>
<%_ if (authenticationType === 'session' || authenticationType === 'oauth2') { _%>
    <%_ if (authenticationType === 'oauth2') { _%>
import <%= packageName %>.security.SecurityUtils
import <%= packageName %>.security.oauth2.AudienceValidator
import <%= packageName %>.security.oauth2.JwtGrantedAuthorityConverter
import org.springframework.security.authentication.AbstractAuthenticationToken
import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter
    <%_ } _%>
import io.github.jhipster.web.filter.reactive.CookieCsrfFilter
<%_ } _%>
<%_ if (authenticationType === 'oauth2') { _%>
import org.springframework.beans.factory.annotation.Value
import io.github.jhipster.config.JHipsterProperties
<%_ } _%>
<%_ if (skipUserManagement && authenticationType !== 'oauth2') { _%>
import org.springframework.boot.autoconfigure.security.SecurityProperties
<%_ } _%>
<%_ if (!skipClient) { _%>
import <%= packageName %>.web.filter.SpaWebFilter
<%_ } _%>
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Import
<%_ if (authenticationType === 'oauth2') { _%>
import org.springframework.core.convert.converter.Converter
<%_ } _%>
import org.springframework.http.HttpMethod
<%_ if (authenticationType === 'session') { _%>
import org.springframework.http.HttpStatus
<%_ } _%>
<%_ if (authenticationType !== 'oauth2') { _%>
import org.springframework.security.authentication.ReactiveAuthenticationManager
import org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager
<%_ } _%>
import org.springframework.security.config.annotation.method.configuration.EnableReactiveMethodSecurity
import org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity
import org.springframework.security.config.web.server.SecurityWebFiltersOrder
import org.springframework.security.config.web.server.ServerHttpSecurity
<%_ if (authenticationType === 'session') { _%>
import org.springframework.security.core.Authentication
import org.springframework.security.core.AuthenticationException
<%_ } _%>
<%_ if (authenticationType === 'oauth2') { _%>
import org.springframework.security.core.GrantedAuthority
import org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService
import org.springframework.security.oauth2.client.oidc.userinfo.OidcUserRequest
import org.springframework.security.oauth2.client.userinfo.ReactiveOAuth2UserService
import org.springframework.security.oauth2.core.DelegatingOAuth2TokenValidator
import org.springframework.security.oauth2.core.OAuth2TokenValidator
import org.springframework.security.oauth2.core.oidc.user.DefaultOidcUser
import org.springframework.security.oauth2.core.oidc.user.OidcUser
import org.springframework.security.oauth2.core.oidc.user.OidcUserAuthority
import org.springframework.security.oauth2.jwt.*
import org.springframework.security.oauth2.server.resource.authentication.ReactiveJwtAuthenticationConverterAdapter
import org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository
import org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter
<%_ } _%>
<%_ if (authenticationType !== 'oauth2') { _%>
    <%_ if (skipUserManagement) { _%>
import org.springframework.security.core.userdetails.MapReactiveUserDetailsService
    <%_ } _%>
import org.springframework.security.core.userdetails.ReactiveUserDetailsService
    <%_ if (authenticationType === 'session' || skipUserManagement) { _%>
import org.springframework.security.core.userdetails.User
    <%_ } _%>
    <%_ if (skipUserManagement) { _%>
import org.springframework.security.core.userdetails.UserDetails
    <%_ } _%>
<%_ } _%>
<%_ if (!skipUserManagement) { _%>
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder
import org.springframework.security.crypto.password.PasswordEncoder
<%_ } _%>
<%_ if (databaseType === 'couchbase') { _%>
import org.springframework.security.data.repository.query.SecurityEvaluationContextExtension
<%_ } _%>
import org.springframework.security.web.server.SecurityWebFilterChain
<%_ if (authenticationType === 'session') { _%>
import org.springframework.security.web.server.WebFilterExchange
import org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint
import org.springframework.security.web.server.authentication.logout.HttpStatusReturningServerLogoutSuccessHandler
import org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository
<%_ } _%>
import org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter
<%_ if (applicationType === 'microservice') { _%>
import org.springframework.security.web.server.savedrequest.NoOpServerRequestCache
<%_ } _%>
import org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher
import org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher
<%_ if (skipUserManagement && authenticationType !== 'oauth2') { _%>
import org.springframework.util.StringUtils
<%_ } _%>
import org.zalando.problem.spring.webflux.advice.security.SecurityProblemSupport
<%_ if (authenticationType === 'session' || authenticationType === 'oauth2') { _%>
import reactor.core.publisher.Mono
<%_ } _%>
<%_ if (authenticationType === 'oauth2') { _%>

import java.util.HashSet
import java.util.Set
<%_ } _%>

import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers

@EnableWebFluxSecurity
@EnableReactiveMethodSecurity
@Import(SecurityProblemSupport::class)
class SecurityConfiguration(
<%_ if (!skipUserManagement && authenticationType !== 'oauth2') { _%>
    private val userDetailsService: ReactiveUserDetailsService,
<%_ } _%>
<%_ if (authenticationType === 'jwt') { _%>
    private val tokenProvider: TokenProvider,
<%_ } _%>
<%_ if (authenticationType === 'oauth2') { _%>
    private val jHipsterProperties: JHipsterProperties,
<%_ } _%>
    private val problemSupport: SecurityProblemSupport
) {

    <%_ if (!skipUserManagement && authenticationType !== 'oauth2') { _%>
    @Bean
    fun passwordEncoder() = BCryptPasswordEncoder()

    @Bean
    fun reactiveAuthenticationManager() =
        UserDetailsRepositoryReactiveAuthenticationManager(userDetailsService).apply {
            setPasswordEncoder(passwordEncoder())
        }

    <%_ } else if (authenticationType !== 'oauth2') { _%>
    @Bean
    fun userDetailsService(properties: SecurityProperties): MapReactiveUserDetailsService {
        val user = properties.user
        val userDetails = User
            .withUsername(user.name)
            .password("{noop}" + user.password)
            .roles(StringUtils.toStringArray(user.roles))
            .build()
        return MapReactiveUserDetailsService(userDetails);
    }

    @Bean
    fun reactiveAuthenticationManager(userDetailsService: ReactiveUserDetailsService): ReactiveAuthenticationManager {
        return UserDetailsRepositoryReactiveAuthenticationManager(userDetailsService);
    }

    <%_ } _%>
    @Bean
    fun springSecurityFilterChain(http: ServerHttpSecurity): SecurityWebFilterChain {
        // @formatter:off
        http
            .securityMatcher(
                NegatedServerWebExchangeMatcher(
                    OrServerWebExchangeMatcher(
                        pathMatchers("/app/**", "/i18n/**", "/content/**", "/swagger-ui/**", "/test/**"<% if (applicationType === 'gateway' || applicationType === 'monolith') { %>, "/webjars/**"<% } %>),
                        pathMatchers(HttpMethod.OPTIONS, "/**")
                    )
                )
            )
            .csrf()
            <%_ if (['session','oauth2'].includes(authenticationType) && applicationType !== 'microservice') { _%>
            .csrfTokenRepository(CookieServerCsrfTokenRepository.withHttpOnlyFalse())
        .and()
            // See https://github.com/spring-projects/spring-security/issues/5766
            .addFilterAt(CookieCsrfFilter(), SecurityWebFiltersOrder.REACTOR_CONTEXT)
            <%_ } else { _%>
            .disable()
            <%_ } _%>
            <%_ if (!skipClient) { _%>
            .addFilterAt(SpaWebFilter(), SecurityWebFiltersOrder.AUTHENTICATION)
            <%_ } _%>
            <%_ if (authenticationType === 'jwt') { _%>
            .addFilterAt(JWTFilter(tokenProvider), SecurityWebFiltersOrder.HTTP_BASIC)
            <%_ } _%>
            <%_ if (!skipUserManagement && authenticationType !== 'oauth2') { _%>
            .authenticationManager(reactiveAuthenticationManager())
            <%_ } _%>
            .exceptionHandling()
            .accessDeniedHandler(problemSupport)
            .authenticationEntryPoint(problemSupport)
            <%_ if (authenticationType === 'session') { _%>
        .and()
            .formLogin()
            .requiresAuthenticationMatcher(pathMatchers(HttpMethod.POST, "/api/authentication"))
            .authenticationEntryPoint(HttpStatusServerEntryPoint(HttpStatus.OK))
            .authenticationSuccessHandler { exchange, authentication -> onAuthenticationSuccess(exchange, authentication) }
            .authenticationFailureHandler { exchange, exception -> onAuthenticationError(exchange, exception) }
        .and()
            .logout()
            .logoutUrl("/api/logout")
            .logoutSuccessHandler(HttpStatusReturningServerLogoutSuccessHandler())
            <%_ } _%>
        .and()
            .headers()
            .contentSecurityPolicy("default-src 'self'; frame-src 'self' data:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://storage.googleapis.com; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self' data:")
        .and()
            .referrerPolicy(ReferrerPolicyServerHttpHeadersWriter.ReferrerPolicy.STRICT_ORIGIN_WHEN_CROSS_ORIGIN)
        .and()
            .featurePolicy("geolocation 'none'; midi 'none'; sync-xhr 'none'; microphone 'none'; camera 'none'; magnetometer 'none'; gyroscope 'none'; speaker 'none'; fullscreen 'self'; payment 'none'")
        .and()
            .frameOptions().disable()
        <%_ if (applicationType === 'microservice') { _%>
        .and()
            .requestCache()
            .requestCache(NoOpServerRequestCache.getInstance())
        <%_ } _%>
        .and()
            .authorizeExchange()
            <%_ if (!skipClient) { _%>
            .pathMatchers("/").permitAll()
            .pathMatchers("/*.*").permitAll()
            <%_ } _%>
            <%_ if (!skipUserManagement) { _%>
            .pathMatchers("/api/register").permitAll()
            .pathMatchers("/api/activate").permitAll()
            .pathMatchers("/api/authenticate").permitAll()
            .pathMatchers("/api/account/reset-password/init").permitAll()
            .pathMatchers("/api/account/reset-password/finish").permitAll()
            <%_ } _%>
            .pathMatchers("/api/auth-info").permitAll()
            .pathMatchers("/api/**").authenticated()
            <%_ if (applicationType === 'monolith' || applicationType === 'gateway') { _%>
            .pathMatchers("/services/**", "/swagger-resources/**", "/v2/api-docs").authenticated()
            <%_ } _%>
            .pathMatchers("/management/health").permitAll()
            .pathMatchers("/management/info").permitAll()
            .pathMatchers("/management/prometheus").permitAll()
            .pathMatchers("/management/**").hasAuthority(ADMIN)
        <%_ if (authenticationType === 'oauth2') { _%>

        http<%_ if (['monolith', 'gateway'].includes(applicationType)) { _%>.oauth2Login()
            <%_ if (withAudit) { _%>
            .authenticationSuccessHandler{ exchange, authentication -> onAuthenticationSuccess(exchange, authentication) }
            <%_ } _%>
        .and()
            <%_ } _%>.oauth2ResourceServer()
            .jwt()
            .jwtAuthenticationConverter(jwtAuthenticationConverter())

        http.oauth2Client()
            <%_ } _%>
        // @formatter:on
        return http.build()
    }
    <%_ if (authenticationType === 'oauth2') { _%>

    fun jwtAuthenticationConverter(): Converter<Jwt, Mono<AbstractAuthenticationToken>>  {
        val jwtAuthenticationConverter = JwtAuthenticationConverter()
        jwtAuthenticationConverter.setJwtGrantedAuthoritiesConverter(JwtGrantedAuthorityConverter())
        return ReactiveJwtAuthenticationConverterAdapter(jwtAuthenticationConverter)
    }

    /**
    * Map authorities from "groups" or "roles" claim in ID Token.
    *
    * @return a {@link ReactiveOAuth2UserService} that has the groups from the IdP.
    */
    @Bean
    fun oidcUserService(): ReactiveOAuth2UserService<OidcUserRequest, OidcUser> {
        val delegate = OidcReactiveOAuth2UserService()

        // Delegate to the default implementation for loading a user
        return ReactiveOAuth2UserService { userRequest ->
            delegate.loadUser(userRequest).map { oidcUser ->
                val mappedAuthorities = hashSetOf<GrantedAuthority>()
                oidcUser.authorities.forEach { grantedAuthority ->
                    if (grantedAuthority is OidcUserAuthority) {
                        extractAuthorityFromClaims(grantedAuthority.userInfo.claims)?.let { userInfoClaim -> mappedAuthorities.addAll(userInfoClaim) }
                    }
                }
                DefaultOidcUser(mappedAuthorities, oidcUser.idToken, oidcUser.userInfo)
            }
        }
    }

    @Bean
    fun jwtDecoder(): ReactiveJwtDecoder {
        val jwtDecoder = ReactiveJwtDecoders.fromOidcIssuerLocation(issuerUri) as NimbusReactiveJwtDecoder

        val audienceValidator = AudienceValidator(jHipsterProperties.security.oauth2.audience)
        val withIssuer = JwtValidators.createDefaultWithIssuer(issuerUri)
        val withAudience = DelegatingOAuth2TokenValidator<Jwt>(withIssuer, audienceValidator)

        jwtDecoder.setJwtValidator(withAudience)

        return jwtDecoder
    }

    <%_ } _%>
    <%_ if (authenticationType === 'session') { _%>

    private fun onAuthenticationError(exchange: WebFilterExchange, e: AuthenticationException): Mono<Void>  {
        exchange.exchange.response.statusCode = HttpStatus.UNAUTHORIZED
        <%_ if (withAudit) { _%>
        return exchange.exchange
                .formData
                .map { it.getFirst("username") }
                .filter { ANONYMOUS_USER != it }
                .flatMap { auditEventService.saveAuthenticationError(it, e) }
                .then()
        <%_ } else { _%>
        return Mono.empty();
        <%_ } _%>
    }

    private fun onAuthenticationSuccess(exchange: WebFilterExchange, authentication: Authentication): Mono<Void> {
        exchange.exchange.response.statusCode = HttpStatus.OK
        <%_ if (withAudit) { _%>
        return Mono.just(authentication.principal)
                .filter { it is User }
                .map { (it as User).username }
                .filter { ANONYMOUS_USER != it }
                .flatMap { auditEventService.saveAuthenticationSuccess(it) }
                .then()
        <%_ } else { _%>
        return Mono.empty();
        <%_ } _%>
    }
    <%_ } _%>
    <%_ if(databaseType === 'couchbase') { _%>

    /**
    * Disables Spring security integration with SpEL expressions since it is not yet compatible with Reactor
    */
    @Bean
    fun securityEvaluationContextExtension(): SecurityEvaluationContextExtension? {
        return object : SecurityEvaluationContextExtension() {
            override fun getRootObject(): Any? {
                return null
            }
        }
    }
    <%_ } _%>
}
