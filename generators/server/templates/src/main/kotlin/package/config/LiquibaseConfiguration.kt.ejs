<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.config

import tech.jhipster.config.JHipsterConstants
<%_ if (!reactive) { _%>
import tech.jhipster.config.liquibase.SpringLiquibaseUtil
<%_ } else { _%>
import tech.jhipster.config.liquibase.AsyncSpringLiquibase
<%_ } _%> 
import liquibase.integration.spring.SpringLiquibase
import org.slf4j.LoggerFactory
import org.springframework.beans.factory.ObjectProvider
import org.springframework.beans.factory.annotation.Qualifier
<%_ if (!reactive) { _%>
import org.springframework.boot.autoconfigure.jdbc.DataSourceProperties
<%_ } _%>
import org.springframework.boot.autoconfigure.liquibase.LiquibaseDataSource
import org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties
<%_ if (reactive) { _%>
import org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties
import org.springframework.boot.jdbc.DataSourceBuilder
<%_ } _%>
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.core.env.Environment
import org.springframework.core.env.Profiles

import javax.sql.DataSource
import java.util.concurrent.Executor
<%_ if (reactive) { _%>
import java.util.function.Supplier
<%_ } _%>

@Configuration
class LiquibaseConfiguration(private val env: Environment) {

    private val log = LoggerFactory.getLogger(javaClass)

    @Bean
    fun liquibase(
        @Qualifier("taskExecutor") executor: Executor,
        <%_ if (!reactive) { _%>
        @LiquibaseDataSource liquibaseDataSource: ObjectProvider<DataSource>,
        <%_ } _%>
        liquibaseProperties: LiquibaseProperties,
        <%_ if (!reactive) { _%>
        dataSource: ObjectProvider<DataSource>,
        <%_ } _%>
        dataSourceProperties:  <% if (!reactive) { %>DataSourceProperties<% } else { %>R2dbcProperties<% } %>
    ) =
        <%_ if (!reactive) { _%>
            // If you don't want Liquibase to start asynchronously, substitute by this:
            // SpringLiquibase liquibase = SpringLiquibaseUtil.createSpringLiquibase(liquibaseDataSource.getIfAvailable(), liquibaseProperties, dataSource.getIfUnique(), dataSourceProperties);
            SpringLiquibaseUtil.createAsyncSpringLiquibase(this.env, executor, liquibaseDataSource.getIfAvailable(), liquibaseProperties, dataSource.getIfUnique(), dataSourceProperties)
            <%_ } else { _%>
            createAsyncSpringLiquibase(this.env, executor, liquibaseProperties, dataSourceProperties)
            <%_ } _%>
            .apply {
            changeLog = "classpath:config/liquibase/master.xml"
            contexts = liquibaseProperties.contexts
            defaultSchema = liquibaseProperties.defaultSchema
            liquibaseSchema = liquibaseProperties.liquibaseSchema
            liquibaseTablespace = liquibaseProperties.liquibaseTablespace
            databaseChangeLogLockTable = liquibaseProperties.databaseChangeLogLockTable
            databaseChangeLogTable = liquibaseProperties.databaseChangeLogTable
            isDropFirst = liquibaseProperties.isDropFirst
            labels = liquibaseProperties.labels
            setChangeLogParameters(liquibaseProperties.parameters)
            setRollbackFile(liquibaseProperties.rollbackFile)
            isTestRollbackOnUpdate = liquibaseProperties.isTestRollbackOnUpdate

            if (env.acceptsProfiles(Profiles.of(JHipsterConstants.SPRING_PROFILE_NO_LIQUIBASE))) {
                setShouldRun(false)
            } else {
                setShouldRun(liquibaseProperties.isEnabled)
                log.debug("Configuring Liquibase")
            }
        }

        <%_ if (reactive) { _%>
        fun createAsyncSpringLiquibase(env: Environment, executor: Executor,
            liquibaseProperties: LiquibaseProperties, dataSourceProperties: R2dbcProperties): SpringLiquibase {
            val liquibase = AsyncSpringLiquibase(executor, env)
            liquibase.setDataSource(createNewDataSource(liquibaseProperties, dataSourceProperties))
            return liquibase
        }

        fun createNewDataSource(liquibaseProperties: LiquibaseProperties, dataSourceProperties: R2dbcProperties): DataSource {
            val user = getProperty(liquibaseProperties.user, dataSourceProperties.getUsername())
            val password = getProperty(liquibaseProperties.password, dataSourceProperties.getPassword())
            return DataSourceBuilder.create()
                .url(liquibaseProperties.url)
                .username(user)
                .password(password)
                .build()
        }

        fun getProperty(property: String?, defaultValue: String) =  property?:defaultValue
        <%_ } _%>
}
