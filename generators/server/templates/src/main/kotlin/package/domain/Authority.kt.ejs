<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.domain

<%_ if (enableHibernateCache) { _%>
import org.hibernate.annotations.Cache
import org.hibernate.annotations.CacheConcurrencyStrategy
<%_ } _%>
<%_ if (databaseType === 'mongodb' || databaseType === 'couchbase') { _%>
import org.springframework.data.annotation.Id
import org.springframework.data.<%= databaseType %>.core.mapping.Document
<%_ } _%>
<%_ if (databaseType === 'neo4j') { _%>
import org.springframework.data.neo4j.core.schema.Id
import org.springframework.data.neo4j.core.schema.Node
<%_ } _%>
<%_ if (databaseType === 'sql') { _%>
    <%_ if (!reactive) { _%>
import javax.persistence.Entity
import javax.persistence.Id
import javax.persistence.Table
import javax.persistence.Column
    <%_ } else { _%>
import org.springframework.data.annotation.Id
import org.springframework.data.domain.Persistable
import org.springframework.data.relational.core.mapping.Table
    <%_ } _%>
<%_ } _%>
import javax.validation.constraints.NotNull
import javax.validation.constraints.Size
import java.io.Serializable

/**
 * An authority (a security role) used by Spring Security.
 */
<%_ if (databaseType === 'sql' && !reactive) { _%>
@Entity
@Table(name = "<%= jhiTablePrefix %>_authority")
    <%_ if (enableHibernateCache) { _%>
        <%_ if (cacheProvider === 'infinispan') { _%>
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
        <%_ } else { _%>
@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
        <%_ } _%>
    <%_ } _%>
<%_ } _%>
<%_ if (databaseType === 'sql' && reactive) { _%>
@Table("<%= jhiTablePrefix %>_authority")
<%_ } _%>
<%_ if (databaseType === 'mongodb') { _%>
@Document(collection = "<%= jhiTablePrefix %>_authority")
<%_ } _%>
<%_ if (databaseType === 'couchbase') { _%>
@Document
<%_ } _%>
<%_ if (databaseType === 'neo4j') { _%>
@Node("<%= jhiTablePrefix %>_authority")
<%_ } _%>
data class Authority(

    @field:NotNull
    @field:Size(max = 50)
    @Id
    <%_ if (databaseType === 'sql' && !reactive) { _%>
    @Column(length = 50)
    <%_ } _%>
    var name: String? = null

) : Serializable<% if (databaseType === 'sql' && reactive) { %>, Persistable<String><% } %> {

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is Authority) return false
        if (other.name == null || name == null) return false

        return name == other.name
    }

    override fun hashCode() = 31

    <%_ if (databaseType === 'sql' && reactive) { _%>
    override fun getId() = name
    
    override fun isNew() = true
    <%_ } _%>

    companion object {
        private const val serialVersionUID = 1L
    }
}
