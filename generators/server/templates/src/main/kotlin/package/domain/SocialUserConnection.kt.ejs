<%#
 Copyright 2013-2018 the original author or authors from the JHipster project.
 This file is part of the JHipster project, see http://www.jhipster.tech/
 for more information.
 Licensed under the Apache License, Version 2.0 (the "License")
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.domain

<%_ if (databaseType === 'mongodb') { _%>
import org.springframework.data.annotation.Id
import org.springframework.data.mongodb.core.index.CompoundIndex
import org.springframework.data.mongodb.core.index.CompoundIndexes
import org.springframework.data.mongodb.core.mapping.Document
import org.springframework.data.mongodb.core.mapping.Field
<%_ } _%>
<%_ if (databaseType === 'couchbase') { _%>
import org.springframework.data.annotation.Id
import com.couchbase.client.java.repository.annotation.Field
import org.springframework.data.couchbase.core.mapping.Document
import org.springframework.data.couchbase.core.mapping.id.GeneratedValue
import org.springframework.data.couchbase.core.mapping.id.IdPrefix
<%_ } _%>
<%_ if (enableHibernateCache) { _%>
import org.hibernate.annotations.Cache
import org.hibernate.annotations.CacheConcurrencyStrategy
<%_ } _%>
<%_ if (databaseType === 'sql') { _%>
import javax.persistence.*
<%_ } _%>
import javax.validation.constraints.NotNull
<%_ if (databaseType === 'mongodb' || databaseType === 'couchbase') { _%>
import javax.validation.constraints.Size
<%_ } _%>
import java.io.Serializable
import java.util.Objects
<% if (databaseType === 'couchbase') { %>
import static <%=packageName%>.config.Constants.ID_DELIMITER
import static org.springframework.data.couchbase.core.mapping.id.GenerationStrategy.UNIQUE
<% } %>
/**
 * A Social user.
 */
<%_ if (databaseType === 'sql') { _%>
@Entity
@Table(name = "<%= jhiTablePrefix %>_social_user_connection")
    <%_ if (enableHibernateCache) { if (cacheProvider === 'infinispan') { _%>
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
    <%_ } else { _%>
@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
    <%_ } } _%>
<%_ } _%>
<%_ if (databaseType === 'mongodb') { _%>
@Document(collection = "<%= jhiTablePrefix %>_social_user_connection")
@CompoundIndexes(
    @CompoundIndex(name = "user2-prov-provusr-idx", unique = true, def = "{'user_id': 1, 'provider_id': 1, 'provider_user_id': 1}")
)<% } %><% if (databaseType === 'couchbase') { %>
@Document<% } %>
class SocialUserConnection: Serializable {

<% if (databaseType === 'couchbase') { %>
    val PREFIX = "social"
    @SuppressWarnings("unused")
    @IdPrefix
    var prefix: String? = PREFIX
<%_ } _%>
<% if (databaseType === 'sql') { %>
    @Id
    <%_ if (prodDatabaseType === 'mysql' || prodDatabaseType === 'mariadb') { _%>
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    <%_ }  else { _%>
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "sequenceGenerator")
    @SequenceGenerator(name = "sequenceGenerator")
    <%_ } _%>
    var id: Long? = null<% } %><% if (databaseType === 'mongodb' || databaseType === 'couchbase') { %>
    @Id<% if (databaseType === 'couchbase') { %>
    @GeneratedValue(strategy = UNIQUE, delimiter = ID_DELIMITER)<% } %>
    var id: String? = null<% } %>

    @NotNull<% if (databaseType === 'sql') { %>
    @Column(name = "user_id", length = 255, nullable = false)<% } %><% if (databaseType === 'mongodb' || databaseType === 'couchbase') { %>
    @Size(max = 255)
    @Field("user_id")<% } %>
    var userId: String? = null

    @NotNull<% if (databaseType === 'sql') { %>
    @Column(name = "provider_id", length = 255, nullable = false)<% } %><% if (databaseType === 'mongodb' || databaseType === 'couchbase') { %>
    @Size(max = 255)
    @Field("provider_id")<% } %>
    var providerId: String? = null

    @NotNull<% if (databaseType === 'sql') { %>
    @Column(name = "provider_user_id", length = 255, nullable = false)<% } %><% if (databaseType === 'mongodb' || databaseType === 'couchbase') { %>
    @Size(max = 255)
    @Field("provider_user_id")<% } %>
    var providerUserId: String? = null

    @NotNull<% if (databaseType === 'sql') { %>
    @Column(nullable = false)<% } %>
    var rank: Long? = null
<% if (databaseType === 'sql') { %>
    @Column(name = "display_name", length = 255)<% } %><% if (databaseType === 'mongodb' || databaseType === 'couchbase') { %>
    @Size(max = 255)
    @Field("display_name")<% } %>
    var displayName: String? = null
<% if (databaseType === 'sql') { %>
    @Column(name = "profile_url", length = 255)<% } %><% if (databaseType === 'mongodb' || databaseType === 'couchbase') { %>
    @Size(max = 255)
    @Field("profile_url")<% } %>
    var profileURL: String? = null
<% if (databaseType === 'sql') { %>
    @Column(name = "image_url", length = 255)<% } %><% if (databaseType === 'mongodb' || databaseType === 'couchbase') { %>
    @Size(max = 255)
    @Field("image_url")<% } %>
    var imageURL: String? = null

    @NotNull<% if (databaseType === 'sql') { %>
    @Column(name = "access_token", length = 255, nullable = false)<% } %><% if (databaseType === 'mongodb' || databaseType === 'couchbase') { %>
    @Size(max = 255)
    @Field("access_token")<% } %>
    var accessToken: String? = null
<% if (databaseType === 'sql') { %>
    @Column(length = 255)<% } %><% if (databaseType === 'mongodb' || databaseType === 'couchbase') { %>
    @Size(max = 255)<% } %>
    var secret: String? = null
<% if (databaseType === 'sql') { %>
    @Column(name = "refresh_token", length = 255)<% } %><% if (databaseType === 'mongodb' || databaseType === 'couchbase') { %>
    @Size(max = 255)
    @Field("refresh_token")<% } %>
    var refreshToken: String? = null
<% if (databaseType === 'sql') { %>
    @Column(name = "expire_time")<% } %><% if (databaseType === 'mongodb' || databaseType === 'couchbase') { %>
    @Field("expire_time")<% } %>
    var expireTime: Long? = null

    constructor() {}
    constructor(userId: String,
                                providerId: String,
                                providerUserId: String,
                                rank: Long,
                                displayName: String,
                                profileURL: String,
                                imageURL: String,
                                accessToken: String,
                                secret: String,
                                refreshToken: String,
                                expireTime: Long): this() {
        this.userId = userId
        this.providerId = providerId
        this.providerUserId = providerUserId
        this.rank = rank
        this.displayName = displayName
        this.profileURL = profileURL
        this.imageURL = imageURL
        this.accessToken = accessToken
        this.secret = secret
        this.refreshToken = refreshToken
        this.expireTime = expireTime
    }

    override fun equals(o: Any?): Boolean{
        if (this == o) {
            return true
        }
        if (o == null || javaClass != o.javaClass) {
            return false
        }

        val user = o as SocialUserConnection

        if (!id!!.equals(user.id)) {
            return false
        }

        return true
    }

    override fun hashCode(): Int {
        return id!!.hashCode()
    }

    override fun toString(): String {
        return "SocialUserConnection{" +
            "id=" + id +
            ", userId=" + userId +
            ", providerId='" + providerId + '\'' +
            ", providerUserId='" + providerUserId + '\'' +
            ", rank=" + rank +
            ", displayName='" + displayName + '\'' +
            ", profileURL='" + profileURL + '\'' +
            ", imageURL='" + imageURL + '\'' +
            ", accessToken='" + accessToken + '\'' +
            ", secret='" + secret + '\'' +
            ", refreshToken='" + refreshToken + '\'' +
            ", expireTime=" + expireTime +
            '}'
    }

    companion object {

        private const val serialVersionUID = 1L
    }
}
