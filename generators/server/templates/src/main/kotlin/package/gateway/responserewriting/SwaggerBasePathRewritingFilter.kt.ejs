<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.gateway.responserewriting

import com.fasterxml.jackson.databind.ObjectMapper
import com.netflix.zuul.context.RequestContext
import org.apache.commons.io.IOUtils
import org.slf4j.LoggerFactory
import org.springframework.cloud.netflix.zuul.filters.ZuulProperties
import org.springframework.cloud.netflix.zuul.filters.post.SendResponseFilter

import java.io.ByteArrayInputStream
import java.io.ByteArrayOutputStream
import java.io.IOException
import java.io.PrintWriter
import java.nio.charset.StandardCharsets
import java.util.LinkedHashMap
import java.util.zip.GZIPInputStream
import java.util.zip.GZIPOutputStream

/**
 * Zuul filter to rewrite micro-services OpenAPI URL Base Path.
 */
class SwaggerBasePathRewritingFilter : SendResponseFilter(ZuulProperties()) {

    private val log = LoggerFactory.getLogger(javaClass)

    private val mapper = ObjectMapper()

    override fun filterType() = "post"

    override fun filterOrder() = 100

    /**
     * Filter requests to micro-services OpenAPI docs.
     */
    override fun shouldFilter() =
        RequestContext.getCurrentContext().request.requestURI.endsWith("/v3/api-docs")

    override fun run(): Any? {
        val context = RequestContext.getCurrentContext()

        context.response.characterEncoding = "UTF-8"

        val rewrittenResponse = rewriteBasePath(context)
        if (context.responseGZipped) {
            try {
                context.responseDataStream = ByteArrayInputStream(gzipData(rewrittenResponse))
            } catch (e: IOException) {
                log.error("OpenAPI-docs filter error $e")
            }
        } else {
            context.responseBody = rewrittenResponse
        }
        return null
    }

    private fun rewriteBasePath(context: RequestContext): String? {
        var responseDataStream = context.responseDataStream
        val requestUri = RequestContext.getCurrentContext().request.requestURI
        try {
            if (context.responseGZipped) {
                responseDataStream = GZIPInputStream(context.responseDataStream)
            }
            val response = IOUtils.toString(responseDataStream, StandardCharsets.UTF_8)
            if (response != null) {
                @Suppress("UNCHECKED_CAST")
                val map = this.mapper.readValue(response, LinkedHashMap::class.java) as LinkedHashMap<String, Any>

                val basePath = requestUri.replace("/v3/api-docs", "")
                map["basePath"] = basePath
                log.debug("OpenAPI-docs: rewritten Base URL with correct micro-service route: $basePath")
                return mapper.writeValueAsString(map)
            }
        } catch (e: IOException) {
            log.error("OpenAPI-docs filter error $e")
        }

        return null
    }

}

@Throws(IOException::class)
fun gzipData(content: String?): ByteArray {
    val bos = ByteArrayOutputStream()
    val gzip = PrintWriter(GZIPOutputStream(bos))
    gzip.print(content)
    gzip.flush()
    gzip.close()
    return bos.toByteArray()
}
