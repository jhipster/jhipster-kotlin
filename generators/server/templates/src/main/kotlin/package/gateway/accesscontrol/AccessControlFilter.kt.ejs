<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.gateway.accesscontrol

import tech.jhipster.config.JHipsterProperties

import org.slf4j.LoggerFactory
import org.springframework.cloud.netflix.zuul.filters.RouteLocator
import org.springframework.http.HttpStatus

import com.netflix.zuul.ZuulFilter
import com.netflix.zuul.context.RequestContext

/**
 * Zuul filter for restricting access to backend micro-services endpoints.
 */
class AccessControlFilter(
    private val routeLocator: RouteLocator,
    private val jHipsterProperties: JHipsterProperties
) : ZuulFilter() {

    private val log = LoggerFactory.getLogger(javaClass)

    override fun filterType() = "pre"

    override fun filterOrder() = 0

    /**
     * Filter requests on endpoints that are not in the list of authorized microservices endpoints.
     */
    override fun shouldFilter(): Boolean {
        val requestUri = RequestContext.getCurrentContext().request.requestURI
        val contextPath = RequestContext.getCurrentContext().request.contextPath

        // If the request Uri does not start with the path of the authorized endpoints, we block the request
        for (route in routeLocator.routes) {
            val serviceUrl = contextPath + route.fullPath
            val serviceName = route.id

            // If this route correspond to the current request URI
            // We do a substring to remove the "**" at the end of the route URL
            if (requestUri.startsWith(serviceUrl.substring(0, serviceUrl.length - 2))) {
                return !isAuthorizedRequest(serviceUrl, serviceName, requestUri)
            }
        }
        return true
    }

    private fun isAuthorizedRequest(serviceUrl: String, serviceName: String, requestUri: String): Boolean {
        val authorizedMicroservicesEndpoints = jHipsterProperties.gateway.authorizedMicroservicesEndpoints

        // If the authorized endpoints list was left empty for this route, all access are allowed
        if (authorizedMicroservicesEndpoints[serviceName] == null) {
            log.debug(
                "Access Control: allowing access for $requestUri, as no access control policy has been set up for service: $serviceName"
            )
            return true
        } else {
            val authorizedEndpoints = authorizedMicroservicesEndpoints[serviceName]

            if (authorizedEndpoints != null) {
                // Go over the authorized endpoints to control that the request URI matches it
                for (endpoint in authorizedEndpoints) {
                    // We do a substring to remove the "**/" at the end of the route URL
                    val gatewayEndpoint = serviceUrl.substring(0, serviceUrl.length - 3) + endpoint
                    if (requestUri.startsWith(gatewayEndpoint)) {
                        log.debug(
                            "Access Control: allowing access for $requestUri, as it matches the following authorized microservice endpoint: $gatewayEndpoint"
                        )
                        return true
                    }
                }
            }
        }
        return false
    }

    override fun run(): Any? {
        RequestContext.getCurrentContext().apply {
            responseStatusCode = HttpStatus.FORBIDDEN.value()
            setSendZuulResponse(false)
            log.debug("Access Control: filtered unauthorized access on endpoint ${request.requestURI}")
        }
        return null
    }
}
