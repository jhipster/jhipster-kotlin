<%#
Copyright 2013-2020 the original author or authors from the JHipster project.

This file is part of the JHipster project, see https://www.jhipster.tech/
for more information.

Licensed under the Apache License, Version 2.0 (the "
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-%>
package <%= packageName %>.web.rest

import <%= packageName %>.security.getCurrentUserLogin
<%_ if (authenticationTypeOauth2) { _%>
import <%= packageName %>.service.UserService
import <%= packageName %>.service.dto.<%= asDto('AdminUser') %>
import kotlinx.coroutines.reactor.*

import org.slf4j.LoggerFactory
import org.springframework.security.authentication.AbstractAuthenticationToken
import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RestController
import org.springframework.web.server.ServerWebExchange
import reactor.core.publisher.Mono
import java.security.Principal

/**
 * REST controller for managing the current user's account.
 */
@RestController
@RequestMapping("/api")
class AccountResource(private val userService: UserService) {

    internal class AccountResourceException(message: String) : RuntimeException(message)

    private val log = LoggerFactory.getLogger(javaClass)

    /**
     * `GET  /account` : get the current user.
     *
     * @param principal the current user; resolves to `null` if not authenticated.
     * @return the current user.
     * @throws AccountResourceException `500 (Internal Server Error)` if the user couldn't be returned.
     */
    @GetMapping("/account")
    suspend fun getAccount(principal: Principal?): <%= asDto('AdminUser') %> =
        if (principal is AbstractAuthenticationToken) {
            userService.getUserFromAuthentication(principal)
        } else {
            throw AccountResourceException("User could not be found")
        }

    /**
    * {@code GET  /authenticate} : check if the user is authenticated, and return its login.
    *
    * @param request the HTTP request.
    * @return the login if the user is authenticated.
    */
    @GetMapping("/authenticate")
    suspend fun isAuthenticated(request: ServerWebExchange): String? {
        log.debug("REST request to check if the current user is authenticated")
        return request.getPrincipal<Principal>().map(Principal::getName).awaitSingleOrNull()
    }

    companion object {
        private const val serialVersionUID = 1L
    }
}
<%_ } else if (skipUserManagement) { _%>
import com.fasterxml.jackson.annotation.JsonCreator
import org.slf4j.Logger
import org.slf4j.LoggerFactory
import org.springframework.security.core.GrantedAuthority
import org.springframework.security.core.context.ReactiveSecurityContextHolder
import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RestController
import org.springframework.web.server.ServerWebExchange
import kotlinx.coroutines.reactor.*
import java.security.Principal

@RestController
@RequestMapping("/api")
class AccountResource {

    private val log = LoggerFactory.getLogger(javaClass)

    internal class AccountResourceException : RuntimeException()

    /**
     * {@code GET  /account} : get the current user.
     *
     * @return the current user.
     * @throws AccountResourceException {@code 500 (Internal Server Error)} if the user couldn't be returned.
     */
    @GetMapping("/account")
    suspend fun getAccount(): UserVM {
        val login = getCurrentUserLogin().awaitSingleOrNull() ?: throw AccountResourceException()
        val authorities = ReactiveSecurityContextHolder.getContext()
                .awaitSingle().authentication.authorities
                .mapNotNullTo(mutableSetOf()) { it.authority }
        return UserVM(login, authorities)
    }

    /**
     * {@code GET  /authenticate} : check if the user is authenticated, and return its login.
     *
     * @param request the HTTP request.
     * @return the login if the user is authenticated.
     */
    @GetMapping("/authenticate")
    suspend fun isAuthenticated(request: ServerWebExchange): String? {
        log.debug("REST request to check if the current user is authenticated")
        return request.getPrincipal<Principal>().map(Principal::getName).awaitSingleOrNull()
    }

    data class UserVM @JsonCreator constructor(val login: String, val authorities: Set<String>) {

        fun isActivated() = true
    }
}
<%_ } else { _%>
import <%= packageName %>.repository.UserRepository
import <%= packageName %>.service.MailService
import <%= packageName %>.service.UserService
import <%= packageName %>.service.dto.PasswordChangeDTO
import <%= packageName %>.service.dto.<%= asDto('AdminUser') %>
import <%= packageName %>.web.rest.errors.EmailAlreadyUsedException
import <%= packageName %>.web.rest.errors.InvalidPasswordException
import <%= packageName %>.web.rest.errors.LoginAlreadyUsedException
import <%= packageName %>.web.rest.vm.KeyAndPasswordVM
import <%= packageName %>.web.rest.vm.ManagedUserVM
import kotlinx.coroutines.reactor.*

import org.apache.commons.lang3.StringUtils
import org.slf4j.LoggerFactory
import org.springframework.http.HttpStatus
import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.PostMapping
import org.springframework.web.bind.annotation.RequestBody
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RequestParam
import org.springframework.web.bind.annotation.ResponseStatus
import org.springframework.web.bind.annotation.RestController
import org.springframework.web.server.ServerWebExchange
import reactor.core.publisher.Mono

import javax.validation.Valid
import java.security.Principal

/**
 * REST controller for managing the current user's account.
 */
@RestController
@RequestMapping("/api")
class AccountResource(
    private val userRepository: UserRepository,
    private val userService: UserService,
    private val mailService: MailService<% if (authenticationTypeSession && !reactive) { %>,
    private val persistentTokenRepository: PersistentTokenRepository<%_ } %>
) {

    internal class AccountResourceException(message: String) : RuntimeException(message)

    private val log = LoggerFactory.getLogger(javaClass)

    /**
     * `POST  /register` : register the user.
     *
     * @param managedUserVM the managed user View Model.
     * @throws InvalidPasswordException `400 (Bad Request)` if the password is incorrect.
     * @throws EmailAlreadyUsedException `400 (Bad Request)` if the email is already used.
     * @throws LoginAlreadyUsedException `400 (Bad Request)` if the login is already used.
     */
    @PostMapping("/register")
    @ResponseStatus(HttpStatus.CREATED)
    suspend fun registerAccount(@Valid @RequestBody managedUserVM: ManagedUserVM){
        if (isPasswordLengthInvalid(managedUserVM.password)) {
            throw InvalidPasswordException()
        }
        val user = userService.registerUser(managedUserVM, managedUserVM.password!!)!!
        mailService.sendActivationEmail(user)
    }

    /**
     * `GET  /activate` : activate the registered user.
     *
     * @param key the activation key.
     * @throws RuntimeException `500 (Internal Server Error)` if the user couldn't be activated.
     */
    @GetMapping("/activate")
    suspend fun activateAccount(@RequestParam(value = "key") key: String){
        userService.activateRegistration(key)
                    ?: throw AccountResourceException("No user was found for this activation key")
    }

    /**
     * `GET  /authenticate` : check if the user is authenticated, and return its login.
     *
     * @param request the HTTP request.
     * @return the login if the user is authenticated.
     */
    @GetMapping("/authenticate")
    suspend fun isAuthenticated(request: ServerWebExchange): String? {
        log.debug("REST request to check if the current user is authenticated")
        return request.getPrincipal<Principal>().map(Principal::getName).awaitSingleOrNull()
    }

    /**
     * `GET  /account` : get the current user.
     *
     * @return the current user.
     * @throws RuntimeException `500 (Internal Server Error)` if the user couldn't be returned.
     */
    @GetMapping("/account")
    suspend fun getAccount(): <%= asDto('AdminUser') %>? =
        userService.getUserWithAuthorities()
            ?.let { AdminUserDTO(it) }
            ?: throw AccountResourceException("User could not be found")

    /**
     * POST  /account : update the current user information.
     *
     * @param userDTO the current user information
     * @throws EmailAlreadyUsedException `400 (Bad Request)` if the email is already used.
     * @throws RuntimeException `500 (Internal Server Error)` if the user login wasn't found.
     */
    @PostMapping("/account")
    suspend fun saveAccount(@Valid @RequestBody userDTO: <%= asDto('AdminUser') %>) {
        val userLogin = getCurrentUserLogin().awaitSingleOrNull() ?: throw AccountResourceException("")
        val existingUser = userRepository.findOneByEmailIgnoreCase(userDTO.email!!)!!
        if (!existingUser.login.equals(userLogin, ignoreCase = true)) {
            throw EmailAlreadyUsedException()
        }
        userRepository.findOneByLogin(userLogin) ?: throw AccountResourceException("User could not be found")
        userService.updateUser(
            userDTO.firstName, userDTO.lastName, userDTO.email,
            userDTO.langKey<% if (['sql', 'mongodb', 'couchbase', 'neo4j'].includes(databaseType)) { %>, userDTO.imageUrl<% } %>
        )
    }


    /**
     * POST  /account/change-password : changes the current user's password.
     *
     * @param passwordChangeDto current and new password.
     * @throws InvalidPasswordException `400 (Bad Request)` if the new password is incorrect.
     */
    @PostMapping(path = ["/account/change-password"])
    suspend fun changePassword(@RequestBody passwordChangeDto: PasswordChangeDTO){
        if (isPasswordLengthInvalid(passwordChangeDto.newPassword)) {
            throw InvalidPasswordException()
        }
        userService.changePassword(passwordChangeDto.currentPassword!!, passwordChangeDto.newPassword!!)
    }

    /**
     * POST   /account/reset-password/init : Send an email to reset the password of the user
     *
     * @param mail the mail of the user
     */
    @PostMapping(path = ["/account/reset-password/init"])
    suspend fun requestPasswordReset(@RequestBody mail: String) {
        userService.requestPasswordReset(mail)
            ?.apply { mailService.sendPasswordResetMail(this) }
            // Pretend the request has been successful to prevent checking which emails really exist
            // but log that an invalid attempt has been made
            ?: log.warn("Password reset requested for non existing mail")
    }

    /**
     * `POST   /account/reset-password/finish` : Finish to reset the password of the user.
     *
     * @param keyAndPassword the generated key and the new password.
     * @throws InvalidPasswordException `400 (Bad Request)` if the password is incorrect.
     * @throws RuntimeException `500 (Internal Server Error)` if the password could not be reset.
     */
    @PostMapping(path = ["/account/reset-password/finish"])
    suspend fun finishPasswordReset(@RequestBody keyAndPassword: KeyAndPasswordVM){
        if (isPasswordLengthInvalid(keyAndPassword.newPassword)) {
            throw InvalidPasswordException()
        }

        userService.completePasswordReset(keyAndPassword.newPassword!!, keyAndPassword.key!!)
            ?: throw AccountResourceException("No user was found for this reset key")
    }
}

private fun isPasswordLengthInvalid(password: String?) = password.isNullOrEmpty() || password.length < ManagedUserVM.PASSWORD_MIN_LENGTH || password.length > ManagedUserVM.PASSWORD_MAX_LENGTH
<%_ } _%>
