<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.repository

<%_ if (databaseTypeSql) { _%>
import <%= packageName %>.domain.Authority
<%_ } _%>
import <%= packageName %>.domain.<%= asEntity('User') %>

<%_ if (databaseTypeCassandra) { _%>
import com.datastax.oss.driver.api.core.CqlIdentifier
import com.datastax.oss.driver.api.core.cql.BatchStatement
import com.datastax.oss.driver.api.core.cql.BatchStatementBuilder
import com.datastax.oss.driver.api.core.cql.BoundStatement
import com.datastax.oss.driver.api.core.cql.DefaultBatchType
import com.datastax.oss.driver.api.core.cql.PreparedStatement
import com.datastax.oss.driver.api.core.cql.SimpleStatement
import com.datastax.oss.driver.api.querybuilder.QueryBuilder
import com.datastax.oss.driver.api.querybuilder.insert.RegularInsert
<%_ } _%>
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.reactive.asFlow
import kotlinx.coroutines.reactor.*
<%_ if (databaseTypeSql) { _%>
import org.apache.commons.beanutils.BeanComparator
<%_ } _%>
<%_ if (cacheManagerIsAvailable) { _%>
import org.springframework.cache.annotation.Cacheable
<%_ } _%>
<%_ if (databaseTypeSql || databaseTypeCouchbase || databaseTypeMongodb || databaseTypeNeo4j) { _%>
import org.springframework.data.domain.*
<%_ } _%>
<%_ if (databaseTypeSql) { _%>
import org.springframework.data.domain.Sort
import org.springframework.r2dbc.core.DatabaseClient
import org.springframework.data.r2dbc.convert.R2dbcConverter
import org.springframework.data.r2dbc.core.R2dbcEntityTemplate
import org.springframework.data.r2dbc.repository.Query
import org.springframework.data.relational.core.query.Criteria.where
import org.springframework.data.relational.core.query.Query.query
<%_ } _%>
import org.springframework.data.repository.kotlin.CoroutineSortingRepository
import reactor.core.publisher.Mono
<%_ if (databaseTypeCouchbase) { _%>
import org.springframework.data.couchbase.repository.Query
<%_ } _%>
<%_ if (databaseTypeCassandra) { _%>
import org.springframework.data.cassandra.ReactiveResultSet
import org.springframework.data.cassandra.ReactiveSession
import org.springframework.data.cassandra.core.ReactiveCassandraTemplate
import org.springframework.data.cassandra.core.convert.CassandraConverter
import org.springframework.data.cassandra.core.mapping.CassandraPersistentEntity
<%_ } _%>
<%_ if (databaseTypeCassandra) { _%>
import org.springframework.util.StringUtils
<%_ } _%>
import reactor.core.publisher.Flux
import reactor.core.publisher.Mono
<%_ if (databaseTypeSql) { _%>
import reactor.util.function.Tuple2
import reactor.util.function.Tuples
<%_ } _%>

<%_ if (databaseTypeCassandra) { _%>
import javax.validation.ConstraintViolation
import javax.validation.ConstraintViolationException
import javax.validation.Validator
<%_ } _%>
<%_ if (databaseTypeSql) { _%>
    <%_ if (!authenticationTypeOauth2) { _%>
import java.time.LocalDateTime
    <%_ } _%>
import java.util.Optional
import java.util.stream.Collectors
<%_ } _%>
<%_ if (user.primaryKey.hasUUID) { _%>
import java.util.UUID
<%_ } _%>
<%_ if (!databaseTypeCassandra && !databaseTypeSql && !authenticationTypeOauth2) { _%>
import java.time.Instant
<%_ } _%>

/**
 * Spring Data <% if (databaseTypeSql) { %>R2DBC<% } else if (databaseTypeMongodb) { %>MongoDB<% } else if (databaseTypeCouchbase) { %>Couchbase<% } else if (databaseTypeCassandra) { %>Cassandra<% } else if (databaseTypeNeo4j) { %>Neo4j<% } %> repository for the {@link <%= asEntity('User') %>} entity.
 */
<%_
    let optionalOrMono = reactive ? 'Mono' : 'Optional';
    let listOrFlux = reactive ? 'Flux' : 'List';
    let pageOrFlux = (reactive) ? 'Flux' : 'Page';
    let toListSuffix = reactive ? '' : '.toMutableList()';
_%>
<%_ if (databaseTypeMongodb || databaseTypeNeo4j || databaseTypeCouchbase) { _%>
interface UserRepository: <% if (databaseTypeCouchbase) { %>JHipsterCouchbaseRepository<<%= asEntity('User') %>, String><%if (searchEngineCouchbase) { %>, CouchbaseSearchRepository<<%= asEntity('User') %>, String><% } } else { %> CoroutineSortingRepository<<%= asEntity('User') %>, String> <% } %> {

    <%_ if (!authenticationTypeOauth2) { _%>
    <%_ if (databaseTypeCouchbase) { _%>
    @JvmDefault
    <%_ } _%>
    suspend fun findOneByActivationKey(activationKey: String): <%= asEntity('User') %>?<% if (databaseTypeCouchbase) { %> {
        return findIdByActivationKey(activationKey)?.id?.let { findById(it) }
    }
    @Query(FIND_IDS_QUERY + " AND activationKey = $1")
    suspend fun findIdByActivationKey(activationKey: String): <%= asEntity('User') %>?
    <% } %>
    <%_ } _%>
    <%_ if (!authenticationTypeOauth2) { _%>

        <%_ if (databaseTypeCouchbase) { _%>
    @JvmDefault
        <%_ } _%>
    fun findAllByActivatedIsFalseAndActivationKeyIsNotNullAndCreatedDateBefore(dateTime: Instant): Flow<<%= asEntity('User') %>><% if (databaseTypeCouchbase) { %> {
        return findAllById(toIds(findAllIdsByActivatedIsFalseAndActivationKeyIsNotNullAndCreatedDateBefore(dateTime)<%= toListSuffix %>))
    }

    @Query(FIND_IDS_QUERY + " AND activated = false AND activationKey IS NOT NULL AND createdDate < $1")
    fun findAllIdsByActivatedIsFalseAndActivationKeyIsNotNullAndCreatedDateBefore(dateTime: Instant): Flow<<%= asEntity('User') %>>
    <% } %>
    <%_ } _%>

    <%_ if (!authenticationTypeOauth2) { _%>
        <%_ if (databaseTypeCouchbase) { _%>
    @JvmDefault
        <%_ } _%>
    suspend fun findOneByResetKey(resetKey: String): <%= asEntity('User') %>?<% if (databaseTypeCouchbase) { %> {
        return findIdByResetKey(resetKey)?.id?.let { findById(it) }
    }

    @Query(FIND_IDS_QUERY + " AND resetKey = $1")
    suspend fun findIdByResetKey(resetKey: String): <%= asEntity('User') %>?
    <% } %>
    <%_ } _%>

    <%_ if (!authenticationTypeOauth2) { _%>
        <%_ if (databaseTypeCouchbase || databaseTypeMongodb || databaseTypeNeo4j) { _%>
            <%_ if (cacheManagerIsAvailable) { _%>
    @Cacheable(cacheNames = [USERS_BY_EMAIL_CACHE])
            <%_ } _%>
        <%_ } _%>
        <%_ if (databaseTypeCouchbase) { _%>
    @JvmDefault
        <%_ } _%>
    suspend fun findOneByEmailIgnoreCase(email: String?): <%= asEntity('User') %>?<% if (databaseTypeCouchbase) { %> {
        return findIdByEmailIgnoreCase(email!!)?.id?.let { findById(it) }
    }

    @Query(FIND_IDS_QUERY + " AND LOWER(email) = LOWER($1)")
    suspend fun findIdByEmailIgnoreCase(email: String): <%= asEntity('User') %>?
    <% } %>
    <%_ } _%>

    // for DomainUserDetailService
    fun getOneByEmailIgnoreCase(email: String): Mono<User>

    fun getOneByLogin(email: String): Mono<User>

    <%_ if (databaseTypeCouchbase) { _%>
        <%_ if (cacheManagerIsAvailable) { _%>
    @Cacheable(cacheNames = [USERS_BY_LOGIN_CACHE])
        <%_ } _%>
    @JvmDefault
    suspend fun findOneByLogin(login: String): <%= asEntity('User') %>? {
        return findById(login)
    }
    <%_ } else if (databaseTypeMongodb || databaseTypeNeo4j) { _%>
        <%_ if (cacheManagerIsAvailable) { _%>
    @Cacheable(cacheNames = [USERS_BY_LOGIN_CACHE])
        <%_ } _%>
    suspend fun findOneByLogin(login: String): <%= asEntity('User') %>?
    <%_ } else { _%>
    suspend fun findOneByLogin(login: String): <%= asEntity('User') %>?
    <%_ } _%>

        <%_ if (!databaseTypeCouchbase) { _%>
    fun findAllByIdNotNull(pageable: Pageable): Flow<<%= asEntity('User') %>>
        <%_ } _%>

        <%_ if (databaseTypeCouchbase) { _%>
    @JvmDefault
    fun findAllByActivatedIsTrue(pageable: Pageable): Flow<<%= asEntity('User') %>>{
        return findAllById(toIds(findAllIdsByActivatedIsTrue(pageable)))
    }

    @Query(FIND_IDS_QUERY + " AND activated = true")
    fun findAllIdsByActivatedIsTrue(pageable: Pageable): Flow<<%= asEntity('User') %>>
        <%_ } else { _%>
    fun findAllByIdNotNullAndActivatedIsTrue(pageable: Pageable): Flow<<%= asEntity('User') %>>
        <%_ } _%>

    <%_ if (cacheManagerIsAvailable) { _%>

    companion object {

        const val USERS_BY_LOGIN_CACHE: String = "usersByLogin"

        const val USERS_BY_EMAIL_CACHE: String = "usersByEmail"
    }
    <%_ } _%>
}
<%_ } else if (databaseTypeSql) { _%>
interface UserRepository: CoroutineSortingRepository<<%= asEntity('User') %>, <% if (authenticationTypeOauth2) { %>String<% } else { %>Long<% } %>>, UserRepositoryInternal {

    <%_ if (!authenticationTypeOauth2) { _%>
    suspend fun findOneByActivationKey(activationKey: String): <%= asEntity('User') %>?

    fun findAllByActivatedIsFalseAndActivationKeyIsNotNullAndCreatedDateBefore(dateTime: LocalDateTime): Flow<<%= asEntity('User') %>>

    suspend fun findOneByResetKey(resetKey: String): <%= asEntity('User') %>?

    suspend fun findOneByEmailIgnoreCase(email: String): <%= asEntity('User') %>?

    <%_ } _%>

    suspend fun findOneByLogin(login: String): <%= asEntity('User') %>?

    fun findAllByIdNotNull(pageable: Pageable): Flow<<%= asEntity('User') %>>

    fun findAllByIdNotNullAndActivatedIsTrue(pageable: Pageable): Flow<<%= asEntity('User') %>>

    @Query("INSERT INTO <%= jhiTablePrefix %>_user_authority VALUES(:userId, :authority)")
    suspend fun saveUserAuthority(userId: <%= user.primaryKey.type %>, authority: String)

    @Query("DELETE FROM <%= jhiTablePrefix %>_user_authority")
    suspend fun deleteAllUserAuthorities()

    @Query("DELETE FROM <%= jhiTablePrefix %>_user_authority WHERE user_id = :userId")
    suspend fun deleteUserAuthorities(userId: <%= user.primaryKey.type %>)
}

    <%_ if (!authenticationTypeOauth2) { _%>
interface DeleteExtended<T> {
    suspend fun delete(user: T)
}

    <%_ } _%>
interface UserRepositoryInternal<% if (!authenticationTypeOauth2) { %> : DeleteExtended<<%= asEntity('User') %>><% } %> {

    suspend fun findOneWithAuthoritiesByLogin(login: String): <%= asEntity('User') %>?

    <%_ if (!authenticationTypeOauth2) { _%>
    suspend fun findOneWithAuthoritiesByEmailIgnoreCase(email: String): <%= asEntity('User') %>?
    <%_ } _%>

    <%_ if (authenticationTypeOauth2) { _%>
    suspend fun create(user: <%= asEntity('User') %>): <%= asEntity('User') %>?
    <%_ } _%>

    fun findAllWithAuthorities(pageable: Pageable): Flow<<%= asEntity('User') %>>
}

class UserRepositoryInternalImpl(val db: DatabaseClient, val r2dbcEntityTemplate: R2dbcEntityTemplate, val r2dbcConverter: R2dbcConverter): UserRepositoryInternal {

    override suspend fun findOneWithAuthoritiesByLogin(login: String): <%= asEntity('User') %>? {
        return findOneWithAuthoritiesBy("login", login)
    }

    <%_ if (!authenticationTypeOauth2) { _%>
    override suspend fun findOneWithAuthoritiesByEmailIgnoreCase(email: String): <%= asEntity('User') %>? {
        return findOneWithAuthoritiesBy("email", email.lowercase())
    }

    <%_ } _%>

    override fun findAllWithAuthorities(pageable: Pageable): Flow<<%= asEntity('User') %>> {
        val property = pageable.sort.map(Sort.Order::getProperty).first() ?: "id"
        val direction = pageable.sort.map(Sort.Order::getDirection).first() ?: Sort.DEFAULT_DIRECTION
        val comparator = if (direction == Sort.DEFAULT_DIRECTION) { BeanComparator(property) } else { BeanComparator<Any>(property).reversed() }
        val page = pageable.pageNumber
        val size = pageable.pageSize

        return db
            .sql("SELECT * FROM <%= jhiTablePrefix %>_user u LEFT JOIN <%= jhiTablePrefix %>_user_authority ua ON u.id=ua.user_id")
            .map { row, metadata ->
                return@map Tuples.of(
                    r2dbcConverter.read(<%= asEntity('User') %>::class.java, row, metadata),
                    Optional.ofNullable(row.get("authority_name", String::class.java))
                )
            }.all()
            .groupBy { it.t1.login }
            .flatMap { it.collectList().map { t -> updateUserWithAuthorities(t[0].t1, t) } }
            .sort(comparator)
            .skip((page * size).toLong())
            .take(size.toLong())
            .asFlow()
    }

    <%_ if (!authenticationTypeOauth2) { _%>
    override suspend fun delete(user: <%= asEntity('User') %>) {
        db.sql("DELETE FROM <%= jhiTablePrefix %>_user_authority WHERE user_id = :userId")
            .bind("userId", user.id)
            .then()
            .then(r2dbcEntityTemplate.delete(<%= asEntity('User') %>::class.java)
                .matching(query(where("id").`is`(user.id))).all()
                .then()
            )
    }

    <%_ } else { _%>
    override suspend fun create(user: <%= asEntity('User') %>): <%= asEntity('User') %>? {
        return r2dbcEntityTemplate.insert(<%= asEntity('User') %>::class.java).using(user).awaitSingleOrNull()
    }
    <%_ } _%>

    private suspend fun findOneWithAuthoritiesBy(fieldName: String, fieldValue: Any): <%= asEntity('User') %>? {
        return db.sql("SELECT * FROM <%= jhiTablePrefix %>_user u LEFT JOIN <%= jhiTablePrefix %>_user_authority ua ON u.id=ua.user_id WHERE u.$fieldName = :$fieldName")
            .bind(fieldName, fieldValue)
            .map { row, metadata ->
                return@map Tuples.of(
                    r2dbcConverter.read(<%= asEntity('User') %>::class.java, row, metadata),
                    Optional.ofNullable(row.get("authority_name", String::class.java))
                )
            }.all()
            .collectList()
            .filter { it.isNotEmpty() }
            .map { l -> updateUserWithAuthorities(l[0].t1, l) }
            .awaitSingleOrNull()
    }

    private fun updateUserWithAuthorities(user: <%= asEntity('User') %>, tuples: List<Tuple2<<%= asEntity('User') %>, Optional<String>>>): <%= asEntity('User') %> {
        user.authorities = tuples.filter { it.t2.isPresent }
            .map {
                val authority = Authority()
                authority.name = it.t2.get()
                authority
            }.toMutableSet()
        return user
    }
}

<%_ } else if (databaseTypeCassandra) { _%>
import org.springframework.stereotype.Repository

@Repository
class UserRepository(
    private val cqlTemplate: ReactiveCassandraTemplate,
    private val session: ReactiveSession,
    private val validator: Validator
) {

    private val findAllStmt = session.prepare("SELECT * FROM user").block()
    private val findOneByActivationKeyStmt = session.prepare(
        "SELECT id " +
            "FROM user_by_activation_key " +
            "WHERE activation_key = :activation_key"
    ).block()

    private val findOneByResetKeyStmt = session.prepare(
        "SELECT id " +
            "FROM user_by_reset_key " +
            "WHERE reset_key = :reset_key"
    ).block()

    private val insertByActivationKeyStmt = session.prepare(
        "INSERT INTO user_by_activation_key (activation_key, id) " +
            "VALUES (:activation_key, :id)"
    ).block()

    private val insertByResetKeyStmt = session.prepare(
        "INSERT INTO user_by_reset_key (reset_key, id) " +
            "VALUES (:reset_key, :id)"
    ).block()

    private val deleteByIdStmt = session.prepare(
        "DELETE FROM user " +
                "WHERE id = :id"
    ).block()

    private val deleteByActivationKeyStmt = session.prepare(
        "DELETE FROM user_by_activation_key " +
            "WHERE activation_key = :activation_key"
    ).block()

    private val deleteByResetKeyStmt = session.prepare(
        "DELETE FROM user_by_reset_key " +
            "WHERE reset_key = :reset_key"
    ).block()

    private val findOneByLoginStmt = session.prepare(
        "SELECT id " +
            "FROM user_by_login " +
            "WHERE login = :login"
    ).block()

    private val insertByLoginStmt = session.prepare(
        "INSERT INTO user_by_login (login, id) " +
            "VALUES (:login, :id)"
    ).block()

    private val deleteByLoginStmt = session.prepare(
        "DELETE FROM user_by_login " +
            "WHERE login = :login"
    ).block()

    private val findOneByEmailStmt = session.prepare(
        "SELECT id " +
            "FROM user_by_email " +
            "WHERE email     = :email"
    ).block()

    private val insertByEmailStmt = session.prepare(
        "INSERT INTO user_by_email (email, id) " +
            "VALUES (:email, :id)"
    ).block()

    private val deleteByEmailStmt = session.prepare(
        "DELETE FROM user_by_email " +
            "WHERE email = :email"
    ).block()

    private val truncateStmt = session.prepare("TRUNCATE user").block()

    private val truncateByResetKeyStmt = session.prepare("TRUNCATE user_by_reset_key").block()

    private val truncateByLoginStmt = session.prepare("TRUNCATE user_by_login").block()

    private val truncateByEmailStmt = session.prepare("TRUNCATE user_by_email").block()

    suspend fun findById(id: String): <%= asEntity('User') %>? {
        return cqlTemplate.selectOneById(id, <%= asEntity('User') %>::class.java)
            .awaitSingleOrNull()
    }

    suspend fun findOneByActivationKey(activationKey: String): <%= asEntity('User') %>? {
        val stmt = findOneByActivationKeyStmt!!.bind().setString("activation_key", activationKey)
        return findOneFromIndex(stmt)
    }

    suspend fun findOneByResetKey(resetKey: String): <%= asEntity('User') %>? {
        val stmt = findOneByResetKeyStmt.bind().setString("reset_key", resetKey)
        return findOneFromIndex(stmt)
    }

    <%_ if (cacheManagerIsAvailable) { _%>
    @Cacheable(cacheNames = [USERS_BY_EMAIL_CACHE])
    <%_ } _%>
    suspend fun findOneByEmailIgnoreCase(email: String?): <%= asEntity('User') %>? {
        val stmt = findOneByEmailStmt.bind().setString("email", email?.lowercase())
        return findOneFromIndex(stmt)
    }

    // for DomainUserDetailService
    fun getOneByEmailIgnoreCase(email: String): Mono<User>

    fun getOneByLogin(email: String): Mono<User>

    <%_ if (cacheManagerIsAvailable) { _%>
    @Cacheable(cacheNames = [USERS_BY_LOGIN_CACHE])
    <%_ } _%>
    suspend fun findOneByLogin(login: String): <%= asEntity('User') %>? {
        val stmt = findOneByLoginStmt.bind().setString("login", login)
        return findOneFromIndex(stmt)
    }

    fun findAll(): Flow<<%= asEntity('User') %>> {
        return cqlTemplate.select(findAllStmt!!.bind(), <%= asEntity('User') %>::class.java).asFlow()
    }

    suspend fun save(user: <%= asEntity('User') %>): <%= asEntity('User') %>? {
        val violations = validator.validate(user)
        if (violations != null && violations.isNotEmpty()) {
            throw ConstraintViolationException(violations)
        }
        this.findById(user.id!!)
            ?.let { oldUser ->
                var flag = false
                if (!StringUtils.isEmpty(oldUser.activationKey) && oldUser.activationKey != user.activationKey) {
                    flag = true
                    session.execute(
                        deleteByActivationKeyStmt!!.bind().setString("activation_key", oldUser.activationKey)
                    ).awaitSingle()
                }
                if (!StringUtils.isEmpty(oldUser.resetKey) && oldUser.resetKey != user.resetKey) {
                    flag = true
                    session.execute(
                        deleteByResetKeyStmt!!.bind().setString("reset_key", oldUser.resetKey)
                    ).awaitSingle()
                }
                if (!StringUtils.isEmpty(oldUser.login) && oldUser.login != user.login) {
                    flag = true
                    session.execute(
                        deleteByLoginStmt!!.bind().setString("login", oldUser.login)
                    ).awaitSingle()
                }
                if (!StringUtils.isEmpty(oldUser.email) && oldUser.email != user.email) {
                    flag = true
                    session.execute(
                        deleteByEmailStmt!!.bind().setString("email", oldUser.email?.lowercase())
                    ).awaitSingle()
                }
                if (flag) null else true
            } ?: run {
            val batch = BatchStatement.builder(DefaultBatchType.LOGGED)
            batch.addStatement(getInsertStatement(user))
            if (!StringUtils.isEmpty(user.activationKey)) {
                batch.addStatement(
                    insertByActivationKeyStmt!!.bind()
                        .setString("activation_key", user.activationKey)
                        .setString("id", user.id)
                )
            }
            if (!StringUtils.isEmpty(user.resetKey)) {
                batch.addStatement(
                    insertByResetKeyStmt!!.bind()
                        .setString("reset_key", user.resetKey)
                        .setString("id", user.id)
                )
            }
            batch.addStatement(
                insertByLoginStmt!!.bind()
                    .setString("login", user.login)
                    .setString("id", user.id)
            )
            batch.addStatement(
                insertByEmailStmt!!.bind()
                    .setString("email", user.email?.lowercase())
                    .setString("id", user.id)
            )
            session.execute(batch.build()).subscribe()
        }
        return user
    }

    private fun getInsertStatement(user: <%= asEntity('User') %>): SimpleStatement {
        val converter = cqlTemplate.converter
        val persistentEntity = converter.mappingContext.getRequiredPersistentEntity(user::class.java)
        val toInsert = mutableMapOf<CqlIdentifier, Any>()
        converter.write(user, toInsert, persistentEntity)
        val insert = QueryBuilder.insertInto(persistentEntity.tableName)
            .value("id", QueryBuilder.literal(user.id))
        toInsert.forEach { (key, value) -> insert.value(key, QueryBuilder.literal(value)) }
        return insert.build()
    }

    suspend fun delete(user: <%= asEntity('User') %>) {
        val batch = BatchStatement.builder(DefaultBatchType.LOGGED)
        batch.addStatement(deleteByIdStmt!!.bind().setString("id", user.id))
        if (!user.activationKey.isNullOrBlank()) {
            batch.addStatement(deleteByActivationKeyStmt!!.bind().setString("activation_key", user.activationKey))
        }
        if (!user.resetKey.isNullOrBlank()) {
            batch.addStatement(deleteByResetKeyStmt!!.bind().setString("reset_key", user.resetKey))
        }
        batch.addStatement(deleteByLoginStmt!!.bind().setString("login", user.login))
        batch.addStatement(deleteByEmailStmt!!.bind().setString("email", user.email!!.lowercase()))
        session.execute(batch.build()).subscribe()
    }

    private suspend fun findOneFromIndex(stmt: BoundStatement): <%= asEntity('User') %>? {
        return session.execute(stmt)
            .flatMap { it.rows().next() }
            .mapNotNull { it.getString("id") }
            .awaitSingleOrNull()
            ?.let { findById(it) }
    }

    suspend fun deleteAll() {
        listOfNotNull(truncateStmt, truncateByEmailStmt, truncateByLoginStmt, truncateByResetKeyStmt)
            .map(PreparedStatement::bind)
            .map(session::execute)
            .forEach(Mono<ReactiveResultSet>::subscribe)
    }

<%_ if (cacheManagerIsAvailable) { _%>
    companion object {
        const val USERS_BY_LOGIN_CACHE = "usersByLogin"

        const val USERS_BY_EMAIL_CACHE = "usersByEmail"
    }
<%_ } _%>
}
<%_ } _%>
