<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

This file is part of the JHipster project, see https://jhipster.github.io/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License")
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.repository

import org.springframework.data.domain.Pageable
import org.springframework.data.domain.Sort
import org.springframework.data.r2dbc.convert.R2dbcConverter
import org.springframework.data.r2dbc.core.R2dbcEntityTemplate
import org.springframework.data.r2dbc.core.StatementMapper
import org.springframework.data.r2dbc.mapping.OutboundRow
import org.springframework.data.r2dbc.query.UpdateMapper
import org.springframework.data.relational.core.query.Criteria
import org.springframework.data.relational.core.sql.Condition
import org.springframework.data.relational.core.mapping.RelationalPersistentEntity
import org.springframework.data.relational.core.sql.Conditions
import org.springframework.data.relational.core.sql.OrderByField
import org.springframework.data.relational.core.sql.Select
import org.springframework.data.relational.core.sql.SelectBuilder.SelectFromAndJoin
import org.springframework.data.relational.core.sql.SelectBuilder.SelectFromAndJoinCondition
import org.springframework.data.relational.core.sql.SelectBuilder.SelectOrdered
import org.springframework.data.relational.core.sql.SqlIdentifier
import org.springframework.data.relational.core.sql.Table
import org.springframework.r2dbc.core.Parameter
import org.springframework.data.relational.core.sql.render.SqlRenderer
import org.springframework.stereotype.Service
import org.springframework.util.Assert

import reactor.core.publisher.Flux
import reactor.core.publisher.Mono
import java.util.stream.Stream

/**
 * Helper class to create SQL selects based on the entity, paging parameters and criteria.
 *
 */
@Service
class EntityManager(
    private val sqlRenderer: SqlRenderer, 
    private val updateMapper: UpdateMapper,
    private val r2dbcEntityTemplate: R2dbcEntityTemplate
) {

    private var statementMapper: StatementMapper? = null

    init {
        statementMapper = r2dbcEntityTemplate.dataAccessStrategy.statementMapper
    }

    companion object {
        const val ENTITY_ALIAS: String = "e"
        const val ALIAS_PREFIX: String = "e_"

        private fun <T: OrderByField> createOrderByFields(table: Table, sortToUse: Sort): Collection<T> {
            val fields = mutableListOf<OrderByField>()
            sortToUse.forEach { 
                val propertyName = it.property
                val orderByField = OrderByField.from(table.column(propertyName).`as`(ALIAS_PREFIX + propertyName))
                val sort = if (it.isAscending) orderByField.asc() else orderByField.desc()
                fields.add(sort)
            }
            return fields as Collection<T>
        } 
    }

    data class LinkTable(val tableName: String, val idColumn: String, val referenceColumn: String) {
        init {
            Assert.notNull(tableName, "tableName is null")
            Assert.notNull(idColumn, "idColumn is null")
            Assert.notNull(referenceColumn, "referenceColumn is null")
        }
    }

    /**
     * Creates an SQL select statement from the given fragment and pagination parameters.
     * @param selectFrom a representation of a select statement.
     * @param entityType the entity type which holds the table name.
     * @param pageable page parameter, or null, if everything needs to be returned
     * @return sql select statement
     */
    fun createSelect(selectFrom: SelectFromAndJoin, entityType: Class<*>, pageable: Pageable?): String {
        if (pageable != null) {
            return createSelectImpl(selectFrom.limitOffset(pageable.pageSize.toLong(), pageable.offset), entityType, pageable.sort)
        } else {
            return createSelectImpl(selectFrom, entityType, null)
        }
    }

    /**
     * Creates an SQL select statement from the given fragment and pagination parameters.
     * @param selectFrom a representation of a select statement.
     * @param entityType the entity type which holds the table name.
     * @param pageable page parameter, or null, if everything needs to be returned
     * @return sql select statement
     */
     fun createSelect(selectFrom: SelectFromAndJoinCondition, entityType: Class<*>, pageable: Pageable?, where: Condition?): String {
        if (pageable != null) {
            if (where != null) {
                return createSelectImpl(selectFrom.limitOffset(pageable.pageSize.toLong(), pageable.offset).where(where), entityType, pageable.sort)
            } else {
                return createSelectImpl(selectFrom.limitOffset(pageable.pageSize.toLong(), pageable.offset), entityType, pageable.sort)
            }
        } else {
            if (where != null) {
                return createSelectImpl(selectFrom.where(where), entityType, null)
            } else {
                return createSelectImpl(selectFrom, entityType, null)
            }
        }
    }

    fun createSelect(selectFrom: SelectFromAndJoin, entityType: Class<*>, pageable: Pageable?, where: Condition?): String {
        if (pageable != null) {
            if (where != null) {
                return createSelectImpl(selectFrom.limitOffset(pageable.pageSize.toLong(), pageable.offset).where(where), entityType, pageable.sort);
            } else {
                return createSelectImpl(selectFrom.limitOffset(pageable.pageSize.toLong(), pageable.offset), entityType, pageable.sort);
            }
        } else {
            if (where != null) {
                return createSelectImpl(selectFrom.where(where), entityType, null);
            } else {
                return createSelectImpl(selectFrom, entityType, null);
            }
        }
    }
    
    private fun createSelectImpl(selectFrom: SelectOrdered, entityType: Class<*>, sortParameter: Sort?): String {
        var selected = selectFrom
        if (sortParameter != null && sortParameter.isSorted) {
            val entity: RelationalPersistentEntity<*> = getPersistentEntity(entityType)
            if (entity != null) {
                val sort = updateMapper.getMappedObject(sortParameter, entity)
                selected = selectFrom.orderBy(
                    createOrderByFields((Table.create(entity.tableName).`as`(EntityManager.ENTITY_ALIAS)), sort))
            }
        }
        return createSelect(selected.build())
    }

    private fun  getPersistentEntity(entityType: Class<*>): RelationalPersistentEntity<*> {
        return r2dbcEntityTemplate.converter.mappingContext
                .getPersistentEntity(entityType) as RelationalPersistentEntity<*> 
    }

    /**
     * Delete all the entity with the given type, and return the number of deletions.
     * @param entityType the entity type which holds the table name.
     * @return the number of deleted entity
     */
    fun deleteAll(entityType: Class<*>): Mono<Int> {
        return r2dbcEntityTemplate.delete(entityType).all()
    }

    /**
     * Delete all the rows from the given table, and return the number of deletions.
     * @param tableName the name of the table to delete.
     * @return the number of deleted rows.
     */
    fun deleteAll(tableName: String): Mono<Int> {
        val delete = statementMapper?.createDelete(tableName)
        return r2dbcEntityTemplate.databaseClient.sql(statementMapper?.getMappedObject(delete)).fetch().rowsUpdated()
    }

    /**
     * Generate an actual SQL from the given {@link Select}.
     * @param select a representation of a select statement.
     * @return the generated SQL select.
     */
    fun createSelect(select: Select): String {
        return sqlRenderer.render(select)
    }

    /**
     * Inserts the given entity into the database - and sets the id, if it's an autoincrement field.
     * @param <S> the type of the persisted entity.
     * @param entity the entity to be inserted into the database.
     * @return the persisted entity.
     */
    fun <S> insert(entity: S): Mono<S> {
        return r2dbcEntityTemplate.insert(entity)
    }

    /**
     * Updates the table, which links the entity with the referred entities.
     * @param table describes the link table, it contains a table name, the column name for the id, and for the referred entity id.
     * @param entityId the id of the entity, for which the links are created.
     * @param referencedIds the id of the referred entities.
     * @return the number of inserted rows.
     */
    fun updateLinkTable(table: LinkTable, entityId: Any?, referencedIds: List<Any?>?): Mono<Int> {
        
        if (referencedIds == null) {
            return deleteFromLinkTable(table, entityId).then(Mono.just(0))
        }

        return deleteFromLinkTable(table, entityId)
            .then(
                Flux.fromIterable(referencedIds)
                    .flatMap { referenceId: Any? ->
                        val insert = r2dbcEntityTemplate
                            .dataAccessStrategy
                            .statementMapper
                            .createInsert(table.tableName)
                            .withColumn(table.idColumn, Parameter.from(entityId))
                            .withColumn(table.referenceColumn, Parameter.from(referenceId))
                        r2dbcEntityTemplate
                            .databaseClient
                            .sql(statementMapper?.getMappedObject(insert))
                            .fetch()
                            .rowsUpdated()
                    }
                    .collectList()
                    .map { updates: List<Int> ->
                        updates.stream().reduce { a: Int, b: Int ->
                            Integer.sum(
                                a,
                                b
                            )
                        }.orElse(0)
            })
    }

    fun deleteFromLinkTable(table: LinkTable, entityId: Any?): Mono<Void>  {
        Assert.notNull(entityId, "entityId is null")
        val deleteSpec = r2dbcEntityTemplate.dataAccessStrategy.statementMapper
            .createDelete(table.tableName)
            .withCriteria(Criteria.from(Criteria.where(table.idColumn).`is`(entityId)))
        return r2dbcEntityTemplate.databaseClient.sql(statementMapper?.getMappedObject(deleteSpec)).then()
    }
}
