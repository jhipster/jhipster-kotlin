<%#
 Copyright 2013-2024 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License")
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.repository

import com.couchbase.client.java.query.QueryScanConsistency
import org.springframework.data.couchbase.repository.*
import org.springframework.data.domain.*
import org.springframework.data.repository.NoRepositoryBean

<%_ if (reactive) { _%>
import reactor.core.publisher.Flux
import reactor.core.publisher.Mono
<%_ } else { _%>
import java.util.List
<%_ } _%>
import java.util.stream.Collectors

import java.lang.String.format

const val FIND_IDS_QUERY = "SELECT meta().id as __id, 0 as __cas FROM #{#n1ql.bucket} WHERE #{#n1ql.filter}"

/**
 * Couchbase specific {@link org.springframework.data.repository.Repository} interface uses N1QL for all requests.
 */
<%_
    let listOrFlux = reactive ? 'Flux' : 'MutableList';
    let pageOrFlux = reactive ? 'Flux' : 'Page';
_%>
@NoRepositoryBean
@ScanConsistency(query = QueryScanConsistency.REQUEST_PLUS)
interface JHipsterCouchbaseRepository<T,ID>:  <% if (reactive) { %>Reactive<% } %>CouchbaseRepository<T, ID> {

    companion object {
        fun pageableStatement(pageable: Pageable, prefix: String): String? {
            val sort = Sort.by(
                pageable.sort
                    .map { order ->
                        val property = order.property
                        if ("id" == property) {
                            order.withProperty("meta($prefix).id")
                        }
                        if (prefix.isEmpty()) {
                            order
                        }
                        order.withProperty("$prefix $property")
                    }
                    .toList()
            )
            return org.springframework.data.couchbase.core.query.Query()
                .limit(pageable.pageSize)
                .skip(pageable.offset)
                .with(sort)
                .export()
        }
    }

    override fun findAll(): <%= listOrFlux %><T> {
        return findAllById(toIds(findAllIds()))
    }

    <% if (reactive) { %><% } else { %>override <% } %>fun findAll<% if (reactive) { %>By<% } %>(pageable: Pageable): <%= pageOrFlux %><T> {
<%_ if (reactive) { _%>
        return findAllById(toIds(findAllIds(pageable)))
<%_ } else { _%>
        val page = findAllIds(pageable)
        return PageImpl<T>(findAllById(toIds(page.content)), pageable, page.totalElements)
<%_ } _%>
    }

    override fun findAll(sort: Sort): <%= listOrFlux %><T> {
        return findAllById(toIds(findAllIds(sort)))
    }

    override fun deleteAll() <% if (reactive) { %>: Mono<Void><% } %>  {
<%_ if (reactive) { _%>
        return toIds(findAllIds())
            .collectList()
            .flatMap(this::deleteAllById)
<%_ } else { _%>
        deleteAllById(toIds(findAllIds()))
<%_ } _%>
    }

    @Query(FIND_IDS_QUERY)
    fun findAllIds(): <%= listOrFlux %><T>

    @Query(FIND_IDS_QUERY)
    fun findAllIds(pageable: Pageable): <%= pageOrFlux %><T>

    @Query(FIND_IDS_QUERY)
    fun findAllIds(sort: Sort): <%= listOrFlux %><T>

    @SuppressWarnings("unchecked")
    fun toIds(entities: <%= listOrFlux %><T>): <%= listOrFlux %><ID>  {
<%_ if (reactive) { _%>
        return entities.mapNotNull { entityInformation.getId(it) as ID}
<%_ } else { _%>
        return entities.map { entityInformation.getId(it) as ID }.toMutableList()
<%_ } _%>
    }
}
