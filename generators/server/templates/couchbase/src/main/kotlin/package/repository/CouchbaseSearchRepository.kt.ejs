<%#
 Copyright 2013-2024 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License")
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.repository

import org.springframework.data.couchbase.repository.Query
import com.couchbase.client.java.query.QueryScanConsistency
import org.springframework.data.couchbase.repository.ScanConsistency
import org.springframework.data.domain.*
import org.springframework.data.repository.NoRepositoryBean
import com.couchbase.client.java.search.SearchQuery
import com.couchbase.client.java.search.queries.DocIdQuery
import com.couchbase.client.java.search.queries.QueryStringQuery
import java.util.LinkedList

<%_ if (reactive) { _%>
import reactor.core.publisher.Flux
import reactor.core.publisher.Mono
<%_ } _%>

/**
 * Couchbase specific {@link org.springframework.data.repository.Repository} interface for search queries.
 */
<%_
    let listOrFlux = reactive ? 'Flux' : 'List';
    let pageOrFlux = reactive ? 'Flux' : 'Page';
    let toMutableList = reactive ? '' : '.toMutableList()';
_%>
@NoRepositoryBean
interface CouchbaseSearchRepository<T, ID>: JHipsterCouchbaseRepository<T, ID> {

    companion object {
        const val SEARCH_CONDITION = "SEARCH(b, #{T(<%= packageName %>.repository.CouchbaseSearchRepository).searchQuery([0]).toString()})"

        fun searchQuery(queryString: String): SearchQuery {
            val ids: MutableList<String> = LinkedList()
            var q = queryString
            for (r in q.split(" ")) {
                if (r.indexOf("id:") == 0) {
                    ids.add(r.substring(3))
                    q = q.replace(r, "").replace(Regex("[ ]+"), " ").trim()
                }
            }
            val query = SearchQuery.queryString(q)
            if (ids.size != 0) {
                val docIdQuery = SearchQuery.docId(*ids.toTypedArray())
                if (q.isNotEmpty()) {
                    return SearchQuery.conjuncts(query, docIdQuery)
                }
                return docIdQuery
            }
            return query
        }

    }

    @ScanConsistency(query = QueryScanConsistency.NOT_BOUNDED)
    @JvmDefault
    fun search(queryString: String) :<%= listOrFlux %><T> {
        return findAllById(toIds(searchIds(queryString)<%= toMutableList %>))
    }

    @ScanConsistency(query = QueryScanConsistency.NOT_BOUNDED)
    @JvmDefault
    fun search(queryString: String, pageable: Pageable): <%= pageOrFlux %><T>  {
    <%_ if (reactive) { _%>
        return findAllById(toIds(searchIds(queryString, pageable)))
    <%_ } else { _%>
        val page = searchIds(queryString, pageable)
        return PageImpl<T>(findAllById(toIds(page.content)), pageable, page.totalElements)
    <%_ } _%>
    }

    @Query(FIND_IDS_QUERY + " AND " + SEARCH_CONDITION)
    @ScanConsistency(query = QueryScanConsistency.NOT_BOUNDED)
    fun searchIds(queryString: String): <%= listOrFlux %><T> 

    @Query(FIND_IDS_QUERY + " AND " + SEARCH_CONDITION)
    @ScanConsistency(query = QueryScanConsistency.NOT_BOUNDED)
    fun searchIds(queryString: String, pageable: Pageable): <%= pageOrFlux %><T>
}
