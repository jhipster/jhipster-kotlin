<%#
 Copyright 2013-2024 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.service.mapper

<%_ if (databaseTypeSql || databaseTypeMongodb || databaseTypeNeo4j) { _%>
import <%= packageName %>.domain.Authority
<%_ } _%>
import <%= packageName %>.domain.<%= user.persistClass %>
import <%= packageName %>.service.dto.<%= user.adminUserDto %>
import <%= packageName %>.service.dto.<%= user.restClass %>

import org.springframework.stereotype.Service

import org.mapstruct.BeanMapping
import org.mapstruct.Mappings
import org.mapstruct.Mapping
import org.mapstruct.Named

/**
 * Mapper for the entity [<%= user.persistClass %>] and its DTO called [<%= user.restClass %>].
 *
 * Normal mappers are generated using MapStruct, this one is hand-coded as MapStruct
 * support is still in beta, and requires a manual step with an IDE.
 */
@Service
class UserMapper {

    fun usersToUserDTOs(users: List<<%= user.persistClass %>?>): MutableList<<%= user.restClass %>> =
        users.asSequence()
            .filterNotNull()
            .mapTo(mutableListOf()) { userToUserDTO(it) }

    fun userToUserDTO(user: <%= user.persistClass %>): <%= user.restClass %> = <%= user.restClass %>(user)

    fun usersToAdminUserDTOs(users: List<<%= user.persistClass %>>): MutableList<<%= user.adminUserDto %>> =
        users.asSequence()
            .filterNotNull()
            .mapTo(mutableListOf()) { userToAdminUserDTO(it) }

    fun userToAdminUserDTO(user: <%= user.persistClass %>) = <%= user.adminUserDto %>(user)

    fun userDTOsToUsers(userDTOs: List<<%= user.adminUserDto %>?>) =
        userDTOs.asSequence()
            .mapNotNullTo(mutableListOf()) { userDTOToUser(it) }

    fun userDTOToUser(userDTO: <%= user.adminUserDto %>?) =
        when (userDTO) {
            null -> null
            else -> {
                <%= user.persistClass %>(
                    id = userDTO.id,
                    login = userDTO.login,
                    firstName = userDTO.firstName,
                    lastName = userDTO.lastName,
                    email = userDTO.email,
                    <%_ if (!databaseTypeCassandra) { _%>
                    imageUrl = userDTO.imageUrl,
                    <%_ } _%>
                    activated = userDTO.activated,
                    langKey = userDTO.langKey,
                    <%_ if (databaseTypeSql || databaseTypeMongodb || databaseTypeNeo4j) { _%>
                    authorities = authoritiesFromStrings(userDTO.authorities)
                    <%_ } _%>
                    <%_ if (databaseTypeCassandra || databaseTypeCouchbase) { _%>
                    authorities = cleanNullStringAuthorities(userDTO.authorities)
                    <%_ } _%>
                )
            }
        }
    <%_ if (databaseTypeSql || databaseTypeMongodb || databaseTypeNeo4j) { _%>

    private fun authoritiesFromStrings(authoritiesAsString: Set<String>?): MutableSet<Authority> =
        authoritiesAsString?.mapTo(mutableSetOf()) { Authority(name = it) } ?: mutableSetOf()
    <%_ } _%>
    <%_ if (databaseTypeCassandra || databaseTypeCouchbase) { _%>

    private fun cleanNullStringAuthorities(authoritiesAsString: Set<String?>?): MutableSet<String> =
        authoritiesAsString?.filterNotNullTo(mutableSetOf()) ?: mutableSetOf()
    <%_ } _%>

    fun userFromId(id: <%= user.primaryKey.type %>?) = id?.let { <%= user.persistClass %>(id = it) }

    @Named("id")
    @BeanMapping(ignoreByDefault = true)
    @Mapping(target = "id", source = "id")
    fun toDtoId(user: <%= user.persistClass %>?): <%= user.restClass %>? {
        if (user == null) {
            return null
        }
        val userDto = <%= user.restClass %>()
        userDto.id = user.id
        return userDto
    }

    @Named("idSet")
    @BeanMapping(ignoreByDefault = true)
    @Mapping(target = "id", source = "id")
    fun toDtoIdSet(users: Set<<%= user.persistClass %>>?): Set<<%= user.restClass %>>? {
        if ( users == null ) {
            return emptySet<<%= user.restClass %>>()
        }

        val userSet = hashSetOf<<%= user.restClass %>>()
        users.forEach {
            this.toDtoId(it)?.let {
                userSet.add(it)
            }
        }
        return userSet
    }

    @Named("login")
    @BeanMapping(ignoreByDefault = true)
    @Mappings(
        Mapping(target = "id", source = "id"),
        Mapping(target = "login", source = "login")
    )
    fun toDtoLogin(user: <%= user.persistClass %>?): <%= user.restClass %>? {
        if (user == null) {
            return null
        }
        val userDto = <%= user.restClass %>()
        userDto.id = user.id
        userDto.login = user.login
        return userDto
    }

    @Named("loginSet")
    @BeanMapping(ignoreByDefault = true)
    @Mappings(
        Mapping(target = "id", source = "id"),
        Mapping(target = "login", source = "login")
    )
    fun toDtoLoginSet(users: Set<<%= user.persistClass %>>?): Set<<%= user.restClass %>>? {
        if ( users == null ) {
            return emptySet<<%= user.restClass %>>()
        }

        val userSet = hashSetOf<<%= user.restClass %>>()
        users.forEach {
            this.toDtoLogin(it)?.let {
                userSet.add(it)
            }
        }

        return userSet
    }
}
