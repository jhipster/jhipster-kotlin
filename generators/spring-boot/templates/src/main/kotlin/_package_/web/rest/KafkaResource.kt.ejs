<%#
 Copyright 2013-2024 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.web.rest

import org.springframework.web.servlet.mvc.method.annotation.SseEmitter.event

import java.io.IOException
import java.security.Principal
import java.util.Optional

import org.slf4j.Logger
import org.slf4j.LoggerFactory
import org.springframework.beans.factory.annotation.Qualifier
import org.springframework.cloud.stream.annotation.StreamListener
import org.springframework.http.MediaType
import org.springframework.messaging.Message
import org.springframework.messaging.MessageChannel
import org.springframework.messaging.MessageHeaders
import org.springframework.messaging.support.GenericMessage
import org.springframework.util.MimeTypeUtils

import org.springframework.web.bind.annotation.*
import org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter
import org.springframework.web.servlet.mvc.method.annotation.SseEmitter

import <%= packageName %>.config.KafkaSseConsumer
import <%= packageName %>.config.KafkaSseProducer

@RestController
@RequestMapping("/api/<%= dasherizedBaseName %>-kafka")
class <%= upperFirstCamelCase(baseName) %>KafkaResource(
    @Qualifier(KafkaSseProducer.CHANNELNAME) val output: MessageChannel
) {

    private val log = LoggerFactory.getLogger(javaClass)
    private var emitters = mutableMapOf<String, SseEmitter>()

    @PostMapping("/publish")
    fun publish(@RequestParam message: String) {
        log.debug("REST request the message : {} to send to Kafka topic ", message)
        val map = mutableMapOf<String, Any>()
        map[MessageHeaders.CONTENT_TYPE] = MimeTypeUtils.TEXT_PLAIN_VALUE
        val headers = MessageHeaders(map)
        output.send(GenericMessage(message, headers))
    }

    @GetMapping("/register")
    fun register(principal: Principal): ResponseBodyEmitter {
        log.debug("Registering sse client for ${principal.name}")
        val emitter = SseEmitter()
        emitter.onCompletion { emitters.remove(principal.name, emitter) }
        emitters[principal.name] = emitter
        return emitter
    }

    @GetMapping("/unregister")
    fun unregister(principal: Principal) {
        val user = principal.name
        log.debug("Unregistering sse emitter for user: $user")
        Optional.ofNullable(emitters[user])
            .ifPresent(ResponseBodyEmitter::complete)
    }

    @StreamListener(value = KafkaSseConsumer.CHANNELNAME, copyHeaders = "false")
    fun consume(message: Message<String> ) {
        log.debug("Got message from kafka stream: ${message.payload}")
        emitters.entries
            .map { it.value }
            .forEach {
                try {
                    it.send(event().data(message.payload, MediaType.TEXT_PLAIN))
                } catch (e: IOException) {
                    log.debug("error sending sse message ${message.payload}")
                }
            }
    }
}
