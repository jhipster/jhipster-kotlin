<%#
 Copyright 2013-2024 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.web.rest.errors

import <%= packageName %>.IntegrationTest
import org.junit.jupiter.api.Test
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.security.test.context.support.WithMockUser

import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc
import org.springframework.http.MediaType
import org.springframework.test.web.servlet.MockMvc

<%_ if (authenticationUsesCsrf) { _%>
import org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.csrf
<%_ } _%>
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.content
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.status

/**
 * Integration tests [ExceptionTranslator] controller advice.
 */
@WithMockUser
@AutoConfigureMockMvc
@IntegrationTest
class ExceptionTranslatorIT {

    @Autowired
    private lateinit var mockMvc: MockMvc

    <%_ if (!databaseTypeNo && !databaseTypeCassandra) { _%>

    @Test
    @Throws(Exception::class)
    fun testConcurrencyFailure() {
        mockMvc.perform(get("/api/exception-translator-test/concurrency-failure")<% if (authenticationUsesCsrf) { %>.with(csrf())<% } %>)
            .andExpect(status().isConflict)
            .andExpect(content().contentType(MediaType.APPLICATION_PROBLEM_JSON))
            .andExpect(jsonPath("\$.message").value(ERR_CONCURRENCY_FAILURE))
    }
    <%_ } _%>

    @Test
    @Throws(Exception::class)
    fun testMethodArgumentNotValid() {
        mockMvc.perform(post("/api/exception-translator-test/method-argument").content("{}").contentType(MediaType.APPLICATION_JSON)<% if (authenticationUsesCsrf) { %>.with(csrf())<% } %>)
            .andExpect(status().isBadRequest)
            .andExpect(content().contentType(MediaType.APPLICATION_PROBLEM_JSON))
            .andExpect(jsonPath("\$.message").value(ERR_VALIDATION))
            .andExpect(jsonPath("\$.fieldErrors.[0].objectName").value("test"))
            .andExpect(jsonPath("\$.fieldErrors.[0].field").value("test"))
            .andExpect(jsonPath("\$.fieldErrors.[0].message").value("must not be null"))
    }

    @Test
    @Throws(Exception::class)
    fun testMissingServletRequestPartException() {
        mockMvc.perform(get("/api/exception-translator-test/missing-servlet-request-part")<% if (authenticationUsesCsrf) { %>.with(csrf())<% } %>)
            .andExpect(status().isBadRequest)
            .andExpect(content().contentType(MediaType.APPLICATION_PROBLEM_JSON))
            .andExpect(jsonPath("\$.message").value("error.http.400"))
    }

    @Test
    @Throws(Exception::class)
    fun testMissingServletRequestParameterException() {
        mockMvc.perform(get("/api/exception-translator-test/missing-servlet-request-parameter")<% if (authenticationUsesCsrf) { %>.with(csrf())<% } %>)
            .andExpect(status().isBadRequest)
            .andExpect(content().contentType(MediaType.APPLICATION_PROBLEM_JSON))
            .andExpect(jsonPath("\$.message").value("error.http.400"))
    }

    @Test
    @Throws(Exception::class)
    fun testAccessDenied() {
        mockMvc.perform(get("/api/exception-translator-test/access-denied")<% if (authenticationUsesCsrf) { %>.with(csrf())<% } %>)
            .andExpect(status().isForbidden)
            .andExpect(content().contentType(MediaType.APPLICATION_PROBLEM_JSON))
            .andExpect(jsonPath("\$.message").value("error.http.403"))
            .andExpect(jsonPath("\$.detail").value("test access denied!"))
    }

    @Test
    @Throws(Exception::class)
    fun testUnauthorized() {
        mockMvc.perform(get("/api/exception-translator-test/unauthorized")<% if (authenticationUsesCsrf) { %>.with(csrf())<% } %>)
            .andExpect(status().isUnauthorized)
            .andExpect(content().contentType(MediaType.APPLICATION_PROBLEM_JSON))
            .andExpect(jsonPath("\$.message").value("error.http.401"))
            .andExpect(jsonPath("\$.path").value("/api/exception-translator-test/unauthorized"))
            .andExpect(jsonPath("\$.detail").value("test authentication failed!"))
    }

    @Test
    @Throws(Exception::class)
    fun testMethodNotSupported() {
        mockMvc.perform(post("/api/exception-translator-test/access-denied")<% if (authenticationUsesCsrf) { %>.with(csrf())<% } %>)
            .andExpect(status().isMethodNotAllowed)
            .andExpect(content().contentType(MediaType.APPLICATION_PROBLEM_JSON))
            .andExpect(jsonPath("\$.message").value("error.http.405"))
            .andExpect(jsonPath("\$.detail").value("Request method 'POST' not supported"))
    }

    @Test
    @Throws(Exception::class)
    fun testExceptionWithResponseStatus() {
        mockMvc.perform(get("/api/exception-translator-test/response-status")<% if (authenticationUsesCsrf) { %>.with(csrf())<% } %>)
            .andExpect(status().isBadRequest)
            .andExpect(content().contentType(MediaType.APPLICATION_PROBLEM_JSON))
            .andExpect(jsonPath("\$.message").value("error.http.400"))
            .andExpect(jsonPath("\$.title").value("test response status"))
    }

    @Test
    @Throws(Exception::class)
    fun testInternalServerError() {
        mockMvc.perform(get("/api/exception-translator-test/internal-server-error")<% if (authenticationUsesCsrf) { %>.with(csrf())<% } %>)
            .andExpect(status().isInternalServerError)
            .andExpect(content().contentType(MediaType.APPLICATION_PROBLEM_JSON))
            .andExpect(jsonPath("\$.message").value("error.http.500"))
            .andExpect(jsonPath("\$.title").value("Internal Server Error"))
    }
}
