<%#
 Copyright 2013-2024 the original author or authors from the JHipster project.

  This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

  Licensed under the Apache License, Version 2.0 (the "
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.security.jwt

import org.springframework.cloud.gateway.filter.GatewayFilter
import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory
import org.springframework.http.server.reactive.ServerHttpRequest
import org.springframework.stereotype.Component
import org.springframework.util.StringUtils

import <%= packageName %>.security.jwt.JWTFilter.Companion.AUTHORIZATION_HEADER

@Component
class JWTRelayGatewayFilterFactory(private val tokenProvider: TokenProvider) : AbstractGatewayFilterFactory<Any>() {

    override fun apply(config: Any) =
        GatewayFilter { exchange, chain ->
            if(exchange != null) {
                val token = extractJWTToken(exchange.request)
                if(token != null && StringUtils.hasText(token) && tokenProvider.validateToken(token)) {
                    val request = exchange.request.mutate()
                        .header(AUTHORIZATION_HEADER, "Bearer $token")
                        .build()
                    return@GatewayFilter chain.filter(exchange.mutate().request(request).build())
                }

            }
            chain.filter(exchange)
        }

     private fun extractJWTToken(request: ServerHttpRequest): String? {
        val bearerToken = request.headers.getFirst(AUTHORIZATION_HEADER)
        if (bearerToken == null) {
            return null
        }
        if (StringUtils.hasText(bearerToken) && bearerToken.startsWith("Bearer ")) {
            return bearerToken.substring(7)
        }
        throw IllegalArgumentException("Invalid token in Authorization header")
    }
}
