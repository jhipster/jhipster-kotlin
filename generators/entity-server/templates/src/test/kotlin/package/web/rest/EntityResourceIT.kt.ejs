<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= entityAbsolutePackage %>.web.rest

<%_
const fieldsToTest = fields.filter(field => !field.id && !field.autoGenerate && !field.transient);
let mapsIdEntity;
let mapsIdEntityInstance;
let mapsIdRepoInstance;
if (isUsingMapsId) {
    mapsIdEntity = mapsIdAssoc.otherEntityNameCapitalized;
    mapsIdEntityInstance =  mapsIdEntity.charAt(0).toLowerCase() + mapsIdEntity.slice(1);
    mapsIdRepoInstance = `${mapsIdEntityInstance}Repository`;
}

let callBlock = '';
let callListBlock = '';
if (reactive) {
    callBlock = ".block()";
    callListBlock = ".collectList().block()";
}
let saveMethod = 'save';
if (!reactive && databaseTypeSql) {
    saveMethod = 'saveAndFlush';
}

let createEntityPrefix = '';
let createEntityPostfix = '';
if (databaseTypeSql && reactive) {
    createEntityPrefix = 'em.insert(';
    createEntityPostfix = ').block()';
}

let idValue = `${persistInstance}.${primaryKey.name}`;
if (primaryKey.typeLong) {
    idValue = idValue + '?.toInt()';
} else if (primaryKey.typeUUID) {
    idValue = idValue + '.toString()';
}
let transactionalAnnotation = '';
if (databaseTypeSql && !reactive) {
    transactionalAnnotation = '\n    @Transactional';
}
_%>
<%_ if (entityAbsolutePackage !== packageName) { _%>
import <%= packageName %>.web.rest.*
<% } %>
import <%= packageName %>.IntegrationTest
import <%= entityAbsolutePackage %>.domain.<%= persistClass %>
<%_
    var imported = [];
    for (relationship of relationships) { // import entities in required relationships
        const relationshipValidate = relationship.relationshipValidate;
        const otherEntityNameCapitalized = relationship.otherEntityNameCapitalized;
        const isUsingMapsIdL1 = relationship.id;
        if(imported.indexOf(otherEntityNameCapitalized) === -1 && persistClass !== asEntity(otherEntityNameCapitalized)) {
            if ((relationshipValidate !== null && relationshipValidate) || jpaMetamodelFiltering || (isUsingMapsIdL1)) {
_%>
import <%= entityAbsolutePackage %>.domain.<%= asEntity(otherEntityNameCapitalized) %>
<%_         imported.push(otherEntityNameCapitalized);
        } } } _%>
<%_ if (saveUserSnapshot) { _%>
import <%= entityAbsolutePackage %>.repository.UserRepository
<%_ } _%>
import <%= entityAbsolutePackage %>.repository.<%= entityClass %>Repository
<%_ if (databaseTypeSql && reactive) { _%>
import <%= packageName %>.repository.EntityManager
<%_ } _%>
<%_ if (isUsingMapsId&& ( !dtoMapstruct && serviceNo)) { _%>
import <%= entityAbsolutePackage %>.repository.<%= mapsIdAssoc.otherEntityNameCapitalized %>Repository
<%_ } _%>
<%_ if (searchEngineElasticsearch) { _%>
import <%= entityAbsolutePackage %>.repository.search.<%= entityClass %>SearchRepository
<%_ } _%>
<%_ if (!serviceNo && implementsEagerLoadApis) { _%>
import <%= entityAbsolutePackage %>.service.<%= entityClass %>Service
<%_ } _%>
<%_ if (dtoMapstruct) { _%>
import <%= entityAbsolutePackage %>.service.dto.<%= dtoClass %>
import <%= entityAbsolutePackage %>.service.mapper.<%= entityClass %>Mapper
<%_ } _%>
<%_ if (jpaMetamodelFiltering) { _%>
import <%= entityAbsolutePackage %>.service.criteria.<%= entityClass %>Criteria
<%_ } _%>
import kotlin.test.assertNotNull
<%_ if (searchEngineElasticsearch) { _%>
import org.assertj.core.util.IterableUtil
import org.apache.commons.collections4.IterableUtils
import java.util.concurrent.TimeUnit
<%_ } _%>
<%_ if ((databaseTypeSql && reactive) || searchEngineElasticsearch) { _%>
import org.junit.jupiter.api.AfterEach
<%_ } _%>
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
<%_ if (implementsEagerLoadApis || databaseTypeNeo4j) { _%>
import org.junit.jupiter.api.extension.Extensions
import org.junit.jupiter.api.extension.ExtendWith
import org.mockito.junit.jupiter.MockitoExtension
<%_ } _%>
import org.mockito.Mock
import org.mockito.MockitoAnnotations
import org.springframework.beans.factory.annotation.Autowired
<%_ if (reactive) { _%>
import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient
<%_ } else { _%>
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc
<%_ } _%>
<%_ if (searchEngineElasticsearch && !paginationNo || implementsEagerLoadApis) { _%>
import org.springframework.data.domain.PageImpl
import org.springframework.data.domain.Pageable
<%_ } _%>
<%_ if (searchEngineElasticsearch && !paginationNo) { _%>
import org.springframework.data.domain.PageRequest
<%_ } _%>
import org.springframework.data.web.PageableHandlerMethodArgumentResolver
import org.springframework.http.MediaType
<%_ if (searchEngineCouchbase) { _%>
import java.util.concurrent.TimeUnit

import org.junit.jupiter.api.Timeout
<%_ } _%>
<%_ if (databaseTypeCouchbase) { _%>
import org.springframework.security.core.context.SecurityContextHolder
import org.springframework.security.test.context.TestSecurityContextHolder
<%_ } _%>
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter
<%_ if (reactive) { _%>
import org.springframework.test.web.reactive.server.WebTestClient
<%_ } _%>
<%_ if (!reactive) { _%>
import org.springframework.test.web.servlet.MockMvc
import org.springframework.test.web.servlet.setup.MockMvcBuilders
<%_ } _%>
import org.springframework.security.test.context.support.WithMockUser
<%_ if (databaseTypeSql && !reactive) { _%>
import org.springframework.transaction.annotation.Transactional
<%_ } _%>
<%_ if (fieldsContainBlob) { _%>
import org.springframework.util.Base64Utils
<%_ } _%>
<%_ if (reactive && (implementsEagerLoadApis || searchEngineElasticsearch)) { _%>
import reactor.core.publisher.Flux
import reactor.core.publisher.Mono
<%_ } _%>
import org.springframework.validation.Validator
<%_ if (databaseTypeSql && !reactive) { _%>
import javax.persistence.EntityManager
<%_ } _%>
<%_ if (fieldsContainBigDecimal) { _%>
import java.math.BigDecimal
<%_ } _%>
<%_ if (fieldsContainBlob&& databaseTypeCassandra) { _%>
import java.nio.ByteBuffer
<%_ } _%>
<%_ if (reactive || fieldsContainDuration) { _%>
import java.time.Duration
<%_ } _%>
<%_ if (fieldsContainLocalDate) { _%>
import java.time.LocalDate
<%_ } _%>
<%_ if (fieldsContainInstant|| fieldsContainZonedDateTime) { _%>
import java.time.Instant
<%_ } _%>
<%_ if (fieldsContainZonedDateTime) { _%>
import java.time.ZonedDateTime
import java.time.ZoneOffset
<%_ } _%>
<%_ if (fieldsContainLocalDate|| fieldsContainZonedDateTime) { _%>
import java.time.ZoneId
<%_ } _%>
<%_ if (fieldsContainInstant) { _%>
import java.time.temporal.ChronoUnit
<%_ } _%>
<%_ if (fieldsContainUUID || primaryKey.typeString || otherEntityPrimaryKeyTypesIncludesUUID) { _%>
import java.util.UUID
<%_ } _%>
<%_ if (!embedded && primaryKey.hasLong) { _%>
import java.util.Random
import java.util.concurrent.atomic.AtomicLong
<%_ } _%>
import java.util.stream.Stream

import org.assertj.core.api.Assertions.assertThat
import org.hamcrest.Matchers.hasItem
<%_ if (reactive) { _%>
import org.hamcrest.Matchers.`is`
<%_ } _%>
<%_ if (testsNeedCsrf) { _%>
    <%_ if (reactive) { _%>
import org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers.csrf
    <%_ } else { _%>
import org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.csrf
    <%_ } _%>
<%_ } _%>
<%_ if (searchEngineElasticsearch || implementsEagerLoadApis) { _%>
import org.mockito.ArgumentMatchers.*
import org.mockito.Mockito.*
<%_ } _%>
<%_ if (!reactive) { _%>
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.*
<%_ } _%>

<%_ if (searchEngineElasticsearch) { _%>
import org.awaitility.Awaitility.await
<%_ } _%>

<%_ for (const field of fields.filter(field => !field.transient)) { if (field.fieldIsEnum) { _%>
import <%= packageName %>.domain.enumeration.<%= field.fieldType %>
<%_ } } _%>

/**
 * Integration tests for the [<%= entityClass %>Resource] REST controller.
 */
@IntegrationTest
<%_ if (implementsEagerLoadApis) { _%>
@Extensions(
    ExtendWith(MockitoExtension::class)
)
<%_ } _%>
<%_ if (reactive) { _%>
@AutoConfigureWebTestClient
<%_ } else { _%>
@AutoConfigureMockMvc
<%_ } _%>
@WithMockUser
class <%= entityClass %>ResourceIT {
    @Autowired
    private lateinit var <%= entityInstance %>Repository: <%= entityClass %>Repository
    <%_ if (isUsingMapsId&& ( !dtoMapstruct && serviceNo)) { _%>
    @Autowired
    private lateinit var <%= mapsIdRepoInstance %>: <%=mapsIdEntity%>Repository
    <%_ } _%>
    <%_ if (saveUserSnapshot) { _%>

    @Autowired
    private lateinit var userRepository: UserRepository
    <%_ } _%>
    <%_ if (implementsEagerLoadApis) { _%>

    @Mock
    private lateinit var <%= entityInstance %>RepositoryMock: <%= entityClass %>Repository
    <%_ } _%>
    <%_ if (dtoMapstruct) { _%>

    @Autowired
    private lateinit var <%= entityInstance %>Mapper: <%= entityClass %>Mapper
    <%_ } if (!serviceNo) { _%>
    <%_ if (implementsEagerLoadApis) { _%>

    @Mock
    private lateinit var <%= entityInstance %>ServiceMock: <%= entityClass %>Service
    <%_ } _%>
    <%_ } if (searchEngineElasticsearch) { _%>
    @Autowired
    private lateinit var <%= entityInstance %>SearchRepository: <%= entityClass %>SearchRepository
    <%_ } _%>

    <%_ if (!reactive) { _%>
    @Autowired
    private lateinit var jacksonMessageConverter: MappingJackson2HttpMessageConverter

    @Autowired
    private lateinit var pageableArgumentResolver: PageableHandlerMethodArgumentResolver

    @Autowired
    private lateinit var validator: Validator
    <%_ } _%>

    <%_ if (databaseTypeSql) { _%>

    @Autowired
    private lateinit var em: EntityManager
    <%_ } _%>

    <%_ if (reactive) { _%>

    @Autowired
    private lateinit var webTestClient: WebTestClient
    <%_ } else { _%>

    @Autowired
    private lateinit var rest<%= entityClass %>MockMvc: MockMvc
    <%_ } _%>

    private lateinit var <%= persistInstance %>: <%= persistClass %>

    <%_ if (databaseTypeSql && reactive) { _%>
    @AfterEach
    fun cleanup() {
        deleteEntities(em)
    }

    <%_ } _%>

    <%_ if (searchEngineElasticsearch) { _%>
    @AfterEach
    fun cleanupElasticSearchRepository() {
        <%= entityInstance %>SearchRepository.deleteAll()<%= callBlock %>
        assertThat(<%= entityInstance %>SearchRepository.count()<%= callBlock %>).isEqualTo(0)
    }

    <%_ } _%>
    <%_ if (reactive && testsNeedCsrf) { _%>
    @BeforeEach
    fun setupCsrf() {
        webTestClient = webTestClient.mutateWith(csrf())
    }

    <%_ } _%>

    @BeforeEach
    fun initTest() {
        <%_ if (databaseTypeMongodb || databaseTypeCouchbase || databaseTypeCassandra || databaseTypeNeo4j) { _%>
        <%= entityInstance %>Repository.deleteAll()<%= callBlock %>
        <%_ } _%>
        <%_ if (databaseTypeSql && reactive) {  _%>
        deleteEntities(em)
        <%_ } _%>
        <%= persistInstance %> = createEntity(<% if (databaseTypeSql) { %>em<% } %>)
    }
<%_ if (!readOnly) { _%>

    @Test<%= transactionalAnnotation %>
    @Throws(Exception::class)
    fun create<%= entityClass %>() {
        val databaseSizeBeforeCreate = <%= entityInstance %>Repository.findAll()<%= callListBlock %>.size
        <%_ if (searchEngineElasticsearch) { _%>
        val searchDatabaseSizeBefore = IterableUtil.sizeOf(<%= entityInstance %>SearchRepository.findAll()<%= callListBlock %>)
        <%_ } _%>
        <%_
          // overwrite the id field again with null
          // the create method here is supposed to be used for other tests as well,
          // which may expect an id to be set (at least in the reactive stack)
          if (reactive && databaseTypeSql && primaryKey.typeUUID && !isUsingMapsId) { _%>
            <%= persistInstance %>.<%= primaryKey.name %> = null
        <%_ } _%>
        // Create the <%= entityClass %>
        <%_ if (dtoMapstruct) { _%>
        val <%= dtoInstance %> = <%= entityInstance %>Mapper.toDto(<%= persistInstance %>)
        <%_ } _%>
        <%_ if (reactive) { _%>
        webTestClient.post().uri(ENTITY_API_URL)
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(convertObjectToJsonBytes(<%= restInstance %>))
            .exchange()
            .expectStatus().isCreated
        <%_ } else { _%>
        rest<%= entityClass %>MockMvc.perform(
            post(ENTITY_API_URL)<% if (testsNeedCsrf) { %>.with(csrf())<% }%>
                .contentType(MediaType.APPLICATION_JSON)
                .content(convertObjectToJsonBytes(<%= restInstance %>))
        ).andExpect(status().isCreated)
        <%_ } _%>

        // Validate the <%= entityClass %> in the database
        <%_ if (databaseTypeCouchbase) { _%>
        SecurityContextHolder.setContext(TestSecurityContextHolder.getContext())
        <%_ } _%>
        val <%= entityInstance %>List = <%= entityInstance %>Repository.findAll()<%= callListBlock %>
        assertThat(<%= entityInstance %>List).hasSize(databaseSizeBeforeCreate + 1)
        <%_ if (searchEngineElasticsearch) { _%>
        await().atMost(5, TimeUnit.SECONDS).untilAsserted {
            val searchDatabaseSizeAfter = IterableUtil.sizeOf(<%= entityInstance %>SearchRepository.findAll()<%= callListBlock %>)
            assertThat(searchDatabaseSizeAfter).isEqualTo(searchDatabaseSizeBefore + 1)
        }
        <%_ } _%>
        val test<%= entityClass %> = <%= entityInstance %>List[<%= entityInstance %>List.size - 1]

        <%_ for (field of fieldsToTest) {
                if (field.fieldTypeZonedDateTime) { _%>
        assertThat(test<%= entityClass %>.<%=field.fieldName%>).isEqualTo(<%='DEFAULT_' + field.fieldNameUnderscored.toUpperCase()%>)
        <%_ } else if ((field.fieldTypeBinary) && !field.blobContentTypeText) { _%>
        assertThat(test<%= entityClass %>.<%=field.fieldName%>).isEqualTo(<%='DEFAULT_' + field.fieldNameUnderscored.toUpperCase()%>)
        assertThat(test<%= entityClass %>.<%=field.fieldName%>ContentType).isEqualTo(<%='DEFAULT_' + field.fieldNameUnderscored.toUpperCase()%>_CONTENT_TYPE)
        <%_ } else if (field.fieldTypeBigDecimal) { _%>
        assertThat(test<%= entityClass %>.<%=field.fieldName%>?.stripTrailingZeros()).isEqualTo(<%='DEFAULT_' + field.fieldNameUnderscored.toUpperCase()%>.stripTrailingZeros())
        <%_ } else { _%>
        assertThat(test<%= entityClass %>.<%=field.fieldName%>).isEqualTo(<%='DEFAULT_' + field.fieldNameUnderscored.toUpperCase()%>)
        <%_ }} _%>
        <%_ if (isUsingMapsId) { _%>

        // Validate the id for MapsId, the ids must be same
        assertThat(test<%= entityClass %>.<%= primaryKey.name %>).isEqualTo(<%_ if (dtoMapstruct) { _%><%= dtoInstance %><%_ } else { _%>test<%= entityClass %><%_ } _%>.<%= mapsIdEntityInstance %>?.<%= primaryKey.name %>)
        <%_ } _%>
    }

    @Test<%= transactionalAnnotation %>
    @Throws(Exception::class)
    fun create<%= entityClass %>WithExistingId() {
        // Create the <%= entityClass %> with an existing ID
        <%_ if (primaryKey.typeUUID && databaseTypeSql) { _%>
        <%= entityInstance %>Repository.<%= saveMethod %>(<%= persistInstance %>)<%= callBlock %>
        <%_ } else { _%>
        <%= persistInstance %>.<%= primaryKey.name %> = <% if (primaryKey.typeUUID) { %>UUID.randomUUID()<% } else if (primaryKey.typeLong) { %>1L<% } else { %>"existing_id"<% } %>
        <%_ } _%>
        <%_ if (dtoMapstruct) { _%>
        val <%= dtoInstance %> = <%= entityInstance %>Mapper.toDto(<%= persistInstance %>)
        <%_ } _%>

        val databaseSizeBeforeCreate = <%= entityInstance %>Repository.findAll()<%= callListBlock %>.size
        <%_ if (searchEngineElasticsearch) { _%>
        val searchDatabaseSizeBefore = IterableUtil.sizeOf(<%= entityInstance %>SearchRepository.findAll()<%= callListBlock %>)
        <%_ } _%>
        // An entity with an existing ID cannot be created, so this API call must fail
        <%_ if (reactive) { _%>
        webTestClient.post().uri(ENTITY_API_URL)
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(convertObjectToJsonBytes(<%= restInstance %>))
            .exchange()
            .expectStatus().isBadRequest
        <%_ } else { _%>
        rest<%= entityClass %>MockMvc.perform(
            post(ENTITY_API_URL)<% if (testsNeedCsrf) { %>.with(csrf())<% }%>
                .contentType(MediaType.APPLICATION_JSON)
                .content(convertObjectToJsonBytes(<%= restInstance %>))
        ).andExpect(status().isBadRequest)
        <%_ } _%>

        // Validate the <%= entityClass %> in the database
        <%_ if (databaseTypeCouchbase) { _%>
        SecurityContextHolder.setContext(TestSecurityContextHolder.getContext())
        <%_ } _%>
        val <%= entityInstance %>List = <%= entityInstance %>Repository.findAll()<%= callListBlock %>
        assertThat(<%= entityInstance %>List).hasSize(databaseSizeBeforeCreate)
        <%_ if (searchEngineElasticsearch) { _%>
        val searchDatabaseSizeAfter = IterableUtil.sizeOf(<%= entityInstance %>SearchRepository.findAll()<%= callListBlock %>)
        assertThat(searchDatabaseSizeAfter).isEqualTo(searchDatabaseSizeBefore)
        <%_ } _%>
    }

    <%_ if (databaseTypeSql && isUsingMapsId) { _%>
    @Test<%= transactionalAnnotation %>
    @Throws(Exception::class)
    fun update<%= entityClass %>MapsIdAssociationWithNewId() {
        // Initialize the database
        <%= entityInstance %>Repository.<%= saveMethod %>(<%= persistInstance %>)<%= callBlock %>
        <%_ const alreadyGeneratedEntities = []; _%>
        val databaseSizeBeforeCreate = <%= entityInstance %>Repository.findAll()<%= callListBlock %>.size
        <%_ if (searchEngineElasticsearch) { _%>
        val searchDatabaseSizeBefore = IterableUtil.sizeOf(<%= entityInstance %>SearchRepository.findAll()<%= callListBlock %>)
        <%_ } _%>
        <%_ for (relationship of relationships) {
            const relationshipValidate = relationship.relationshipValidate;
            const otherEntityName = relationship.otherEntityName;
            const otherEntityNameCapitalized = relationship.otherEntityNameCapitalized;
            const mapsIdUse = relationship.id;
            if (mapsIdUse) { _%>
        // Add a new parent entity
                <%_ if (alreadyGeneratedEntities.indexOf(otherEntityName) == -1) { _%>
        val <%= otherEntityName %> = <%= otherEntityNameCapitalized %>ResourceIT.create<% if (otherEntityName !== 'user') { _%>Updated<%_ } %>Entity(<% if (databaseTypeSql) { %>em<% } %>)
                <%_   if (databaseTypeSql && !reactive) { _%>
        em.persist(<%= otherEntityName %>)
        em.flush()
                <%_ } _%>
                <%_ } _%>
        <%_ alreadyGeneratedEntities.push(otherEntityName) _%>
        <%_ } break; } _%>

        // Load the <%= entityInstance %>
        val updated<%= persistClass %> = <%= entityInstance %>Repository.findById(<%= persistInstance %>.<%= primaryKey.name %>)<%= reactive ? '.block()' : '.get()' %>
        assertThat(updated<%= persistClass %>).isNotNull<% if (databaseTypeSql && !reactive) { %>
        // Disconnect from session so that the updates on updated<%= persistClass %> are not directly saved in db
        em.detach(updated<%= persistClass %>)<% } %>

        // Update the <%= mapsIdEntity %> with new association value
        updated<%= persistClass %>.<%= mapsIdEntityInstance %> = <%= alreadyGeneratedEntities.pop() %>
        <%_ if (dtoMapstruct) { _%>
        val updated<%= dtoClass %> = <%= entityInstance %>Mapper.toDto(updated<%= persistClass %>)
        assertThat(updated<%= dtoClass %>).isNotNull
        <%_ } _%>

        // Update the entity
        <%_ if (reactive) { _%>
        webTestClient.put().uri(ENTITY_API_URL_ID, <%_ if (dtoMapstruct) { _%>updated<%= dtoClass %> <%_ } else { _%> updated<%= persistClass %> <%_ } _%>.<%= primaryKey.name %>)
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(convertObjectToJsonBytes(<%_ if (dtoMapstruct) { _%>updated<%= dtoClass %> <%_ } else { _%> updated<%= persistClass %> <%_ } _%>))
            .exchange()
            .expectStatus().isOk
        <%_ } else { _%>
        rest<%= entityClass %>MockMvc.perform(put(ENTITY_API_URL_ID, <%_ if (dtoMapstruct) { _%>updated<%= dtoClass %> <%_ } else { _%> updated<%= persistClass %> <%_ } _%>.<%= primaryKey.name %>)<% if (testsNeedCsrf) { %>.with(csrf())<% }%>
            .contentType(MediaType.APPLICATION_JSON)
            .content(convertObjectToJsonBytes(<%_ if (dtoMapstruct) { _%>updated<%= dtoClass %> <%_ } else { _%> updated<%= persistClass %> <%_ } _%>)))
            .andExpect(status().isOk)
        <%_ } _%>

        // Validate the <%= entityClass %> in the database
        <%_ if (databaseTypeCouchbase) { _%>
        SecurityContextHolder.setContext(TestSecurityContextHolder.getContext())
        <%_ } _%>
        val <%= entityInstance %>List = <%= entityInstance %>Repository.findAll()<%= callListBlock %>
        assertThat(<%= entityInstance %>List).hasSize(databaseSizeBeforeCreate)
        val test<%= entityClass %> = <%= entityInstance %>List[<%= entityInstance %>List.size - 1]

        // Validate the id for MapsId, the ids must be same
        // Uncomment the following line for assertion. However, please note that there is a known issue and uncommenting will fail the test.
        // Please look at https://github.com/jhipster/generator-jhipster/issues/9100. You can modify this test as necessary.
        // assertThat(test<%= entityClass %>.<%= primaryKey.name %>).isEqualTo(test<%= entityClass %>.<%= mapsIdEntityInstance %>?.<%= primaryKey.name %>)
        <%_ if (searchEngineElasticsearch) { _%>
        val searchDatabaseSizeAfter = IterableUtil.sizeOf(<%= entityInstance %>SearchRepository.findAll()<%= callListBlock %>)
        assertThat(searchDatabaseSizeAfter).isEqualTo(searchDatabaseSizeBefore)
        <%_ } _%>
    }
<%_ } _%>
<%_ for (field of fieldsToTest) { _%>
    <%_ if (field.fieldValidate) {
    let required = false;
    if (field.fieldType !== 'byte[]' && field.fieldValidate&& field.fieldValidateRules.includes('required')) {
        required = true;
    } _%>
    <%_ if (required) { _%>
    @Test<%= transactionalAnnotation %>
    @Throws(Exception::class)
    fun check<%= field.fieldInJavaBeanMethod %>IsRequired() {
        val databaseSizeBeforeTest = <%= entityInstance %>Repository.findAll()<%= callListBlock %>.size
        <%_ if (searchEngineElasticsearch) { _%>
        val searchDatabaseSizeBefore = IterableUtil.sizeOf(<%= entityInstance %>SearchRepository.findAll()<%= callListBlock %>)
        <%_ } _%>
        // set the field null
        <%= persistInstance %>.<%= field.fieldName %> = null

        // Create the <%= entityClass %>, which fails.<% if (dtoMapstruct) { %>
        val <%= dtoInstance %> = <%= entityInstance %>Mapper.toDto(<%= persistInstance %>)<% } %>

        <%_ if (reactive) { _%>
        webTestClient.post().uri(ENTITY_API_URL)
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(convertObjectToJsonBytes(<%= restInstance %>))
            .exchange()
            .expectStatus().isBadRequest
        <%_ } else { _%>
        rest<%= entityClass %>MockMvc.perform(
            post(ENTITY_API_URL)<% if (testsNeedCsrf) { %>.with(csrf())<% }%>
                .contentType(MediaType.APPLICATION_JSON)
                .content(convertObjectToJsonBytes(<%= restInstance %>))
        ).andExpect(status().isBadRequest)
        <%_ } _%>

        <%_ if (databaseTypeCouchbase) { _%>
        SecurityContextHolder.setContext(TestSecurityContextHolder.getContext());
        <%_ } _%>
        val <%= entityInstance %>List = <%= entityInstance %>Repository.findAll()<%= callListBlock %>
        assertThat(<%= entityInstance %>List).hasSize(databaseSizeBeforeTest)
        <%_ if (searchEngineElasticsearch) { _%>
        val searchDatabaseSizeAfter = IterableUtil.sizeOf(<%= entityInstance %>SearchRepository.findAll()<%= callListBlock %>)
        assertThat(searchDatabaseSizeAfter).isEqualTo(searchDatabaseSizeBefore)
        <%_ } _%>
    }
        <%_ } _%>
    <%_ } _%>
  <%_ } _%>
<%_ } _%>
<%_ if (reactive && paginationNo) { _%>

    @Test<%= transactionalAnnotation %>
    fun getAll<%= entityClassPlural %>AsStream() {
        // Initialize the database
        <%_ if (!primaryKey.derived) { _%>
            <%_ for (field of primaryKey.fields.filter(f => !f.autoGenerateByRepository)) { _%>
                <%= persistInstance %>.<%= field.fieldName %> = <%- getJavaValueGeneratorForType(field.fieldType) %>
            <%_ } _%>
        <%_ } _%>
        <%= entityInstance %>Repository.save(<%= persistInstance %>)<%= callBlock %>

        val <%= entityInstance %>List = webTestClient.get().uri(ENTITY_API_URL)
            .accept(MediaType.APPLICATION_NDJSON)
            .exchange()
            .expectStatus().isOk
            .expectHeader().contentTypeCompatibleWith(MediaType.APPLICATION_NDJSON)
            .returnResult(<%= restClass %>::class.java)
            .responseBody
            <%_ if (dtoMapstruct) { _%>
            .map(<%= entityInstance %>Mapper::toEntity)
            <%_ } _%>
            .filter(<%= persistInstance %>::equals)
            .collectList()
            .block(Duration.ofSeconds(5))

        assertThat(<%= entityInstance %>List).isNotNull
        assertThat(<%= entityInstance %>List).hasSize(1)
        val test<%= entityClass %> = <%= entityInstance %>List[0]
        <%_ for (field of fieldsToTest) {
            if (field.fieldTypeZonedDateTime) { _%>
        assertThat(test<%= entityClass %>.<%= field.fieldName %>).isEqualTo(<%= 'DEFAULT_' + field.fieldNameUnderscored.toUpperCase() %>)
            <%_ } else if ((field.fieldTypeBinary) && !field.blobContentTypeText) { _%>
        assertThat(test<%= entityClass %>.<%= field.fieldName %>).isEqualTo(<%= 'DEFAULT_' + field.fieldNameUnderscored.toUpperCase() %>)
        assertThat(test<%= entityClass %>.<%= field.fieldName %>ContentType).isEqualTo(<%= 'DEFAULT_' + field.fieldNameUnderscored.toUpperCase() %>_CONTENT_TYPE)
            <%_ } else if (field.fieldTypeBigDecimal) { _%>
        assertThat(test<%= entityClass %>.<%= field.fieldName %>?.stripTrailingZeros()).isEqualTo(<%= 'DEFAULT_' + field.fieldNameUnderscored.toUpperCase() %>.stripTrailingZeros())
            <%_ } else { _%>
        assertThat(test<%= entityClass %>.<%= field.fieldName %>).isEqualTo(<%= 'DEFAULT_' + field.fieldNameUnderscored.toUpperCase() %>)
            <%_ }
        } _%>
    }
    <%_ } _%>

    @Test<%= transactionalAnnotation %>
    <% if (!reactive) { %>@Throws(Exception::class)<% } %>
    fun getAll<%= entityClassPlural %>() {
        // Initialize the database
        <%_ if (!primaryKey.derived) { _%>
            <%_ for (field of primaryKey.fields.filter(f => !f.autoGenerateByRepository)) { _%>
                <%= persistInstance %>.<%= field.fieldName %> = <%- getJavaValueGeneratorForType(field.fieldType) %>
            <%_ } _%>
        <%_ } _%>
        <%= entityInstance %>Repository.<%= saveMethod %>(<%= persistInstance %>)<%= callBlock %>

        // Get all the <%= entityInstance %>List
        <%_ if (reactive) { _%>
        webTestClient.get().uri(ENTITY_API_URL + "?sort=<%= primaryKey.name %>,desc")
            .accept(MediaType.APPLICATION_JSON)
            .exchange()
            .expectStatus().isOk
            .expectHeader().contentType(MediaType.APPLICATION_JSON)
            .expectBody()
        <%_ } else { _%>
        rest<%= entityClass %>MockMvc.perform(get(ENTITY_API_URL<% if (!databaseTypeCassandra) { %>+ "?sort=<%= primaryKey.name %>,desc"<% } %>))
            .andExpect(status().isOk)
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
        <%_ } _%>
        <%_ if (['sql', 'mongodb', 'couchbase', 'cassandra'].includes(databaseType)) {
        _%>
            <%= !reactive ? '.andExpect(' : '.' %>jsonPath("$.[*].<%= primaryKey.name %>").value(hasItem(<%= idValue %>))<%= !reactive ? ')' : '' %><%_ } _%><% for (field of fieldsToTest) { %>
            <%_ if ((field.fieldTypeBinary) && !field.blobContentTypeText) { _%>
            <%= !reactive ? '.andExpect(' : '.' %>jsonPath("$.[*].<%= field.fieldName %>ContentType").value(hasItem(<%= 'DEFAULT_' + field.fieldNameUnderscored.toUpperCase() %>_CONTENT_TYPE))<%= !reactive ? ')' : '' %>
            <%_ } _%>
            <%= !reactive ? '.andExpect(' : '.' %>jsonPath("$.[*].<%= field.fieldName %>").value(hasItem(<%
                if ((field.fieldTypeBinary) && !field.blobContentTypeText) { %>Base64Utils.encodeToString(<% } else
                    if (field.fieldTypeZonedDateTime) { %>sameInstant(<% } else
                        if (field.fieldTypeBigDecimal) { %>sameNumber(<% } %><%= 'DEFAULT_' + field.fieldNameUnderscored.toUpperCase() %><%
                    if ((field.fieldTypeBinary) && !field.blobContentTypeText) { %><%
                        if (databaseTypeCassandra) { %>.array()<% } %>)<% } else
                            if (field.fieldTypeInteger) { %><% } else
                                if (field.fieldTypeLong) { %>?.toInt()<% } else
                                    if (field.fieldTypeFloat || field.fieldTypeDouble) { %>.toDouble()<% } else
                                        if (field.fieldTypeBigDecimal) { %>)<% } else
                                            if (field.fieldTypeBoolean) { %><% } else
                                                if (field.fieldTypeZonedDateTime) { %>)<% } else
                                                    if (!field.fieldTypeString) { %>.toString()<% } %>))<%= !reactive ? ')' : '' %><%_ } _%>
    }
    <% if (implementsEagerLoadApis && !databaseTypeNeo4j && !databaseTypeCouchbase) { %>
    @Suppress("unchecked")
    <% if (!reactive) { %>@Throws(Exception::class)<% } %>
    fun getAll<%= entityClassPlural %>WithEagerRelationshipsIsEnabled() {
        <%_ if (!serviceNo) { _%>
        `when`(<%= entityInstance %>ServiceMock.findAllWithEagerRelationships(any())).thenReturn(<% if (reactive) { %>Flux.empty()<% } else { %>PageImpl(mutableListOf())<% }%>)
        <%_ } else { _%>
        `when`(<%= entityInstance %>RepositoryMock.findAllWithEagerRelationships(any())).thenReturn(<% if (reactive) { %>Flux.empty()<% } else { %>PageImpl(mutableListOf())<% }%>)
        <%_ } _%>

        <%_ if (reactive) { _%>
        webTestClient.get().uri(ENTITY_API_URL + "?eagerload=false")
            .exchange()
            .expectStatus().isOk
        <%_ } else { _%>
        rest<%= entityClass %>MockMvc.perform(get(ENTITY_API_URL + "?eagerload=false"))
            .andExpect(status().isOk)
        <%_ } _%>

        verify(<%= entityInstance %>RepositoryMock, times(1)).findAll<% if (reactive) { %>WithEagerRelationships(any()<% } else { %>(any(Pageable::class.java)<% } %>)
    }

    @Suppress("unchecked")
    <% if (!reactive) { %>@Throws(Exception::class)<% } %>
    fun getAll<%= entityClassPlural %>WithEagerRelationshipsIsNotEnabled() {
        <%_ if (!serviceNo) { _%>
        `when`(<%= entityInstance %>ServiceMock.findAllWithEagerRelationships(any())).thenReturn(<% if (reactive) { %>Flux.empty()<% } else { %>PageImpl(mutableListOf())<% }%>)
        <%_ } else { _%>
        `when`(<%= entityInstance %>RepositoryMock.findAllWithEagerRelationships(any())).thenReturn(<% if (reactive) { %>Flux.empty()<% } else { %>PageImpl(mutableListOf())<% }%>)
        <%_ } _%>

        <%_ if (reactive) { _%>
        webTestClient.get().uri(ENTITY_API_URL + "?eagerload=true")
            .exchange()
            .expectStatus().isOk
        <%_ } else { _%>
        rest<%= entityClass %>MockMvc.perform(get(ENTITY_API_URL + "?eagerload=true"))
            .andExpect(status().isOk)
        <%_ } _%>

        <%_ if (!serviceNo) { _%>
        verify(<%= entityInstance %>ServiceMock, times(1)).findAllWithEagerRelationships(any())
        <%_ } else { _%>
        verify(<%= entityInstance %>RepositoryMock, times(1)).findAllWithEagerRelationships(any())
        <%_ } _%>
    }
    <%_ } _%>

    @Test<%= transactionalAnnotation %>
    <% if (!reactive) { %>@Throws(Exception::class)<% } %>
    fun get<%= entityClass %>() {
        // Initialize the database
        <%_ if (!primaryKey.derived) { _%>
            <%_ for (field of primaryKey.fields.filter(f => !f.autoGenerateByRepository)) { _%>
                <%= persistInstance %>.<%= field.fieldName %> = <%- getJavaValueGeneratorForType(field.fieldType) %>
            <%_ } _%>
        <%_ } _%>
        <%= entityInstance %>Repository.<%= saveMethod %>(<%= persistInstance %>)<%= callBlock %>

        val id = <%= persistInstance %>.<%= primaryKey.name %>
        assertNotNull(id)

        // Get the <%= entityInstance %>
        <%_ if (reactive) { _%>
        webTestClient.get().uri(ENTITY_API_URL_ID, <%= persistInstance %>.<%= primaryKey.name %>)
            .accept(MediaType.APPLICATION_JSON)
            .exchange()
            .expectStatus().isOk
            .expectHeader().contentType(MediaType.APPLICATION_JSON)
            .expectBody()
        <%_ } else { _%>
        rest<%= entityClass %>MockMvc.perform(get(ENTITY_API_URL_ID, <%= persistInstance %>.<%= primaryKey.name %>))
            .andExpect(status().isOk)
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
        <%_ } _%>
        <%_ if (['sql', 'mongodb', 'couchbase', 'cassandra'].includes(databaseType)) { _%>
            <%= !reactive ? '.andExpect(' : '.' %>jsonPath("$.<%= primaryKey.name %>").value(<%= reactive ? '`is`(' : '' %><%= idValue %>))<%_ } _%><% for (field of fieldsToTest) { %>
            <%_ if ((field.fieldTypeBinary) && !field.blobContentTypeText) { _%>
            <%= !reactive ? '.andExpect(' : '.' %>jsonPath("$.<%= field.fieldName %>ContentType").value(<%= reactive ? '`is`(' : '' %><%= 'DEFAULT_' + field.fieldNameUnderscored.toUpperCase() %>_CONTENT_TYPE))
            <%_ } _%>
            <%= !reactive ? '.andExpect(' : '.' %>jsonPath("$.<%= field.fieldName %>").value(<%= reactive ? '`is`(' : '' %><%
                if ((field.fieldTypeBinary) && !field.blobContentTypeText) { %>Base64Utils.encodeToString(<% } else
                    if (field.fieldTypeZonedDateTime) { %>sameInstant(<% } else
                        if(field.fieldTypeBigDecimal) { %>sameNumber(<% } %><%= 'DEFAULT_' + field.fieldNameUnderscored.toUpperCase() %><%
                    if ((field.fieldTypeBinary) && !field.blobContentTypeText) { %><%
                        if (databaseTypeCassandra) { %>.array()<% } %>)<% } else
                            if (field.fieldTypeInteger) { %><% } else
                                if (field.fieldTypeLong) { %>?.toInt()<% } else
                                    if (field.fieldTypeFloat || field.fieldTypeDouble) { %>.toDouble()<% } else
                                        if (field.fieldTypeBigDecimal) { %>)<% } else
                                            if (field.fieldTypeBoolean) { %><% } else
                                                if (field.fieldTypeZonedDateTime) { %>)<% } else
                                                    if (!field.fieldTypeString) { %>.toString()<% } %>))<%_ } _%>
    }
<%_ if (jpaMetamodelFiltering) {  %>
    @Test<%= transactionalAnnotation %>
    <% if (!reactive) { %>@Throws(Exception::class)<% } %>
    fun get<%= entityClassPlural %>ByIdFiltering()  {
      // Initialize the database
      <%= entityInstance %>Repository.<%= saveMethod %>(<%= persistInstance %>)<%= callBlock %>
      val id = <%= persistInstance %>.<%= primaryKey.name %>

      default<%= entityClass %>ShouldBeFound("<%= primaryKey.name %>.equals=$id")
      default<%= entityClass %>ShouldNotBeFound("<%= primaryKey.name %>.notEquals=$id")
      <%_ if (primaryKey.typeLong) { _%>
      default<%= entityClass %>ShouldBeFound("<%= primaryKey.name %>.greaterThanOrEqual=$id")
      default<%= entityClass %>ShouldNotBeFound("<%= primaryKey.name %>.greaterThan=$id")

      default<%= entityClass %>ShouldBeFound("<%= primaryKey.name %>.lessThanOrEqual=$id")
      default<%= entityClass %>ShouldNotBeFound("<%= primaryKey.name %>.lessThan=$id")
      <%_ } _%>
    }
    <%_ fieldsToTest.forEach((searchBy) => { /* we can't filter by all the fields. */ _%>
        <%_ if (isFilterableType(searchBy.fieldType)) { _%>
    @Test<%= transactionalAnnotation %>
    <% if (!reactive) { %>@Throws(Exception::class)<% } %>
    fun getAll<%= entityClassPlural %>By<%= searchBy.fieldInJavaBeanMethod %>IsEqualToSomething() {
        // Initialize the database
        <%= entityInstance %>Repository.<%= saveMethod %>(<%= persistInstance %>)<%= callBlock %>

        // Get all the <%= entityInstance %>List where <%= searchBy.fieldName %> equals to <%='DEFAULT_' + searchBy.fieldNameUnderscored.toUpperCase()%>
        default<%= entityClass %>ShouldBeFound("<%= searchBy.fieldName %>.equals=$<%='DEFAULT_' + searchBy.fieldNameUnderscored.toUpperCase()%>")

        // Get all the <%= entityInstance %>List where <%= searchBy.fieldName %> equals to <%='UPDATED_' + searchBy.fieldNameUnderscored.toUpperCase()%>
        default<%= entityClass %>ShouldNotBeFound("<%= searchBy.fieldName %>.equals=$<%='UPDATED_' + searchBy.fieldNameUnderscored.toUpperCase()%>")
    }

    @Test<%= transactionalAnnotation %>
    <% if (!reactive) { %>@Throws(Exception::class)<% } %>
    fun getAll<%= entityClassPlural %>By<%= searchBy.fieldInJavaBeanMethod %>IsInShouldWork() {
        // Initialize the database
        <%= entityInstance %>Repository.<%= saveMethod %>(<%= persistInstance %>)<%= callBlock %>

        // Get all the <%= entityInstance %>List where <%= searchBy.fieldName %> in <%='DEFAULT_' + searchBy.fieldNameUnderscored.toUpperCase()%> or <%='UPDATED_' + searchBy.fieldNameUnderscored.toUpperCase()%>
        default<%= entityClass %>ShouldBeFound("<%= searchBy.fieldName %>.in=$<%='DEFAULT_' + searchBy.fieldNameUnderscored.toUpperCase()%>,$<%='UPDATED_' + searchBy.fieldNameUnderscored.toUpperCase()%>")

        // Get all the <%= entityInstance %>List where <%= searchBy.fieldName %> equals to <%='UPDATED_' + searchBy.fieldNameUnderscored.toUpperCase()%>
        default<%= entityClass %>ShouldNotBeFound("<%= searchBy.fieldName %>.in=$<%='UPDATED_' + searchBy.fieldNameUnderscored.toUpperCase()%>")
    }

    @Test<%= transactionalAnnotation %>
    <% if (!reactive) { %>@Throws(Exception::class)<% } %>
    fun getAll<%= entityClassPlural %>By<%= searchBy.fieldInJavaBeanMethod %>IsNullOrNotNull() {
        // Initialize the database
        <%= entityInstance %>Repository.<%= saveMethod %>(<%= persistInstance %>)<%= callBlock %>

        // Get all the <%= entityInstance %>List where <%= searchBy.fieldName %> is not null
        default<%= entityClass %>ShouldBeFound("<%= searchBy.fieldName %>.specified=true")

        // Get all the <%= entityInstance %>List where <%= searchBy.fieldName %> is null
        default<%= entityClass %>ShouldNotBeFound("<%= searchBy.fieldName %>.specified=false")
    }
        <%_ } _%>
        <%_ if (searchBy.fieldTypeString) { _%>
    @Test<%= transactionalAnnotation %>
    <% if (!reactive) { %>@Throws(Exception::class)<% } %>
    fun getAll<%= entityClassPlural %>By<%= searchBy.fieldInJavaBeanMethod %>ContainsSomething(){
        // Initialize the database
        <%= entityInstance %>Repository.<%= saveMethod %>(<%= persistInstance %>)<%= callBlock %>

        // Get all the <%= entityInstance %>List where <%= searchBy.fieldName %> contains <%='DEFAULT_' + searchBy.fieldNameUnderscored.toUpperCase()%>
        default<%= entityClass %>ShouldBeFound("<%= searchBy.fieldName %>.contains=$<%='DEFAULT_' + searchBy.fieldNameUnderscored.toUpperCase()%>")

        // Get all the <%= entityInstance %>List where <%= searchBy.fieldName %> contains <%='UPDATED_' + searchBy.fieldNameUnderscored.toUpperCase()%>
        default<%= entityClass %>ShouldNotBeFound("<%= searchBy.fieldName %>.contains=$<%='UPDATED_' + searchBy.fieldNameUnderscored.toUpperCase()%>")
    }

    @Test<%= transactionalAnnotation %>
    <% if (!reactive) { %>@Throws(Exception::class)<% } %>
    fun getAll<%= entityClassPlural %>By<%= searchBy.fieldInJavaBeanMethod %>NotContainsSomething() {
        // Initialize the database
        <%= entityInstance %>Repository.<%= saveMethod %>(<%= persistInstance %>)<%= callBlock %>

        // Get all the <%= entityInstance %>List where <%= searchBy.fieldName %> does not contain <%='DEFAULT_' + searchBy.fieldNameUnderscored.toUpperCase()%>
        default<%= entityClass %>ShouldNotBeFound("<%= searchBy.fieldName %>.doesNotContain=$<%='DEFAULT_' + searchBy.fieldNameUnderscored.toUpperCase()%>")

        // Get all the <%= entityInstance %>List where <%= searchBy.fieldName %> does not contain <%='UPDATED_' + searchBy.fieldNameUnderscored.toUpperCase()%>
        default<%= entityClass %>ShouldBeFound("<%= searchBy.fieldName %>.doesNotContain=$<%='UPDATED_' + searchBy.fieldNameUnderscored.toUpperCase()%>")
    }

<%_
            }
            // the range criterias
            if (['BigDecimal', 'Byte', 'Double', 'Duration', 'Float', 'Short',
                 'Integer', 'Long', 'LocalDate', 'ZonedDateTime'].includes(searchBy.fieldType)) {
              var valUpperCase = searchBy.fieldNameUnderscored.toUpperCase();
              var defaultValue = `DEFAULT_${valUpperCase}`;
              var biggerValue = `UPDATED_${valUpperCase}`;
              var smallerValue = `SMALLER_${valUpperCase}`;

              if (searchBy.fieldValidate && searchBy.fieldValidateRules.includes('max')) {
                  // if maximum is specified the updated variable is smaller than the default one!
                  if (searchBy.fieldTypeBigDecimal) {
                      biggerValue = `{${defaultValue}.add(BigDecimal.ONE)}`;
                  } else if (['Duration', 'LocalDate', 'ZonedDateTime'].includes(searchBy.fieldType)) {
                      biggerValue = `{${defaultValue}.plus(1, ChronoUnit.DAYS)}`;
                  } else {
                      biggerValue = `{${defaultValue} + 1}`;
                  }
              }
            _%>

    @Test<%= transactionalAnnotation %>
    <% if (!reactive) { %>@Throws(Exception::class)<% } %>
    fun getAll<%= entityClassPlural %>By<%= searchBy.fieldInJavaBeanMethod %>IsGreaterThanOrEqualToSomething() {
        // Initialize the database
        <%= entityInstance %>Repository.<%= saveMethod %>(<%= persistInstance %>)<%= callBlock %>

        // Get all the <%= entityInstance %>List where <%= searchBy.fieldName %> is greater than or equal to <%= defaultValue %>
        default<%= entityClass %>ShouldBeFound("<%= searchBy.fieldName %>.greaterThanOrEqual=$<%= defaultValue %>")

        // Get all the <%= entityInstance %>List where <%= searchBy.fieldName %> is greater than or equal to <%= biggerValue %>
        default<%= entityClass %>ShouldNotBeFound("<%= searchBy.fieldName %>.greaterThanOrEqual=$<%= biggerValue %>")
    }

    @Test<%= transactionalAnnotation %>
    <% if (!reactive) { %>@Throws(Exception::class)<% } %>
    fun getAll<%= entityClassPlural %>By<%= searchBy.fieldInJavaBeanMethod %>IsLessThanOrEqualToSomething() {
        // Initialize the database
        <%= entityInstance %>Repository.<%= saveMethod %>(<%= persistInstance %>)<%= callBlock %>

        // Get all the <%= entityInstance %>List where <%= searchBy.fieldName %> is less than or equal to <%= defaultValue %>
        default<%= entityClass %>ShouldBeFound("<%= searchBy.fieldName %>.lessThanOrEqual=$<%= defaultValue %>")

        // Get all the <%= entityInstance %>List where <%= searchBy.fieldName %> is less than or equal to <%= smallerValue %>
        default<%= entityClass %>ShouldNotBeFound("<%= searchBy.fieldName %>.lessThanOrEqual=$<%= smallerValue %>")
    }

    @Test<%= transactionalAnnotation %>
    <% if (!reactive) { %>@Throws(Exception::class)<% } %>
    fun getAll<%= entityClassPlural %>By<%= searchBy.fieldInJavaBeanMethod %>IsLessThanSomething() {
        // Initialize the database
        <%= entityInstance %>Repository.<%= saveMethod %>(<%= persistInstance %>)<%= callBlock %>

        // Get all the <%= entityInstance %>List where <%= searchBy.fieldName %> is less than <%= defaultValue %>
        default<%= entityClass %>ShouldNotBeFound("<%= searchBy.fieldName %>.lessThan=$<%= defaultValue %>")

        // Get all the <%= entityInstance %>List where <%= searchBy.fieldName %> is less than <%= biggerValue %>
        default<%= entityClass %>ShouldBeFound("<%= searchBy.fieldName %>.lessThan=$<%= biggerValue %>")
    }

    @Test<%= transactionalAnnotation %>
    <% if (!reactive) { %>@Throws(Exception::class)<% } %>
    fun getAll<%= entityClassPlural %>By<%= searchBy.fieldInJavaBeanMethod %>IsGreaterThanSomething() {
        // Initialize the database
        <%= entityInstance %>Repository.<%= saveMethod %>(<%= persistInstance %>)<%= callBlock %>

        // Get all the <%= entityInstance %>List where <%= searchBy.fieldName %> is greater than <%= defaultValue %>
        default<%= entityClass %>ShouldNotBeFound("<%= searchBy.fieldName %>.greaterThan=$<%= defaultValue %>")

        // Get all the <%= entityInstance %>List where <%= searchBy.fieldName %> is greater than <%= smallerValue %>
        default<%= entityClass %>ShouldBeFound("<%= searchBy.fieldName %>.greaterThan=$<%= smallerValue %>")
    }

<%_         } _%>
<%_     }); _%>
<%_ relationships.forEach((relationship) => { _%>

    @Test<%= transactionalAnnotation %>
    <% if (!reactive) { %>@Throws(Exception::class)<% } %>
    fun getAll<%= entityClassPlural %>By<%= relationship.relationshipNameCapitalized %>IsEqualToSomething() {
        <%_ if ((relationship.relationshipValidate && relationship.relationshipOneToOne) || relationship.id) { _%>
        // Get already existing entity
        val <%= relationship.relationshipFieldName %> = <%= persistInstance %>.<%= relationship.relationshipName %>
        <%_ } else { _%>
        <%_ if (databaseTypeSql && !reactive) { _%>
        var <%= relationship.relationshipFieldName %>: <%= asEntity(relationship.otherEntityNameCapitalized) %>
        if (findAll(em, <%= asEntity(relationship.otherEntityNameCapitalized) %>::class).isEmpty()) {
            <%= entityInstance %>Repository.saveAndFlush(<%= persistInstance %>)
            <%= relationship.relationshipFieldName %> = <%= createEntityPrefix %><%= relationship.otherEntityNameCapitalized %>ResourceIT.createEntity(em)
        } else {
            <%= relationship.relationshipFieldName %> = findAll(em, <%= asEntity(relationship.otherEntityNameCapitalized) %>::class)[0]
        }
        <%_ } else { _%>
        var <%= relationship.relationshipFieldName %> = <%= relationship.otherEntityNameCapitalized %>ResourceIT.createEntity(em)
        <%_ } _%>
        em.persist(<%= relationship.relationshipFieldName %>)
        em.flush()
            <%_ if (relationship.relationshipManyToMany || relationship.relationshipOneToMany) { _%>
        <%= persistInstance %>.add<%= relationship.relationshipNameCapitalized %>(<%= relationship.relationshipFieldName %>)
            <%_ } else { _%>
        <%= persistInstance %>.<%= relationship.relationshipName %> = <%= relationship.relationshipFieldName %>
                <%_ if (!relationship.ownerSide) { _%>
        <%= relationship.relationshipFieldName %>.<%= relationship.otherEntityRelationshipName %> = <%= persistInstance %>
                <%_ } _%>
            <%_ } _%>
        <%_ } _%>
        <%= entityInstance %>Repository.saveAndFlush(<%= persistInstance %>)
        val <%= relationship.relationshipFieldName %>Id = <%= relationship.relationshipFieldName %>?.<%= relationship.otherEntity.primaryKey.name %>

        // Get all the <%= entityInstance %>List where <%= relationship.relationshipFieldName %> equals to <%= relationship.relationshipFieldName %>Id
        default<%= entityClass %>ShouldBeFound("<%= relationship.relationshipFieldName %>Id.equals=$<%= relationship.relationshipFieldName %>Id")
        <%_
        const initInvalidPrimaryKey = {
            'String' : '"invalid-id"',
            'Long' : '(' + relationship.relationshipFieldName + 'Id?.plus(1))',
            'UUID' : 'UUID.randomUUID()'
        }[relationship.otherEntity.primaryKey.type];
        _%>

        // Get all the <%= entityInstance %>List where <%= relationship.relationshipFieldName %> equals to <%- initInvalidPrimaryKey %>
        default<%= entityClass %>ShouldNotBeFound("<%= relationship.relationshipFieldName %>Id.equals=${<%- initInvalidPrimaryKey %>}")

    }
<%_ }); _%>

    /**
     * Executes the search, and checks that the default entity is returned
     */
    <% if (reactive) { %>
    private fun default<%= entityClass %>ShouldBeFound(filter: String) {
        webTestClient.get().uri(ENTITY_API_URL + "?sort=<%= primaryKey.name %>,desc&$filter")
            .accept(MediaType.APPLICATION_JSON)
            .exchange()
            .expectStatus().isOk
            .expectHeader().contentType(MediaType.APPLICATION_JSON)
            .expectBody()
            .jsonPath("$.[*].<%= primaryKey.name %>").value(hasItem(<%= idValue %>))<% for (field of fieldsToTest) { %>
            <%_ if ((field.fieldTypeBinary) && !field.blobContentTypeText) { _%>
            .jsonPath("$.[*].<%= field.fieldName %>ContentType").value(hasItem(<%= 'DEFAULT_' + field.fieldNameUnderscored.toUpperCase() %>_CONTENT_TYPE))
            <%_ } _%>
            .jsonPath("$.[*].<%= field.fieldName %>").value(hasItem(<% if
                    ((field.fieldTypeBinary) && !field.blobContentTypeText) { %>Base64Utils.encodeToString(<% } else
                        if (field.fieldTypeZonedDateTime) { %>sameInstant(<% } else
                            if (field.fieldTypeBigDecimal) { %>sameNumber(<% } %><%= 'DEFAULT_' + field.fieldNameUnderscored.toUpperCase() %><%
                        if ((field.fieldTypeBinary) && !field.blobContentTypeText) { %><% if (databaseTypeCassandra) { %>.array()<% } %>)<% } else
                            if (field.fieldTypeInteger) { %><% } else
                                if (field.fieldTypeLong) { %>?.toInt()<% } else
                                    if (field.fieldTypeFloat) { %>?.toDouble()<% } else
                                        if (field.fieldTypeDouble) { %><% } else
                                            if (field.fieldTypeBigDecimal) { %>))<% } else
                                                if (field.fieldTypeBoolean) { %><% } else
                                                    if (field.fieldTypeZonedDateTime) { %>)<% } else
                                                        if (!field.fieldTypeString) { %>.toString()<% } %>)))<% }; %>

        // Check, that the count call also returns 1
        webTestClient.get().uri(ENTITY_API_URL + "/count?sort=<%= primaryKey.name %>,desc&$filter")
                .accept(MediaType.APPLICATION_JSON)
                .exchange()
                .expectStatus().isOk
                .expectHeader().contentType(MediaType.APPLICATION_JSON)
                .expectBody().json("1")
    }
    <% } else { %>
    @Throws(Exception::class)
    private fun default<%= entityClass %>ShouldBeFound(filter: String) {
        rest<%= entityClass %>MockMvc.perform(get(ENTITY_API_URL + "?sort=<%= primaryKey.name %>,desc&$filter"))
            .andExpect(status().isOk)
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
            <%_
            const primaryKeyConversion = {
                'Long' : '?.toInt()',
                'UUID' : '?.toString()'
            }[primaryKey.type] || '';
            _%>
            .andExpect(jsonPath("$.[*].<%= primaryKey.name %>").value(hasItem(<%= persistInstance %>.<%= primaryKey.name %><%= primaryKeyConversion %>)))<% fieldsToTest.forEach((field) => { %>
            <%_ if ((field.fieldTypeBinary) && !field.blobContentTypeText) { _%>
            .andExpect(jsonPath("$.[*].<%=field.fieldName%>ContentType").value(hasItem(<%='DEFAULT_' + field.fieldNameUnderscored.toUpperCase()%>_CONTENT_TYPE)))
            <%_ } _%>
            .andExpect(jsonPath("$.[*].<%=field.fieldName%>").value(hasItem(<%
                if ((field.fieldTypeBinary) && !field.blobContentTypeText) { %>Base64Utils.encodeToString(<% } else
                    if (field.fieldTypeZonedDateTime) { %>sameInstant(<% } else
                        if (field.fieldTypeBigDecimal) { %>sameNumber(<% } %><%='DEFAULT_' + field.fieldNameUnderscored.toUpperCase()%><%
                if ((field.fieldTypeBinary) && !field.blobContentTypeText) { %><%
                    if (databaseTypeCassandra) { %>.array()<% } %>)<% } else
                        if (field.fieldTypeInteger) { %><% } else
                            if (field.fieldTypeLong) { %>?.toInt()<% } else
                                if (field.fieldTypeFloat) { %>?.toDouble()<% } else
                                    if (field.fieldTypeDouble) { %><% } else
                                        if (field.fieldTypeBigDecimal) { %>)<% } else
                                            if (field.fieldTypeBoolean) { %><% } else
                                                if (field.fieldTypeZonedDateTime) { %>)<% } else
                                                        if (!field.fieldTypeString) { %>.toString()<% } %>)))<% }); %>


        // Check, that the count call also returns 1
        rest<%= entityClass %>MockMvc.perform(get(ENTITY_API_URL + "/count?sort=<%= primaryKey.name %>,desc&$filter"))
            .andExpect(status().isOk)
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
            .andExpect(content().string("1"))
    }
    <% } %>

    /**
     * Executes the search, and checks that the default entity is not returned
     */
<% if (reactive) { %>
    private fun default<%= entityClass %>ShouldNotBeFound(filter: String) {
        webTestClient.get().uri(ENTITY_API_URL + "?sort=<%= primaryKey.name %>,desc&$filter")
            .accept(MediaType.APPLICATION_JSON)
            .exchange()
            .expectStatus().isOk
            .expectHeader().contentType(MediaType.APPLICATION_JSON)
            .expectBody()
            .jsonPath("$").isArray()
            .jsonPath("$").isEmpty

        // Check, that the count call also returns 0
        webTestClient.get().uri(ENTITY_API_URL + "/count?sort=<%= primaryKey.name %>,desc&$filter")
            .accept(MediaType.APPLICATION_JSON)
            .exchange()
            .expectStatus().isOk
            .expectHeader().contentType(MediaType.APPLICATION_JSON)
            .expectBody().json("0")
    }
<%_ } else { _%>
    @Throws(Exception::class)
    private fun default<%= entityClass %>ShouldNotBeFound(filter: String) {
        rest<%= entityClass %>MockMvc.perform(get(ENTITY_API_URL + "?sort=<%= primaryKey.name %>,desc&$filter"))
            .andExpect(status().isOk)
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
            .andExpect(jsonPath("$").isArray)
            .andExpect(jsonPath("$").isEmpty)

        // Check, that the count call also returns 0
        rest<%= entityClass %>MockMvc.perform(get(ENTITY_API_URL + "/count?sort=<%= primaryKey.name %>,desc&$filter"))
            .andExpect(status().isOk)
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
            .andExpect(content().string("0"))
    }
<%_  } _%>
<%_  } _%>
    @Test<%= transactionalAnnotation %>
    <% if (!reactive) { %>@Throws(Exception::class)<% } %>
    fun getNonExisting<%= entityClass %>() {
        // Get the <%= entityInstance %>
        <%_ if (reactive) { _%>
        webTestClient.get().uri(ENTITY_API_URL_ID, <% if (primaryKey.typeLong || primaryKey.typeString) { %>Long.MAX_VALUE<% } else if (primaryKey.typeUUID) { %>UUID.randomUUID().toString()<% } %>)
            .accept(MediaType.APPLICATION_JSON)
            .exchange()
            .expectStatus().isNotFound
        <%_ } else { _%>
        rest<%= entityClass %>MockMvc.perform(get(ENTITY_API_URL_ID, <% if (primaryKey.typeLong || primaryKey.typeString) { %>Long.MAX_VALUE<% } else if (primaryKey.typeUUID) { %>UUID.randomUUID().toString()<% } %>))
            .andExpect(status().isNotFound)
        <%_ } _%>
    }
<%_ if (!readOnly) { _%>
    @Test<%= transactionalAnnotation %>
    fun putExisting<%= entityClass %>() {
        // Initialize the database
        <%_ if (!primaryKey.derived) { _%>
            <%_ for (field of primaryKey.fields.filter(f => !f.autoGenerateByRepository)) { _%>
                <%= persistInstance %>.<%= field.fieldName %> = <%- getJavaValueGeneratorForType(field.fieldType) %>
            <%_ } _%>
        <%_ } _%>
        <%= entityInstance %>Repository.<%= saveMethod %>(<%= persistInstance %>)<%= callBlock %>

        val databaseSizeBeforeUpdate = <%= entityInstance %>Repository.findAll()<%= callListBlock %>.size

        <%_ if (searchEngineElasticsearch) { _%>
        <%= entityInstance %>SearchRepository.save(<%= persistInstance %>)<%= callBlock %>
        val searchDatabaseSizeBefore = IterableUtil.sizeOf(<%= entityInstance %>SearchRepository.findAll()<%= callListBlock %>)
        <%_ } _%>
        // Update the <%= entityInstance %>
        val updated<%= persistClass %> = <%= entityInstance %>Repository.findById(<%= persistInstance %>.<%= primaryKey.name %>)<%= reactive ? '.block()' : '.get()' %>
        <%_ if (databaseTypeSql && !reactive) { _%>
        // Disconnect from session so that the updates on updated<%= persistClass %> are not directly saved in db
        em.detach(updated<%= persistClass %>)
        <%_ } _%>
        <%_ for (field of fieldsToTest) { _%>
        updated<%= persistClass %>.<%= field.fieldName %> = <%='UPDATED_' + field.fieldNameUnderscored.toUpperCase()%>
            <%_ if ((field.fieldTypeBinary) && !field.blobContentTypeText) { _%>
        updated<%= persistClass %>.<%= field.fieldName %>ContentType = <%='UPDATED_' + field.fieldNameUnderscored.toUpperCase()%>_CONTENT_TYPE
            <%_ } _%>
        <%_ } _%>
        <%_ if (dtoMapstruct) { _%>
        val <%= dtoInstance %> = <%= entityInstance %>Mapper.toDto(updated<%= persistClass %>)
        <%_ } _%>

        <%_ if (reactive) { _%>
        webTestClient.put().uri(ENTITY_API_URL_ID, <%= (dtoMapstruct ? asDto(entityInstance) : 'updated' + persistClass) %>.<%= primaryKey.name %>)
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(convertObjectToJsonBytes(<%= (dtoMapstruct ? dtoInstance : 'updated' + persistClass) %>))
            .exchange()
            .expectStatus().isOk
        <%_ } else { _%>
        rest<%= entityClass %>MockMvc.perform(
            put(ENTITY_API_URL_ID, <%= (dtoMapstruct ? asDto(entityInstance) : 'updated' + persistClass) %>.<%= primaryKey.name %>)<% if (testsNeedCsrf) { %>.with(csrf())<% }%>
                .contentType(MediaType.APPLICATION_JSON)
                .content(convertObjectToJsonBytes(<% if (dtoMapstruct) { %><%= dtoInstance %><% } else { %>updated<%= persistClass %><% } %>))
        ).andExpect(status().isOk)
        <%_ } _%>

        // Validate the <%= entityClass %> in the database
        <%_ if (databaseTypeCouchbase) { _%>
        SecurityContextHolder.setContext(TestSecurityContextHolder.getContext());
        <%_ } _%>
        val <%= entityInstance %>List = <%= entityInstance %>Repository.findAll()<%= callListBlock %>
        assertThat(<%= entityInstance %>List).hasSize(databaseSizeBeforeUpdate)
        val test<%= entityClass %> = <%= entityInstance %>List[<%= entityInstance %>List.size - 1]
        <%_ for (const field of fieldsToTest) { _%>
            <%_ if (field.fieldTypeZonedDateTime) { _%>
        assertThat(test<%= entityClass %>.<%=field.fieldName%>).isEqualTo(<%='UPDATED_' + field.fieldNameUnderscored.toUpperCase()%>)
        <%_ } else if ((field.fieldTypeBinary) && !field.blobContentTypeText) { _%>
        assertThat(test<%= entityClass %>.<%=field.fieldName%>).isEqualTo(<%='UPDATED_' + field.fieldNameUnderscored.toUpperCase()%>)
        assertThat(test<%= entityClass %>.<%=field.fieldName%>ContentType).isEqualTo(<%='UPDATED_' + field.fieldNameUnderscored.toUpperCase()%>_CONTENT_TYPE)
        <%_ } else if (field.fieldTypeBigDecimal) { _%>
        assertThat(test<%= entityClass %>.<%=field.fieldName%>?.stripTrailingZeros()).isEqualTo(<%='UPDATED_' + field.fieldNameUnderscored.toUpperCase()%>.stripTrailingZeros())
        <%_ } else { _%>
        assertThat(test<%= entityClass %>.<%=field.fieldName%>).isEqualTo(<%='UPDATED_' + field.fieldNameUnderscored.toUpperCase()%>)
        <%_ } _%>
  <%_ } _%>
        <%_ if (searchEngineElasticsearch) { _%>
        await().atMost(5, TimeUnit.SECONDS).untilAsserted {
            val searchDatabaseSizeAfter = IterableUtil.sizeOf(<%= entityInstance %>SearchRepository.findAll()<%= callListBlock %>)
            assertThat(searchDatabaseSizeAfter).isEqualTo(searchDatabaseSizeBefore)
            val <%= entityInstance %>SearchList = IterableUtils.toList(<%= entityInstance %>SearchRepository.findAll()<%= callListBlock %>)
            val test<%= entityClass %>Search = <%= entityInstance %>SearchList.get(searchDatabaseSizeAfter - 1)
    <%_ for (const field of fieldsToTest) { _%>
      <%_ if (field.fieldTypeZonedDateTime) { _%>
            assertThat(test<%= entityClass %>Search.<%= field.fieldName %>).isEqualTo(<%= 'UPDATED_' + field.fieldNameUnderscored.toUpperCase() %>)
      <%_ } else if (field.fieldTypeBinary && !field.blobContentTypeText) { _%>
            assertThat(test<%= entityClass %>Search.<%= field.fieldName %>).isEqualTo(<%= 'UPDATED_' + field.fieldNameUnderscored.toUpperCase() %>)
            assertThat(test<%= entityClass %>Search.<%= field.fieldName %>ContentType).isEqualTo(<%= 'UPDATED_' + field.fieldNameUnderscored.toUpperCase() %>_CONTENT_TYPE)
      <%_ } else if (field.fieldTypeBigDecimal) { _%>
            assertThat(test<%= entityClass %>Search.<%= field.fieldName %>).isEqualByComparingTo(<%= 'UPDATED_' + field.fieldNameUnderscored.toUpperCase() %>)
      <%_ } else { _%>
            assertThat(test<%= entityClass %>Search.<%= field.fieldName %>).isEqualTo(<%= 'UPDATED_' + field.fieldNameUnderscored.toUpperCase() %>)
      <%_ } _%>
    <%_ } _%>
      }
        <%_ } _%>
    }

    @Test<%= transactionalAnnotation %>
    fun putNonExisting<%= entityClass %>() {
        val databaseSizeBeforeUpdate = <%= entityInstance %>Repository.findAll()<%= callListBlock %>.size
        <%_ if (searchEngineElasticsearch) { _%>
        val searchDatabaseSizeBefore = IterableUtil.sizeOf(<%= entityInstance %>SearchRepository.findAll()<%= callListBlock %>)
        <%_ } _%>
        <%= persistInstance %>.<%= primaryKey.name %> = <%= getJavaValueGeneratorForType(primaryKey.type) %>

        <%_ if (dtoMapstruct) { _%>
        // Create the <%= entityClass %>
        val <%= dtoInstance %> = <%= entityInstance %>Mapper.toDto(<%= persistInstance %>)
        <%_ } _%>

        // If the entity doesn't have an ID, it will throw BadRequestAlertException
        <%_ if (reactive) { _%>
        webTestClient.put().uri(ENTITY_API_URL_ID, <%= restInstance %>.<%= primaryKey.name %>)
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(convertObjectToJsonBytes(<%= restInstance %>))
            .exchange()
            .expectStatus().isBadRequest
        <%_ } else { _%>
        rest<%= entityClass %>MockMvc.perform(put(ENTITY_API_URL_ID, <%= restInstance %>.<%= primaryKey.name %>)<% if (testsNeedCsrf) { %>.with(csrf())<% }%>
            .contentType(MediaType.APPLICATION_JSON)
            .content(convertObjectToJsonBytes(<%= restInstance %>)))
            .andExpect(status().isBadRequest)
        <%_ } _%>

        // Validate the <%= entityClass %> in the database
        <%_ if (databaseTypeCouchbase) { _%>
        SecurityContextHolder.setContext(TestSecurityContextHolder.getContext())
        <%_ } _%>
        val <%= entityInstance %>List = <%= entityInstance %>Repository.findAll()<%= callListBlock %>
        assertThat(<%= entityInstance %>List).hasSize(databaseSizeBeforeUpdate)
        <%_ if (searchEngineElasticsearch) { _%>
        val searchDatabaseSizeAfter = IterableUtil.sizeOf(<%= entityInstance %>SearchRepository.findAll()<%= callListBlock %>)
        assertThat(searchDatabaseSizeAfter).isEqualTo(searchDatabaseSizeBefore)
        <%_ } _%>
    }

    @Test<%= transactionalAnnotation %>
    @Throws(Exception::class)
    fun putWithIdMismatch<%= entityClass %>() {
        val databaseSizeBeforeUpdate = <%= entityInstance %>Repository.findAll()<%= callListBlock %>.size
        <%_ if (searchEngineElasticsearch) { _%>
        val searchDatabaseSizeBefore = IterableUtil.sizeOf(<%= entityInstance %>SearchRepository.findAll()<%= callListBlock %>)
        <%_ } _%>
        <%= persistInstance %>.<%= primaryKey.name %> = <%= getJavaValueGeneratorForType(primaryKey.type) %>

        <%_ if (dtoMapstruct) { _%>
        // Create the <%= entityClass %>
        val <%= dtoInstance %> = <%= entityInstance %>Mapper.toDto(<%= persistInstance %>)

        <%_ } _%>
        // If url ID doesn't match entity ID, it will throw BadRequestAlertException
        <%_ if (!reactive) { _%>
        rest<%= entityClass %>MockMvc.perform(
            put(ENTITY_API_URL_ID, <%= getJavaValueGeneratorForType(primaryKey.type) %>)<% if (testsNeedCsrf) { %>.with(csrf())<% }%>
                .contentType(MediaType.APPLICATION_JSON)
                .content(convertObjectToJsonBytes(<%= restInstance %>))
        ).andExpect(status().isBadRequest)
        <%_ } else { _%>
        webTestClient.put().uri(ENTITY_API_URL_ID, <%= getJavaValueGeneratorForType(primaryKey.type) %>)
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(convertObjectToJsonBytes(<%= restInstance %>))
            .exchange()
            .expectStatus().isBadRequest
        <%_ } _%>

        // Validate the <%= entityClass %> in the database
        <%_ if (databaseTypeCouchbase) { _%>
        SecurityContextHolder.setContext(TestSecurityContextHolder.getContext())
        <%_ } _%>
        val <%= entityInstance %>List = <%= entityInstance %>Repository.findAll()<%= callListBlock %>
        assertThat(<%= entityInstance %>List).hasSize(databaseSizeBeforeUpdate)
        <%_ if (searchEngineElasticsearch) { _%>
        val searchDatabaseSizeAfter = IterableUtil.sizeOf(<%= entityInstance %>SearchRepository.findAll()<%= callListBlock %>)
        assertThat(searchDatabaseSizeAfter).isEqualTo(searchDatabaseSizeBefore)
        <%_ } _%>
    }

    @Test<%= transactionalAnnotation %>
    @Throws(Exception::class)
    fun putWithMissingIdPathParam<%= entityClass %>() {
        val databaseSizeBeforeUpdate = <%= entityInstance %>Repository.findAll()<%= callListBlock %>.size
    <%_ if (searchEngineElasticsearch) { _%>
        val searchDatabaseSizeBefore = IterableUtil.sizeOf(<%= entityInstance %>SearchRepository.findAll()<%= callListBlock %>);
    <%_ } _%>
        <%= persistInstance %>.<%= primaryKey.name %> = <%= getJavaValueGeneratorForType(primaryKey.type) %>

        <%_ if (dtoMapstruct) { _%>
        // Create the <%= entityClass %>
        val <%= dtoInstance %> = <%= entityInstance %>Mapper.toDto(<%= persistInstance %>)

        <%_ } _%>
        // If url ID doesn't match entity ID, it will throw BadRequestAlertException
        <%_ if (reactive) { _%>
        webTestClient.put().uri(ENTITY_API_URL)
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(convertObjectToJsonBytes(<%= restInstance %>))
            .exchange()
            .expectStatus().isEqualTo(405)
        <%_ } else { _%>
        rest<%= entityClass %>MockMvc.perform(put(ENTITY_API_URL)<% if (testsNeedCsrf) { %>.with(csrf())<% } %>
            .contentType(MediaType.APPLICATION_JSON)
            .content(convertObjectToJsonBytes(<%= restInstance %>)))
            .andExpect(status().isMethodNotAllowed)
        <%_ } _%>

        // Validate the <%= entityClass %> in the database
        <%_ if (databaseTypeCouchbase) { _%>
        SecurityContextHolder.setContext(TestSecurityContextHolder.getContext())
        <%_ } _%>
        val <%= entityInstance %>List = <%= entityInstance %>Repository.findAll()<%= callListBlock %>
        assertThat(<%= entityInstance %>List).hasSize(databaseSizeBeforeUpdate)
        <%_ if (searchEngineElasticsearch) { _%>
        val searchDatabaseSizeAfter = IterableUtil.sizeOf(<%= entityInstance %>SearchRepository.findAll()<%= callListBlock %>)
        assertThat(searchDatabaseSizeAfter).isEqualTo(searchDatabaseSizeBefore)
        <%_ } _%>
    }

    <%_
        const prepareFieldForPatchTest = (field, includeCb) => {
            const includeField = includeCb();
            const fieldNameUnderscoreUppercased = field.fieldNameUnderscored.toUpperCase();
            const updateWithValue = includeField ? `UPDATED_${fieldNameUnderscoreUppercased}` : 'null';
            const testWithConstant = includeField ? `UPDATED_${fieldNameUnderscoreUppercased}` : `DEFAULT_${fieldNameUnderscoreUppercased}`;
            return { includeField, updateWithValue, testWithConstant, ...field};
        };
    _%>
    @Test<%= transactionalAnnotation %>
    @Throws(Exception::class)
    fun partialUpdate<%= entityClass %>WithPatch() {
         <%_ if (!primaryKey.derived) { _%>
            <%_ for (field of primaryKey.fields.filter(f => !f.autoGenerateByRepository)) { _%>
                <%= persistInstance %>.<%= field.fieldName %> = <%- getJavaValueGeneratorForType(field.fieldType) %>
            <%_ } _%>
        <%_ } _%>
        <%= entityInstance %>Repository.<%= saveMethod %>(<%= persistInstance %>)<%= callBlock %>
        <% const fieldsToIncludeInPartialPatchTest = fieldsToTest.map(field => prepareFieldForPatchTest(field, () => faker.datatype.boolean())); %>
        <%- include('/partials/it_patch_update.partial.kt.ejs', {fields: fieldsToIncludeInPartialPatchTest, saveMethod, asEntity, callBlock, callListBlock, getPrimaryKeyValue}); -%>
    }

    @Test<%= transactionalAnnotation %>
    @Throws(Exception::class)
    fun fullUpdate<%= entityClass %>WithPatch() {
        <%_ if (!primaryKey.derived) { _%>
            <%_ for (field of primaryKey.fields.filter(f => !f.autoGenerateByRepository)) { _%>
                <%= persistInstance %>.<%= field.fieldName %> = <%- getJavaValueGeneratorForType(field.fieldType) %>
            <%_ } _%>
        <%_ } _%>
        <%= entityInstance %>Repository.<%= saveMethod %>(<%= persistInstance %>)<%= callBlock %>
        <% const fieldsToIncludeInFullPatchTest = fieldsToTest.map(field => prepareFieldForPatchTest(field, () => true)); %>
        <%- include('/partials/it_patch_update.partial.kt.ejs', {fields: fieldsToIncludeInFullPatchTest, saveMethod, asEntity, callBlock, callListBlock, getPrimaryKeyValue}); -%>
    }

    @Throws(Exception::class)
    fun patchNonExisting<%= entityClass %>() {
        val databaseSizeBeforeUpdate = <%= entityInstance %>Repository.findAll()<%= callListBlock %>.size
  <%_ if (searchEngineElasticsearch) { _%>
        val searchDatabaseSizeBefore = IterableUtil.sizeOf(<%= entityInstance %>SearchRepository.findAll()<%= callListBlock %>)
  <%_ } _%>
        <%= asEntity(entityInstance) %>.<%= primaryKey.name %> = <%= getJavaValueGeneratorForType(primaryKey.type) %>

        <%_ if (dtoMapstruct) { _%>
        // Create the <%= entityClass %>
        val <%= asDto(entityInstance) %> = <%= entityInstance %>Mapper.toDto(<%= asEntity(entityInstance) %>)

        <%_ } _%>
        // If the entity doesn't have an ID, it will throw BadRequestAlertException
        <%_ if (reactive) { _%>
        webTestClient.patch().uri(ENTITY_API_URL_ID, <%= (dtoMapstruct ? asDto(entityInstance) : asEntity(entityInstance)) %>.<%= primaryKey.name %>)
            .contentType(MediaType.valueOf("application/merge-patch+json"))
            .bodyValue(convertObjectToJsonBytes(<%= (dtoMapstruct ? asDto(entityInstance) : asEntity(entityInstance)) %>))
            .exchange()
            .expectStatus().isBadRequest
        <%_ } else { _%>
        rest<%= entityClass %>MockMvc.perform(patch(ENTITY_API_URL_ID, <%= (dtoMapstruct ? asDto(entityInstance) : asEntity(entityInstance)) %>.<%= primaryKey.name %>)<% if (testsNeedCsrf) { %>.with(csrf())<% }%>
            .contentType("application/merge-patch+json")
            .content(convertObjectToJsonBytes(<%= (dtoMapstruct ? asDto(entityInstance) : asEntity(entityInstance)) %>)))
            .andExpect(status().isBadRequest)
        <%_ } _%>

        // Validate the <%= entityClass %> in the database
        <%_ if (databaseTypeCouchbase) { _%>
        SecurityContextHolder.setContext(TestSecurityContextHolder.getContext());
        <%_ } _%>
        val <%= entityInstance %>List = <%= entityInstance %>Repository.findAll()<%= callListBlock %>
        assertThat(<%= entityInstance %>List).hasSize(databaseSizeBeforeUpdate)
        <%_ if (searchEngineElasticsearch) { _%>
        val searchDatabaseSizeAfter = IterableUtil.sizeOf(<%= entityInstance %>SearchRepository.findAll()<%= callListBlock %>)
        assertThat(searchDatabaseSizeAfter).isEqualTo(searchDatabaseSizeBefore)
        <%_ } _%>
    }

    @Test<%= transactionalAnnotation %>
    @Throws(Exception::class)
    fun patchWithIdMismatch<%= entityClass %>() {
        val databaseSizeBeforeUpdate = <%= entityInstance %>Repository.findAll()<%= callListBlock %>.size
  <%_ if (searchEngineElasticsearch) { _%>
        val searchDatabaseSizeBefore = IterableUtil.sizeOf(<%= entityInstance %>SearchRepository.findAll()<%= callListBlock %>)
  <%_ } _%>
        <%= asEntity(entityInstance) %>.<%= primaryKey.name %> = <%= getJavaValueGeneratorForType(primaryKey.type) %>

        <%_ if (dtoMapstruct) { _%>
        // Create the <%= entityClass %>
        val <%= asDto(entityInstance) %> = <%= entityInstance %>Mapper.toDto(<%= asEntity(entityInstance) %>)

        <%_ } _%>
        // If url ID doesn't match entity ID, it will throw BadRequestAlertException
        <%_ if (reactive) { _%>
        webTestClient.patch().uri(ENTITY_API_URL_ID, <%= getJavaValueGeneratorForType(primaryKey.type) %>)
            .contentType(MediaType.valueOf("application/merge-patch+json"))
            .bodyValue(convertObjectToJsonBytes(<%= (dtoMapstruct ? asDto(entityInstance) : asEntity(entityInstance)) %>))
            .exchange()
            .expectStatus().isBadRequest
        <%_ } else { _%>
        rest<%= entityClass %>MockMvc.perform(patch(ENTITY_API_URL_ID, <%= getJavaValueGeneratorForType(primaryKey.type) %>)<% if (testsNeedCsrf) { %>.with(csrf())<% } %>
            .contentType("application/merge-patch+json")
            .content(convertObjectToJsonBytes(<%= (dtoMapstruct ? asDto(entityInstance) : asEntity(entityInstance)) %>)))
            .andExpect(status().isBadRequest)
        <%_ } _%>

        // Validate the <%= entityClass %> in the database
        <%_ if (databaseTypeCouchbase) { _%>
        SecurityContextHolder.setContext(TestSecurityContextHolder.getContext())
        <%_ } _%>
        val <%= entityInstance %>List = <%= entityInstance %>Repository.findAll()<%= callListBlock %>
        assertThat(<%= entityInstance %>List).hasSize(databaseSizeBeforeUpdate)
        <%_ if (searchEngineElasticsearch) { _%>
        val searchDatabaseSizeAfter = IterableUtil.sizeOf(<%= entityInstance %>SearchRepository.findAll()<%= callListBlock %>)
        assertThat(searchDatabaseSizeAfter).isEqualTo(searchDatabaseSizeBefore)
        <%_ } _%>
    }

    @Test<%= transactionalAnnotation %>
    @Throws(Exception::class)
    fun patchWithMissingIdPathParam<%= entityClass %>() {
        val databaseSizeBeforeUpdate = <%= entityInstance %>Repository.findAll()<%= callListBlock %>.size
    <%_ if (searchEngineElasticsearch) { _%>
        val searchDatabaseSizeBefore = IterableUtil.sizeOf(<%= entityInstance %>SearchRepository.findAll()<%= callListBlock %>);
    <%_ } _%>
        <%= asEntity(entityInstance) %>.<%= primaryKey.name %> = <%= getJavaValueGeneratorForType(primaryKey.type) %>

        <%_ if (dtoMapstruct) { _%>
        // Create the <%= entityClass %>
        val <%= asDto(entityInstance) %> = <%= entityInstance %>Mapper.toDto(<%= asEntity(entityInstance) %>)

        <%_ } _%>
        // If url ID doesn't match entity ID, it will throw BadRequestAlertException
        <%_ if (reactive) { _%>
        webTestClient.patch().uri(ENTITY_API_URL)
            .contentType(MediaType.valueOf("application/merge-patch+json"))
            .bodyValue(convertObjectToJsonBytes(<%= (dtoMapstruct ? asDto(entityInstance) : asEntity(entityInstance)) %>))
            .exchange()
            .expectStatus().isEqualTo(405)
        <%_ } else { _%>
        rest<%= entityClass %>MockMvc.perform(patch(ENTITY_API_URL)<% if (testsNeedCsrf) { %>.with(csrf())<% } %>
            .contentType("application/merge-patch+json")
            .content(convertObjectToJsonBytes(<%= (dtoMapstruct ? asDto(entityInstance) : asEntity(entityInstance)) %>)))
            .andExpect(status().isMethodNotAllowed)
        <%_ } _%>

        // Validate the <%= entityClass %> in the database
        <%_ if (databaseTypeCouchbase) { _%>
        SecurityContextHolder.setContext(TestSecurityContextHolder.getContext())
        <%_ } _%>
        val <%= entityInstance %>List = <%= entityInstance %>Repository.findAll()<%= callListBlock %>
        assertThat(<%= entityInstance %>List).hasSize(databaseSizeBeforeUpdate)
        <%_ if (searchEngineElasticsearch) { _%>
        val searchDatabaseSizeAfter = IterableUtil.sizeOf(<%= entityInstance %>SearchRepository.findAll()<%= callListBlock %>)
        assertThat(searchDatabaseSizeAfter).isEqualTo(searchDatabaseSizeBefore)
        <%_ } _%>
    }

    @Test<%= transactionalAnnotation %>
    <% if (!reactive) { %>@Throws(Exception::class)<% } %>
    fun delete<%= entityClass %>() {
        // Initialize the database
        <%_ if (!primaryKey.derived) { _%>
            <%_ for (field of primaryKey.fields.filter(f => !f.autoGenerateByRepository)) { _%>
                <%= persistInstance %>.<%= field.fieldName %> = <%- getJavaValueGeneratorForType(field.fieldType) %>
            <%_ } _%>
        <%_ } _%>
        <%= entityInstance %>Repository.<%= saveMethod %>(<%= persistInstance %>)<%= callBlock %>
        <%_ if (searchEngineElasticsearch) { _%>
        <%= entityInstance %>Repository.save(<%= persistInstance %>)<%= callBlock %>
        <%= entityInstance %>SearchRepository.save(<%= persistInstance %>)<%= callBlock %>
        <%_ } _%>
        val databaseSizeBeforeDelete = <%= entityInstance %>Repository.findAll()<%= callListBlock %>.size
        <%_ if (searchEngineElasticsearch) { _%>
        val searchDatabaseSizeBefore = IterableUtil.sizeOf(<%= entityInstance %>SearchRepository.findAll()<%= callListBlock %>)
        assertThat(searchDatabaseSizeBefore).isEqualTo(databaseSizeBeforeDelete)
        <%_ } _%>
        // Delete the <%= entityInstance %>
        <%_ if (reactive) { _%>
        webTestClient.delete().uri(ENTITY_API_URL_ID, <%= persistInstance %>.<%= primaryKey.name %>)
            .accept(MediaType.APPLICATION_JSON)
            .exchange()
            .expectStatus().isNoContent
        <%_ } else { _%>
        rest<%= entityClass %>MockMvc.perform(
            delete(ENTITY_API_URL_ID, <%= persistInstance %>.<%= primaryKey.name %><% if (primaryKey.typeUUID && databaseTypeSql) { %>.toString()<% } %>)<% if (testsNeedCsrf) { %>.with(csrf())<% }%>
                .accept(MediaType.APPLICATION_JSON)
        ).andExpect(status().isNoContent)
        <%_ } _%>

        // Validate the database contains one less item
        <%_ if (databaseTypeCouchbase) { _%>
        SecurityContextHolder.setContext(TestSecurityContextHolder.getContext())
        <%_ } _%>
        val <%= entityInstance %>List = <%= entityInstance %>Repository.findAll()<%= callListBlock %>
        assertThat(<%= entityInstance %>List).hasSize(databaseSizeBeforeDelete - 1)
        <%_ if (searchEngineElasticsearch) { _%>

        val searchDatabaseSizeAfter = IterableUtil.sizeOf(<%= entityInstance %>SearchRepository.findAll()<%= callListBlock %>);
        assertThat(searchDatabaseSizeAfter).isEqualTo(searchDatabaseSizeBefore-1);
        <%_ } _%>
    }
<%_ } _%>

<%_ if (searchEngine) { _%>
    <%_ if (searchEngineCouchbase) { _%>
    @Timeout(value = 15, unit = TimeUnit.MINUTES)
    <%_ } _%>
    @Test<%= transactionalAnnotation %>
    <% if (!reactive) { %>@Throws(Exception::class)<% } %>
    fun search<%= entityClass %>() {
        // Initialize the database
        <%_ if (!primaryKey.derived) { _%>
            <%_ for (field of primaryKey.fields.filter(f => !f.autoGenerateByRepository)) { _%>
                <%= persistInstance %>.<%= field.fieldName %> = <%- getJavaValueGeneratorForType(field.fieldType) %>
            <%_ } _%>
        <%_ } _%>
        <%= persistInstance %> = <%= entityInstance %>Repository.<%= saveMethod %>(<%= persistInstance %>)<%= callBlock %>
    <%_ if (searchEngineElasticsearch) { _%>
        <%= entityInstance %>SearchRepository.save(<%= persistInstance %>)<%= callBlock %>
    <%_ } else if (searchEngineCouchbase) { _%>
        // Wait for the <%= entityInstance %> to be indexed
        retryUntilNotEmpty{ <%= entityInstance %>Repository.search("id:${<%= entityInstance %>.<%= primaryKey.name %>}")<% if (reactive) { %>.collectList().block()<% } %> }
    <%_ } _%>
        // Search the <%= entityInstance %>
    <%_ if (reactive) { _%>
        webTestClient.get().uri("$ENTITY_SEARCH_API_URL?query=id:${<%= persistInstance %>.<%= primaryKey.name %>}")
            .exchange()
            .expectStatus().isOk
            .expectHeader().contentType(MediaType.APPLICATION_JSON)
            .expectBody()
    <%_ } else { _%>
        rest<%= entityClass %>MockMvc.perform(get("$ENTITY_SEARCH_API_URL?query=id:${<%= persistInstance %>.<%= primaryKey.name %>}"))
            .andExpect(status().isOk)
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
    <%_ } _%>
    <%_ if (['sql', 'mongodb', 'couchbase', 'cassandra'].includes(databaseType)) { _%>
            <%= !reactive ? '.andExpect(' : '.' %>jsonPath("$.[*].<%= primaryKey.name %>").value(hasItem(<%= idValue %>))<%= !reactive ? ')' : '' %><%_ } _%><% for (field of fieldsToTest) { %>
            <%_ if ((field.fieldTypeBinary) && !field.blobContentTypeText) { _%>
            <%= !reactive ? '.andExpect(' : '.' %>jsonPath("$.[*].<%= field.fieldName %>ContentType").value(hasItem(<%= 'DEFAULT_' + field.fieldNameUnderscored.toUpperCase() %>_CONTENT_TYPE))<%= !reactive ? ')' : '' %><%_ } _%>
            <%= !reactive ? '.andExpect(' : '.' %>jsonPath("$.[*].<%= field.fieldName %>").value(hasItem(<%
                if ((field.fieldTypeBinary) && !field.blobContentTypeText) { %>Base64Utils.encodeToString(<% } else
                    if (field.fieldTypeZonedDateTime) { %>sameInstant(<% } else
                        if (field.fieldTypeBigDecimal) { %>sameNumber(<% }  %><%= 'DEFAULT_' + field.fieldNameUnderscored.toUpperCase() %><%
                    if ((field.fieldTypeBinary) && !field.blobContentTypeText) { %><%
                        if (databaseTypeCassandra) { %>.array()<% } %>)<% } else
                            if (field.fieldTypeInteger) { %><% } else
                                if (field.fieldTypeBoolean) { %><% } else
                                    if (field.fieldTypeLong) { %>?.toInt()<% } else
                                        if (field.fieldTypeFloat || field.fieldTypeDouble) { %>.toDouble()<% } else
                                            if (field.fieldTypeBigDecimal) { %>)<% } else
                                                if (field.fieldTypeZonedDateTime) { %>)<% } else
                                                    if (!field.fieldTypeString) { %>.toString()<% } %>))<%= !reactive ? ')' : '' %><%_ } _%>
    }
<%_ } _%>

    companion object {
        <%_ for (field of fieldsToTest) {
            const defaultValueName = 'DEFAULT_' + field.fieldNameUnderscored.toUpperCase();
            const updatedValueName = 'UPDATED_' + field.fieldNameUnderscored.toUpperCase();
            const smallerValueName = 'SMALLER_' + field.fieldNameUnderscored.toUpperCase();
            const needsSmallerValueName = jpaMetamodelFiltering && isFilterableType(field.fieldType)
                && (field.fieldTypeNumeric || field.fieldTypeDuration || field.fieldTypeLocalDate || field.fieldTypeZonedDateTime);

            let defaultValue = 1;
            let updatedValue = 2;

            if (field.fieldValidate) {
                if (field.fieldValidationMax) {
                    defaultValue = field.fieldValidateRulesMax;
                    updatedValue = parseInt(field.fieldValidateRulesMax) - 1;
                }
                if (field.fieldValidationMin) {
                    defaultValue = field.fieldValidateRulesMin;
                    updatedValue = parseInt(field.fieldValidateRulesMin) + 1;
                }
                if (field.fieldValidationMinBytes) {
                    defaultValue = field.fieldValidateRulesMinbytes;
                    updatedValue = field.fieldValidateRulesMinbytes;
                }
                if (field.fieldValidationMaxBytes) {
                    updatedValue = field.fieldValidateRulesMaxbytes;
                }
            }

            const fieldType = field.fieldType;
            const isEnum = field.fieldIsEnum;
            let enumValue1;
            let enumValue2;
            if (isEnum) {
                const enumValues = field.enumValues;
                enumValue1 = enumValues[0];
                if (enumValues.length > 1) {
                    enumValue2 = enumValues[1];
                } else {
                    enumValue2 = enumValue1;
                }
            }

            if (field.fieldTypeString || field.blobContentTypeText) {
                // Generate Strings, using the min and max string length if they are configured
                let sampleTextString = "";
                let updatedTextString = "";
                let sampleTextLength = 10;
                if (field.fieldValidateRulesMinlength > sampleTextLength) {
                    sampleTextLength = field.fieldValidateRulesMinlength;
                }
                if (field.fieldValidateRulesMaxlength < sampleTextLength) {
                    sampleTextLength = field.fieldValidateRulesMaxlength;
                }
                for (let i = 0; i < sampleTextLength; i++) {
                    sampleTextString += "A";
                    updatedTextString += "B";
                }
                if (field.fieldValidateRulesPattern !== undefined) {
                    // Generate Strings, using pattern
                    try {
                        const patternRegExp = new RegExp(field.fieldValidateRulesPattern);
                        const randExp = field.createRandexp();
                        // set infinite repetitions max range
                        if (!patternRegExp.test(sampleTextString.replace(/\\"/g, '"').replace(/\\\\/g, '\\'))) {
                            sampleTextString = randExp.gen().replace(/\\/g, '\\\\').replace(/"/g, '\\"');
                        }
                        if (!patternRegExp.test(updatedTextString.replace(/\\"/g, '"').replace(/\\\\/g, '\\'))) {
                            updatedTextString = randExp.gen().replace(/\\/g, '\\\\').replace(/"/g, '\\"');
                        }
                    } catch (error) {
                        log(this.chalkRed('Error generating test value for entity "' + entityClass +
                            '" field "' + field.fieldName + '" with pattern "' + field.fieldValidateRulesPattern +
                            '", generating default values for this field. Detailed error message: "' + error.message + '".'));
                    }
                    if (sampleTextString === updatedTextString) {
                        updatedTextString = updatedTextString + "B";
                        log(this.chalkRed('Randomly generated first and second test values for entity "' + entityClass +
                            '" field "' + field.fieldName + '" with pattern "' + field.fieldValidateRulesPattern +
                            '" in file "' + entityClass + 'ResourceIT" where equal, added symbol "B" to second value.'));
                    }
                }
        _%>

        private const val <%=defaultValueName %> = "<%-sampleTextString %>"
        private const val <%=updatedValueName %> = "<%-updatedTextString %>"
        <%_ } else if (field.fieldTypeInteger) { _%>

        private const val <%=defaultValueName %>: Int = <%= defaultValue %>
        private const val <%=updatedValueName %>: Int = <%= updatedValue %>
            <%_ if (needsSmallerValueName) { _%>
        private const val <%=smallerValueName %>: Int = <%= defaultValue %> - 1
            <%_ } _%>
        <%_ } else if (field.fieldTypeLong) { _%>

        private const val <%=defaultValueName %>: Long = <%= defaultValue %>L
        private const val <%=updatedValueName %>: Long = <%= updatedValue %>L
            <%_ if (needsSmallerValueName) { _%>
        private const val <%=smallerValueName %>: Long = <%= defaultValue %>L - 1L
            <%_ } _%>
        <%_ } else if (field.fieldTypeFloat) { _%>

        private const val <%=defaultValueName %>: <%=fieldType %> = <%= defaultValue %>F
        private const val <%=updatedValueName %>: <%=fieldType %> = <%= updatedValue %>F
            <%_ if (needsSmallerValueName) { _%>
        private const val <%=smallerValueName %>: <%=fieldType %> = <%= defaultValue %>F - 1F
            <%_ } _%>
        <%_ } else if (field.fieldTypeDouble) { _%>

        private const val <%=defaultValueName %>: <%=fieldType %> = <%= defaultValue %>.0
        private const val <%=updatedValueName %>: <%=fieldType %> = <%= updatedValue %>.0
            <%_ if (needsSmallerValueName) { _%>
        private const val <%=smallerValueName %>: <%=fieldType %> = <%= defaultValue %>.0 - 1.0
            <%_ } _%>
        <%_ } else if (field.fieldTypeBigDecimal) { _%>

        private val <%=defaultValueName %>: BigDecimal = BigDecimal(<%= defaultValue %>)
        private val <%=updatedValueName %>: BigDecimal = BigDecimal(<%= updatedValue %>)
            <%_ if (needsSmallerValueName) { _%>
        private val <%=smallerValueName %>: BigDecimal = BigDecimal(<%= defaultValue %> - 1)
            <%_ } _%>
        <%_ } else if (field.fieldTypeUUID) { _%>

        private val <%=defaultValueName %>: UUID = UUID.randomUUID()
        private val <%=updatedValueName %>: UUID = UUID.randomUUID()
        <%_ } else if (field.fieldTypeLocalDate) { _%>

        private val <%=defaultValueName %>: LocalDate = LocalDate.ofEpochDay(0L)
        private val <%=updatedValueName %>: LocalDate = LocalDate.now(ZoneId.systemDefault())
            <%_ if (needsSmallerValueName) { _%>
        private val <%=smallerValueName %>: LocalDate = LocalDate.ofEpochDay(-1L)
            <%_ } _%>
        <%_ } else if (field.fieldTypeInstant) { _%>

        private val <%=defaultValueName %>: Instant = Instant.ofEpochMilli(0L)
        private val <%=updatedValueName %>: Instant = Instant.now().truncatedTo(ChronoUnit.MILLIS)
            <%_ if (needsSmallerValueName) { _%>
        private val <%=smallerValueName %>: Instant = Instant.ofEpochMilli(-1L)
            <%_ } _%>
        <%_ } else if (field.fieldTypeZonedDateTime) { _%>

        private val <%=defaultValueName %>: ZonedDateTime = ZonedDateTime.ofInstant(Instant.ofEpochMilli(0L), ZoneOffset.UTC)
        private val <%=updatedValueName %>: ZonedDateTime = ZonedDateTime.now(ZoneId.systemDefault()).withNano(0)
            <%_ if (needsSmallerValueName) { _%>
        private val <%=smallerValueName %>: ZonedDateTime = ZonedDateTime.ofInstant(Instant.ofEpochMilli(-1L), ZoneOffset.UTC)
            <%_ } _%>
        <%_ } else if (field.fieldTypeDuration) { _%>

        private val <%=defaultValueName %>: Duration = Duration.ofHours(6)
        private val <%=updatedValueName %>: Duration = Duration.ofHours(12)
            <%_ if (needsSmallerValueName) { _%>
        private val <%=smallerValueName %>: Duration = Duration.ofHours(5)
            <%_ } _%>
        <%_ } else if (fieldType === 'Boolean') { _%>

        private const val <%=defaultValueName %>: Boolean = false
        private const val <%=updatedValueName %>: Boolean = true
        <%_ } else if ((field.fieldTypeBinary) && !field.blobContentTypeText) { _%>

        <%_ if (!databaseTypeCassandra) { _%>
        private val <%=defaultValueName %>: ByteArray = createByteArray(1, "0")
        private val <%=updatedValueName %>: ByteArray = createByteArray(1, "1")
        <%_ } else { _%>
        private val <%=defaultValueName %>: ByteBuffer = ByteBuffer.wrap(createByteArray(1, "0"))
        private val <%=updatedValueName %>: ByteBuffer = ByteBuffer.wrap(createByteArray(1, "1"))
        <%_ } _%>
        private const val <%=defaultValueName %>_CONTENT_TYPE: String = "image/jpg"
        private const val <%=updatedValueName %>_CONTENT_TYPE: String = "image/png"
        <%_ } else if (isEnum) { _%>

        private val <%=defaultValueName %>: <%=fieldType %> = <%=fieldType %>.<%=enumValue1.name %>
        private val <%=updatedValueName %>: <%=fieldType %> = <%=fieldType %>.<%=enumValue2.name %>
        <%_ } } _%>


        private val ENTITY_API_URL: String = "/api/<%= entityApiUrl %>"
        private val ENTITY_API_URL_ID: String = ENTITY_API_URL + "/{<%= primaryKey.name %>}"
        <%_ if (searchEngine !== false) { _%>
        private val ENTITY_SEARCH_API_URL: String = "/api/_search/<%= entityApiUrl %>"
        <%_ } _%>
    <%_ if (!embedded && primaryKey.hasLong) { _%>

        private val random: Random = Random()
        private val count: AtomicLong = AtomicLong(random.nextInt().toLong() + ( 2 * Integer.MAX_VALUE ))
    <%_ } _%>



        <%_ ['DEFAULT_', 'UPDATED_'].forEach((fieldStatus) => { _%>

        /**
         * Create an <% if (fieldStatus === 'UPDATED_') { %>updated <% } %>entity for this test.
         *
         * This is a static method, as tests for other entities might also need it,
         * if they test an entity which requires the current entity.
         */
        @JvmStatic
        fun create<% if (fieldStatus === 'UPDATED_') { _%>Updated<%_ } %>Entity(<% if (databaseTypeSql) { %>em: EntityManager<% } %>): <%= persistClass %> {
            <%_
                const filteredFields = fieldsToTest;
                if (filteredFields.length === 0) {
            _%>
            val <%= persistInstance %> = <%= persistClass %>()
            <%_  } else { _%>
            val <%= persistInstance %> = <%= persistClass %>(
                <%_ if (reactive && databaseTypeSql && primaryKey.typeUUID && !isUsingMapsId) { _%>
                <%= primaryKey.fields[0].fieldName %> = UUID.randomUUID(),
                <%_ } _%>
                <%_
                    let idx = 0;
                    for (field of filteredFields) {
                        const comma = (parseInt(idx, 10) === (filteredFields.length - 1)) ?  '' : ',';
                        idx++;
                _%>
                <%= field.fieldName %> = <%=fieldStatus + field.fieldNameUnderscored.toUpperCase()%><% if ((field.fieldTypeBinary) && !field.blobContentTypeText) { %>,
                <%= field.fieldName %>ContentType = <%=fieldStatus + field.fieldNameUnderscored.toUpperCase()%>_CONTENT_TYPE<% } %><%= comma %>

                <%_ } _%>
            )
            <%_ } _%>


            <%_
            const alreadyGeneratedEntities = []
            for (relationship of relationships) {
                const relationshipValidate = relationship.relationshipValidate;
                const otherEntityName = relationship.otherEntityName;
                const otherEntityNameCapitalized = relationship.otherEntityNameCapitalized;
                const relationshipType = relationship.relationshipType;
                const relationshipName = relationship.relationshipName;
                const relationshipNamePlural = relationship.relationshipNamePlural;
                const mapsIdUse = relationship.id;
                if ((relationshipValidate !== null && relationshipValidate) || mapsIdUse) { _%>
            // Add required entity
                <%_ if (alreadyGeneratedEntities.indexOf(otherEntityName) == -1) { _%>
        <%_ if (relationship.otherEntityUser) { // TODO or other entity has no unique fields _%>
            val <%= otherEntityName %> = <%= createEntityPrefix %><%= otherEntityNameCapitalized %>ResourceIT.createEntity(<% if (databaseTypeSql) { %>em<% } %>)<%= createEntityPostfix %>
                <%_ if (databaseTypeSql && !reactive) { _%>
            em.persist(<%= otherEntityName %>)
            em.flush()
                <%_ } _%>
                <%_ if (databaseTypeMongodb) { _%>
            <%= otherEntityName %>.<%= primaryKey.name %> = "fixed-id-for-tests"
                <%_ } _%>
        <%_ } else { _%>
            val <%= otherEntityName %>: <%= asEntity(otherEntityNameCapitalized) %>
            <%_ if (databaseTypeSql && !reactive) { _%>
                <%_ if (!isUsingMapsId || fieldStatus !== "UPDATED_") { _%>
            if (findAll(em, <%= asEntity(otherEntityNameCapitalized) %>::class).isEmpty()) {
                <%_ } _%>
                <%= otherEntityName %> = <%= createEntityPrefix %><%= otherEntityNameCapitalized %>ResourceIT.create<% if (fieldStatus === 'UPDATED_') { %>Updated<% } %>Entity(<% if (databaseTypeSql) { %>em<% } %>)<%= createEntityPostfix %>
                em.persist(<%= otherEntityName %>)
                em.flush()
                <%_ if (!isUsingMapsId || fieldStatus !== "UPDATED_") { _%>
            } else {
                <%= otherEntityName %> = findAll(em, <%= asEntity(otherEntityNameCapitalized) %>::class)[0]
            }
                <%_ } _%>
            <%_ } else { _%>
            <%= otherEntityName %> = <%= createEntityPrefix %><%= otherEntityNameCapitalized %>ResourceIT.create<% if (fieldStatus === 'UPDATED_') { %>Updated<% } %>Entity(<% if (databaseTypeSql) { %>em<% } %>)<%= createEntityPostfix %>
            <%_ } _%>
            <%_ if (databaseTypeMongodb) { _%>
            <%= otherEntityName %>.<%= primaryKey.name %> = "fixed-id-for-tests"
            <%_ } _%>
        <%_ } _%>
                <%_ } _%>
                <%_ if (relationship.relationshipManyToMany || relationshipType === 'one-to-many') { _%>
            <%= persistInstance %>.<%= relationshipNamePlural %>?.add(<%= otherEntityName %>)
            <%_ } else { _%>
            <%= persistInstance %>.<%= relationshipName %> = <%= otherEntityName %>
            <%_ } _%>
        <%_ alreadyGeneratedEntities.push(otherEntityName) _%>
        <%_ } } _%>
            return <%= persistInstance %>
        }
        <%_ }); _%>

        <%_ if (databaseTypeSql && reactive) {
            const alreadyGeneratedDeletionCalls = [];
        _%>
        fun deleteEntities(em: EntityManager) {
            try {
            <%_ relationships.forEach(function(rel) {
                if (rel.shouldWriteJoinTable) { _%>
                    em.deleteAll("<%= rel.joinTable.name %>").block()
            <%_ }}); _%>
                    em.deleteAll(<%= persistClass %>::class.java).block()
            } catch (e: Exception) {
                // It can fail, if other entities are still referring this - it will be removed later.
            }
        <%_ relationships.forEach(function(rel) {
            if ((rel.relationshipValidate|| rel.id) && !alreadyGeneratedDeletionCalls.includes(rel.otherEntityName)) { _%>
            <%= rel.otherEntityNameCapitalized %>ResourceIT.deleteEntities(em)
                <%_ alreadyGeneratedDeletionCalls.push(rel.otherEntityName);
                }
            }); _%>
        }
        <%_ } _%>
    }
}
