<%#
 Copyright 2013-2024 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%#
 This is a fragment file, it will be merged into to root template if available.
 EJS fragments will process % delimiter tags in template and & delimiter tags in the merge process.
-%>
<&_ if (fragment.importSection) { -&>
import org.springframework.data.annotation.Id
import org.springframework.data.annotation.Transient
import org.springframework.data.relational.core.mapping.Column
import org.springframework.data.relational.core.mapping.Table
<&_ } -&>

<&_ if (fragment.annotationSection) { -&>
@Table("<%= entityTableName %>")
<&_ } -&>

<%_ for (const field of fields) { _%>
    <&_ if (fragment.field<%- field.fieldNameCapitalized %>AnnotationSection) { -&>
    <%_ if (field.id) { _%>
        @Id
    <%_ } _%>
        @Column("<%- field.fieldNameAsDatabaseColumn %>")
    <&_ } -&>
<%_ } -%>

<%_ for (const field of fields.filter(field => field.fieldWithContentType)) { _%>
<&_ if (fragment.field<%- field.fieldNameCapitalized %>ContentTypeAnnotationSection) { -&>
    @Column("<%- field.fieldNameAsDatabaseColumn %>_content_type")
<&_ } -&>
<%_ } -%>

<%_ for (const relationship of relationships) { _%>
    <&_ if (fragment.relationship<%- relationship.relationshipNameCapitalized %>AnnotationSection) { -&>
        @Transient
    <&_ } -&>
<%_ } -%>

<%_ for (const relationship of relationships) {
    const reactiveRelationshipWithId = (databaseType === 'sql' && reactive && !(relationship.relationshipOneToOne &&
    (!relationship.ownerSide || (relationship.ownerSide && relationship.id))));
    _%>
<%_ } _%>

<&_ if (fragment.classAdditionalRelationshipsSection) { -&>
    <%_ for (const relationship of relationships) { _%>
        <%_ if (relationship.ownerSide && !relationship.collection && !relationship.id) { _%>
    @Column("<%= relationship.joinColumnNames[0] %>")
    var <%= relationship.relationshipFieldName %>Id: <%= relationship.otherEntity.primaryKey.type %>? = null,
        <%_ } _%>
    <%_ } _%>
<&_ } -&>
