<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.domain<%
let importApiModelProperty = false;
let importJsonIgnore = false;
let importJsonIgnoreProperties = false;
let importSet = false;
let hasDto = dto === 'mapstruct';
let isUsingMapsId = false;
let primaryKeyType = pkType;
let hasTextBlob = false;
let hasRelationship = relationships.length !== 0;
let fieldsContainEnum = false;
let fieldsContainManyToMany = false;
let fieldsContainOneToOne = false;
const uniqueEnums = {}; %><%- include imports -%>
<%_
    //todo: maybe move to generator-jhipster/generators/entity/index.js
    for (idx in fields) {
        if(fields[idx].fieldIsEnum) {
            fieldsContainEnum = true;
        }
    }
    //todo: maybe move to generator-jhipster/generators/entity/index.js
    for (idx in relationships) {
        if(relationships[idx].relationshipType==='many-to-many'){
            fieldsContainManyToMany = true;
        } else if(relationships[idx].relationshipType==='one-to-one'){
            fieldsContainOneToOne = true;
        }
    }

    for (idx in relationships) {
        isUsingMapsId = relationships[idx].useJPADerivedIdentifier;
        if ( isUsingMapsId === true) {
            primaryKeyType = (relationships[idx].otherEntityName === 'user'  && authenticationType === 'oauth2') ? 'String' : pkType;
            break;
        }
        isUsingMapsId = false;
    }
    for (idx in fields) {
        if ((prodDatabaseType === 'postgresql' || devDatabaseType === 'postgresql') && fields[idx].fieldTypeBlobContent === 'text') {
            hasTextBlob = true;
            break;
        }
    }
_%>

<%_ if (databaseType === 'cassandra') { _%>
import org.springframework.data.annotation.Id
    <%_ if (fieldsContainBlob) { _%>
import org.springframework.data.cassandra.core.mapping.Column
    <%_ } _%>
import org.springframework.data.cassandra.core.mapping.Table
<%_ } if (importJsonIgnore === true) { _%>
import com.fasterxml.jackson.annotation.JsonIgnore
<%_ } if (importJsonIgnoreProperties === true) { _%>
import com.fasterxml.jackson.annotation.JsonIgnoreProperties
<%_ } if (!hasDto && typeof javadoc != 'undefined') { _%>
import io.swagger.annotations.ApiModel
<%_ } if (!hasDto && importApiModelProperty === true) { _%>
import io.swagger.annotations.ApiModelProperty
<%_ } if (enableHibernateCache) { _%>
import org.hibernate.annotations.Cache
import org.hibernate.annotations.CacheConcurrencyStrategy
<%_ } if (hasTextBlob === true || (fieldsContainUUID === true && ['mysql', 'mariadb'].includes(prodDatabaseType))) { _%>
import org.hibernate.annotations.Type
<%_ } if (databaseType === 'mongodb') { _%>
import org.springframework.data.annotation.Id
import org.springframework.data.mongodb.core.mapping.Field
import org.springframework.data.mongodb.core.mapping.Document
import org.springframework.data.mongodb.core.mapping.DBRef
<%_ } else if (databaseType === 'couchbase') { _%>
import org.springframework.data.annotation.Id
import com.couchbase.client.java.repository.annotation.Field
import org.springframework.data.couchbase.core.mapping.Document
import org.springframework.data.couchbase.core.mapping.id.GeneratedValue
import org.springframework.data.couchbase.core.mapping.id.IdPrefix
<%_ } if (databaseType === 'sql') { _%>

import javax.persistence.CascadeType
import javax.persistence.Column
import javax.persistence.Entity
    <%_ if (fieldsContainEnum) { _%>
import javax.persistence.EnumType
import javax.persistence.Enumerated
    <%_ } _%>
import javax.persistence.GeneratedValue
import javax.persistence.GenerationType
import javax.persistence.Id
    <%_ if (fieldsContainBlob) { _%>
import javax.persistence.Lob
    <%_ } _%>
    <%_ if (fieldsContainOwnerManyToMany || fieldsContainOneToMany || fieldsContainOneToOne) { _%>
import javax.persistence.JoinColumn
    <%_ } _%>
    <%_ if (fieldsContainOwnerManyToMany) { _%>
import javax.persistence.JoinTable
    <%_ } _%>
    <%_ if (fieldsContainManyToMany) { _%>
import javax.persistence.ManyToMany
    <%_ } _%>
    <%_ if (fieldsContainManyToOne) { _%>
import javax.persistence.ManyToOne
    <%_ } _%>
    <%_ if (isUsingMapsId) { _%>
import javax.persistence.MapsId
    <%_ } _%>
    <%_ if (fieldsContainOneToMany) { _%>
import javax.persistence.OneToMany
    <%_ } _%>
    <%_ if (fieldsContainOneToOne) { _%>
import javax.persistence.OneToOne
    <%_ } _%>
    <%_ if (!(prodDatabaseType === 'mysql' || prodDatabaseType === 'mariadb')) { _%>
import javax.persistence.SequenceGenerator
    <%_ } _%>
import javax.persistence.Table
<%_ } if (validation) { _%>
import javax.validation.constraints.DecimalMax
import javax.validation.constraints.DecimalMin
import javax.validation.constraints.Max
import javax.validation.constraints.Min
import javax.validation.constraints.NotNull
import javax.validation.constraints.Pattern
import javax.validation.constraints.Size
<%_ } _%>

<%_ if (searchEngine === 'elasticsearch') { _%>
import org.springframework.data.elasticsearch.annotations.FieldType
<%_ } _%>
import java.io.Serializable
<%_ if (fieldsContainBigDecimal === true) { _%>
import java.math.BigDecimal
<%_ } if (fieldsContainBlob && databaseType === 'cassandra') { _%>
import java.nio.ByteBuffer
<%_ } if (fieldsContainInstant === true) { _%>
import java.time.Instant
<%_ } if (fieldsContainLocalDate === true) { _%>
import java.time.LocalDate
<%_ } if (fieldsContainZonedDateTime === true) { _%>
import java.time.ZonedDateTime
<%_ } if (fieldsContainDuration === true) { _%>
import java.time.Duration
<%_ } _%>
<%_ if (databaseType === 'cassandra' || fieldsContainUUID === true) { _%>
import java.util.UUID
<%_ }
Object.keys(uniqueEnums).forEach(function(element) { _%>

import <%=packageName%>.domain.enumeration.<%= element %>
<%_ }); _%>

<%_ if (databaseType === 'couchbase') { _%>
import <%=packageName%>.config.ID_DELIMITER
import org.springframework.data.couchbase.core.mapping.id.GenerationStrategy.UNIQUE

<%_ } _%>
<%_ if (typeof javadoc == 'undefined') { _%>
/**
 * A <%= asEntity(entityClass) %>.
 */
<%_ } else { _%>
<%- formatAsClassJavadoc(javadoc) %>
    <%_ if (!hasDto) { _%>
@ApiModel(description = "<%- formatAsApiDescription(javadoc) %>")
    <%_ }_%>
<%_ } _%>
<%_ if (databaseType === 'sql') { _%>
@Entity
@Table(name = "<%= entityTableName %>")
<%_     if (enableHibernateCache) {
            if (cacheProvider === 'infinispan') { _%>
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
<%_         } else { _%>
@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
<%_         }
        }
} if (databaseType === 'mongodb') { _%>
@Document(collection = "<%= entityTableName %>")
<%_ } if (databaseType === 'couchbase') { _%>
@Document
<%_ } if (databaseType === 'cassandra') { _%>
@Table("<%= entityInstance %>")
<%_ } if (searchEngine === 'elasticsearch') { _%>
@org.springframework.data.elasticsearch.annotations.Document(indexName = "<%= entityInstance.toLowerCase() %>")
<%_ } _%>
class <%= asEntity(entityClass) %>(

    @Id
    <%_ if (databaseType === 'sql' && isUsingMapsId === false) { _%>
        <%_ if (prodDatabaseType === 'mysql' || prodDatabaseType === 'mariadb') { _%>
    @GeneratedValue(strategy = GenerationType.IDENTITY)
        <%_ }  else { _%>
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "sequenceGenerator")
    @SequenceGenerator(name = "sequenceGenerator")
        <%_ } _%>
    <%_ } _%>
    <%_ if (databaseType === 'couchbase') { _%>
    @GeneratedValue(strategy = UNIQUE, delimiter = ID_DELIMITER)
    <%_ } _%>
    <%_ if (searchEngine === 'elasticsearch') { _%>
    @org.springframework.data.elasticsearch.annotations.Field(type = FieldType.Keyword)
    <%_ } _%>
    var id: <%= primaryKeyType %>? = null,

<%_
for (var idx in fields) {
    if (typeof fields[idx].javadoc !== 'undefined') { _%>
<%- formatAsFieldJavadoc(fields[idx].javadoc) %>
    <%_ }
    let required = false;
    let unique = false;
    const fieldValidate = fields[idx].fieldValidate;
    const fieldValidateRules = fields[idx].fieldValidateRules;
    const fieldValidateRulesMaxlength = fields[idx].fieldValidateRulesMaxlength;
    const fieldType = fields[idx].fieldType;
    const fieldTypeBlobContent = fields[idx].fieldTypeBlobContent;
    const fieldName = fields[idx].fieldName;
    const fieldNameUnderscored = fields[idx].fieldNameUnderscored;
    const fieldNameAsDatabaseColumn = fields[idx].fieldNameAsDatabaseColumn;
    const comma = (parseInt(idx, 10) === (fields.length - 1) && relationships.length<1 ) ?  '' : ',';
    if (fieldValidate === true) {
        if (fieldValidateRules.includes('required')) {
            required = true;
        }
        if (fieldValidateRules.includes('unique')) {
            unique = true;
        } _%>
    <%- include ../common/field_validators -%>
    <%_ } _%>
    <%_ if (!hasDto && typeof fields[idx].javadoc != 'undefined') { _%>
    @ApiModelProperty(value = "<%- formatAsApiDescription(fields[idx].javadoc) %>"<% if (required) { %>, required = true<% } %>)
    <%_ } _%>
    <%_ if (databaseType === 'sql') { _%>
        <%_ if (fields[idx].fieldIsEnum) { _%>
    @Enumerated(EnumType.STRING)
        <%_ }  _%>
        <%_ if (fieldType === 'byte[]') { _%>
    @Lob
        <%_ if ((prodDatabaseType === 'postgresql' || devDatabaseType === 'postgresql') && fieldTypeBlobContent === 'text' ) { _%>
        @Type(type = "org.hibernate.type.TextType")
        <%_ }
        }
        if (['Instant', 'ZonedDateTime', 'LocalDate', 'Duration'].includes(fieldType)) { _%>
    @Column(name = "<%-fieldNameAsDatabaseColumn %>"<% if (required) { %>, nullable = false<% } %><% if (unique) { %>, unique = true<% } %>)
        <%_ } else if (fieldType === 'BigDecimal') { _%>
    @Column(name = "<%-fieldNameAsDatabaseColumn %>", precision = 21, scale = 2<% if (required) { %>, nullable = false<% } %><% if (unique) { %>, unique = true<% } %>)
        <%_ } else if (fieldType === 'UUID' && ['mysql', 'mariadb'].includes(prodDatabaseType)) { _%>
    @Type(type = "uuid-char")
    @Column(name = "<%-fieldNameAsDatabaseColumn %>", length = 36<% if (required) { %>, nullable = false<% } %><% if (unique) { %>, unique = true<% } %>)
        <%_ } else { _%>
    @Column(name = "<%-fieldNameAsDatabaseColumn %>"<% if (fieldValidate === true) { %><% if (fieldValidateRules.includes('maxlength')) { %>, length = <%= fieldValidateRulesMaxlength %><% } %><% if (required) { %>, nullable = false<% } %><% if (unique) { %>, unique = true<% } %><% } %>)
        <%_ } _%>
    <%_ } _%>
    <%_ if (databaseType === 'mongodb' || databaseType === 'couchbase') { _%>
    @Field("<%=fieldNameUnderscored %>")
    <%_ } _%>
    <%_ if (fieldTypeBlobContent !== 'text') { _%>
    var <%= fieldName %>: <% if(fieldType === 'byte[]') { _%>ByteArray<%_ } else if(fieldType==='Integer'){ _%>Int<%_ } else { _%><%= fieldType %><% } %>? = null<%_ if (fieldType === 'byte[]' || fieldType === 'ByteBuffer') { _%>,<%_ } else { _%><%= comma %><%_ } %>
    <%_ } else { _%>
    var <%= fieldName %>: String? = null<%= comma %>
    <%_ } _%>

    <%_ if ((fieldType === 'byte[]' || fieldType === 'ByteBuffer') && fieldTypeBlobContent !== 'text') { _%>
      <%_ if (databaseType === 'sql' || databaseType === 'cassandra') { _%>
    @Column(<% if (databaseType !== 'cassandra') { %>name = <% } %>"<%-fieldNameAsDatabaseColumn %>_content_type"<% if (required && databaseType !== 'cassandra') { %>, nullable = false<% } %>)
        <%_ if (required && databaseType === 'cassandra') { _%>
    @field:NotNull
        <%_ } _%>
      <%_ } _%>
      <%_ if (databaseType === 'mongodb' || databaseType === 'couchbase') { _%>
    @Field("<%=fieldNameUnderscored %>_content_type")
      <%_ } _%>
    var <%= fieldName %>ContentType: String? = null<%= comma %>

    <%_ } _%>
    <%_ }
    for (idx in relationships) {
        const otherEntityRelationshipName = relationships[idx].otherEntityRelationshipName;
        const otherEntityRelationshipNamePlural = relationships[idx].otherEntityRelationshipNamePlural;
        const relationshipName = relationships[idx].relationshipName;
        const relationshipFieldName = relationships[idx].relationshipFieldName;
        const relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural;
        const joinTableName = getJoinTableName(entityTableName, relationshipName, prodDatabaseType);
        const relationshipType = relationships[idx].relationshipType;
        const relationshipValidate = relationships[idx].relationshipValidate;
        const relationshipRequired = relationships[idx].relationshipRequired;
        const otherEntityNameCapitalized = relationships[idx].otherEntityNameCapitalized;
        const ownerSide = relationships[idx].ownerSide;
        const isUsingMapsId = relationships[idx].useJPADerivedIdentifier;
        const comma = (parseInt(idx,10) === (relationships.length - 1)) ?  '' : ',';
        if (otherEntityRelationshipName) {
            mappedBy = otherEntityRelationshipName.charAt(0).toLowerCase() + otherEntityRelationshipName.slice(1)
        }
        if (typeof relationships[idx].javadoc != 'undefined') { _%>
<%- formatAsFieldJavadoc(relationships[idx].javadoc) %>
            <%_ if (!hasDto) { _%>
    @ApiModelProperty(value = "<%- formatAsApiDescription(relationships[idx].javadoc) %>")
            <%_ }_%>
    <%_ }
        if (relationshipType === 'one-to-many') {
            if (databaseType === 'sql') {
    _%>
    @OneToMany(mappedBy = "<%= otherEntityRelationshipName %>")
            <%_ if (enableHibernateCache) {
                    if (cacheProvider === 'infinispan') { _%>
    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
                <%_ } else { _%>
    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
                <%_ }
            }
        } else if (databaseType === 'mongodb') { _%>
    @DBRef
    @Field("<%= relationshipFieldName %>")
    <%_ } _%>
    var <%= relationshipFieldNamePlural %>: MutableSet<<%= asEntity(otherEntityNameCapitalized) %>> = mutableSetOf()<%= comma %>

    <%_ } else if (relationshipType === 'many-to-one') {
            if (databaseType === 'sql') {
    _%>
    @ManyToOne<% if (relationshipRequired) { %>(optional = false)<% } %>
        <%_ if (relationshipValidate) { _%>
    <%- include relationship_validators -%>
        <%_ }
    } else if (databaseType === 'mongodb') { _%>
    @DBRef
    @Field("<%= relationshipFieldName %>")
    <%_ } _%>
    <%_ if (otherEntityRelationshipNamePlural !==undefined && otherEntityRelationshipNamePlural !== '') { _%>
    @JsonIgnoreProperties("<%= otherEntityRelationshipNamePlural %>")
    <%_ } _%>
    var <%= relationshipFieldName %>: <%= asEntity(otherEntityNameCapitalized) %>? = null<%= comma %>

    <%_ } else if (relationshipType === 'many-to-many') {
        if (databaseType === 'sql') { _%>
    @ManyToMany<% if (ownerSide === false) { %>(mappedBy = "<%= otherEntityRelationshipNamePlural %>")<% } %>
        <%_ if (enableHibernateCache) {
                if (cacheProvider === 'infinispan') { _%>
    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
            <%_ } else { _%>
    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
            <%_ }
        } if (ownerSide === true) {
            if (relationshipValidate) { _%>
    <%- include relationship_validators -%>
        <%_ } _%>
    @JoinTable(name = "<%= joinTableName %>",
        joinColumns = [JoinColumn(name = "<%= getColumnName(name) %>_id", referencedColumnName = "id")],
        inverseJoinColumns = [JoinColumn(name = "<%= getColumnName(relationships[idx].relationshipName) %>_id", referencedColumnName = "id")])
        <%_ }
        } else if (databaseType === 'mongodb') { _%>
    @DBRef
    @Field("<%= relationshipFieldNamePlural %>")
    <%_ } if (ownerSide === false) { _%>
    @JsonIgnore
    <%_ } _%>
    var <%= relationshipFieldNamePlural %>: MutableSet<<%= asEntity(otherEntityNameCapitalized) %>> = mutableSetOf()<%= comma %>

    <%_ } else {
        if (databaseType === 'sql') {
            if (ownerSide) { _%>
    @OneToOne<%_ if (relationshipRequired) { _%>(optional = false)<%_ } _%>
            <%_ if (relationshipValidate) { _%>
    <%- include relationship_validators -%>
            <%_ }_%>
            <%_ if (isUsingMapsId === true) { %>
    @MapsId
    @JoinColumn(name = "id")
            <%_ } else { %>
    @JoinColumn(unique = true)
            <%_ } _%>
        <%_ } else { _%>
    @OneToOne(mappedBy = "<%= otherEntityRelationshipName %>")
    @JsonIgnore
        <%_ }
        } else if (databaseType === 'mongodb') { _%>
    @DBRef
    @Field("<%= relationshipFieldName %>")
    <%_     if (ownerSide === false) { _%>
    @com.fasterxml.jackson.annotation.JsonBackReference
    <%_     }
        } _%>
    var <%= relationshipFieldName %>: <%= asEntity(otherEntityNameCapitalized) %>? = null<%= comma %>

    <%_ }
    } _%>
    // jhipster-needle-entity-add-field - JHipster will add fields here, do not remove
) : Serializable {
<%_ if (databaseType === 'couchbase') { _%>

    @Suppress("unused")
    @IdPrefix
    private val prefix: String = PREFIX
<%_ } _%>
<%_
    for (idx in relationships) {
        const relationshipFieldName = relationships[idx].relationshipFieldName;
        const ownerSide = relationships[idx].ownerSide;
        const relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural;
        const relationshipType = relationships[idx].relationshipType;
        const otherEntityNameCapitalized = relationships[idx].otherEntityNameCapitalized;
        const relationshipNameCapitalized = relationships[idx].relationshipNameCapitalized;
        const otherEntityName = relationships[idx].otherEntityName;
        const otherEntityRelationshipName = relationships[idx].otherEntityRelationshipName;
        const otherEntityRelationshipNamePlural = relationships[idx].otherEntityRelationshipNamePlural;
    _%>
    <%_ if (relationshipType === 'one-to-many' || relationshipType === 'many-to-many') { _%>
        <%_ if (fluentMethods) { _%>

    fun add<%= relationshipNameCapitalized %>(<%= otherEntityName %>: <%= asEntity(otherEntityNameCapitalized) %>): <%= asEntity(entityClass) %> {
        this.<%= relationshipFieldNamePlural %>.add(<%= otherEntityName %>)
            <%_ if (relationshipType === 'one-to-many') { _%>
        <%= otherEntityName %>.<%= otherEntityRelationshipName %> = this
            <%_ } else if (otherEntityRelationshipNamePlural !== '' &&  ownerSide === false &&
                otherEntityNameCapitalized !== 'User' && relationshipType === 'many-to-many') {
                // JHipster version < 3.6.0 didn't ask for this relationship name _%>
        <%= otherEntityName %>.<%= otherEntityRelationshipNamePlural %>.add(this)
            <%_ } _%>
        return this
    }

    fun remove<%= relationshipNameCapitalized %>(<%= otherEntityName %>: <%= asEntity(otherEntityNameCapitalized) %>): <%= asEntity(entityClass) %> {
        this.<%= relationshipFieldNamePlural %>.remove(<%= otherEntityName %>)
            <%_ if (relationshipType === 'one-to-many') { _%>
        <%= otherEntityName %>.<%= otherEntityRelationshipName %> = null
            <%_ } else if (otherEntityRelationshipNamePlural !== '' && ownerSide === false &&
                 otherEntityNameCapitalized !== 'User' && relationshipType === 'many-to-many') {
                // JHipster version < 3.6.0 didn't ask for this relationship name _%>
        <%= otherEntityName %>.<%= otherEntityRelationshipNamePlural %>.remove(this)
            <%_ } _%>
        return this
    }
        <%_ } _%>
    <%_ } _%>
<%_ } _%>
    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here, do not remove

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is <%= asEntity(entityClass) %>) return false
        if (other.id == null || id == null) return false

        return id == other.id
    }

    override fun hashCode() = 31

    override fun toString() = "<%= asEntity(entityClass) %>{" +
        "id=$id" +
        <%_ for (idx in fields) {
            const fieldType = fields[idx].fieldType;
            const fieldTypeBlobContent = fields[idx].fieldTypeBlobContent;
            const fieldName = fields[idx].fieldName;
            const fieldInJavaBeanMethod = fields[idx].fieldInJavaBeanMethod;
            const isNumeric = ['integer', 'long', 'float', 'double', 'bigdecimal'].includes(fieldType.toLowerCase());_%>
        ", <%= fieldName %>=<% if (! isNumeric) { %>'<% } %>$<%= fieldName %><% if (! isNumeric) { %>'<% } %>" +
            <%_ if ((fieldType === 'byte[]' || fieldType === 'ByteBuffer') && fieldTypeBlobContent !== 'text') { _%>
        ", <%= fieldName %>ContentType='$<%= fieldName %>ContentType'" +
            <%_ } _%>
        <%_ } _%>
        "}"


    companion object {
        private const val serialVersionUID = 1L
        <%_ if (databaseType === 'couchbase') { _%>
        const val PREFIX = "<%= entityInstance.toLowerCase() %>"
        <%_ } _%>
    }
}
