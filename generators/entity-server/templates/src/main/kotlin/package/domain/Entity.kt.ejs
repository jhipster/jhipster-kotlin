<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.domain

<%_
let hasDto = dto === 'mapstruct';
let hasTextBlob = false;
let hasRelationship = relationships.length !== 0;
_%>
<%_
    for (idx in fields) {
        if (prodDatabaseType === 'postgresql' && fields[idx].fieldTypeBlobContent === 'text') {
            hasTextBlob = true;
            break;
        }
    }
_%>
<%_ if (databaseType === 'cassandra') { _%>
import org.springframework.data.annotation.Id
    <%_ if (fieldsContainBlob) { _%>
import org.springframework.data.cassandra.core.mapping.Column
    <%_ } _%>
import org.springframework.data.cassandra.core.mapping.Table
<%_ } _%>
<%_ if (relationshipsContainOtherSideIgnore === true) { _%>
import com.fasterxml.jackson.annotation.JsonIgnoreProperties
<%_ } _%>
<%_ if (!hasDto && typeof javadoc != 'undefined') { _%>
import io.swagger.annotations.ApiModel
<%_ } _%>
<%_ if (!hasDto && importApiModelProperty === true) { _%>
import io.swagger.annotations.ApiModelProperty
<%_ } _%>
<%_ if (enableHibernateCache) { _%>
import org.hibernate.annotations.Cache
import org.hibernate.annotations.CacheConcurrencyStrategy
<%_ } _%>
<%_ if (!reactive && (hasTextBlob === true || (fieldsContainUUID === true && ['mysql', 'mariadb'].includes(prodDatabaseType)))) { _%>
import org.hibernate.annotations.Type
<%_ } _%>
<%_ if (databaseType === 'mongodb') {
    if (!embedded) { _%>
import org.springframework.data.annotation.Id
import org.springframework.data.mongodb.core.mapping.Document
    <%_ } _%>
import org.springframework.data.mongodb.core.mapping.Field
    <%_ if (hasRelationship) { _%>
import org.springframework.data.mongodb.core.mapping.DBRef
    <%_ } _%>
<%_ } else if (databaseType === 'couchbase') {
    if (!embedded) { _%>
import org.springframework.data.annotation.Id
import org.springframework.data.couchbase.core.mapping.Document
import org.springframework.data.couchbase.core.mapping.id.GeneratedValue
import org.springframework.data.couchbase.core.mapping.id.IdPrefix
    <%_ } _%>
import com.couchbase.client.java.repository.annotation.Field
    <%_ if (hasRelationship) { _%>
import org.springframework.data.couchbase.core.query.FetchType
import org.springframework.data.couchbase.core.query.N1qlJoin
    <%_ } _%>
<%_ } else if (databaseType === 'neo4j') { _%>
import org.neo4j.springframework.data.core.schema.GeneratedValue
import org.neo4j.springframework.data.core.schema.Id
import org.neo4j.springframework.data.core.schema.Node
import org.neo4j.springframework.data.core.schema.Property
import org.neo4j.springframework.data.core.support.UUIDStringGenerator
    <%_ if (hasRelationship) { _%>
import org.neo4j.springframework.data.core.schema.Relationship
    <%_ } _%>
<%_ } if (databaseType === 'sql') { _%>
    <%_ if (reactive) { _%>
import org.springframework.data.annotation.Id;
import org.springframework.data.annotation.Transient;
import org.springframework.data.relational.core.mapping.Column;
import org.springframework.data.relational.core.mapping.Table;
    <%_ } else { _%>
import javax.persistence.*
    <%_ } _%>
<%_ } if (validation) { _%>
import javax.validation.constraints.*
<%_ } _%>

<%_ if (searchEngine === 'elasticsearch') { _%>
import org.springframework.data.elasticsearch.annotations.FieldType
<%_ } _%>
import java.io.Serializable
<%_ if (fieldsContainBigDecimal === true) { _%>
import java.math.BigDecimal
<%_ } if (fieldsContainBlob && databaseType === 'cassandra') { _%>
import java.nio.ByteBuffer
<%_ } if (fieldsContainInstant === true) { _%>
import java.time.Instant
<%_ } if (fieldsContainLocalDate === true) { _%>
import java.time.LocalDate
<%_ } if (fieldsContainZonedDateTime === true) { _%>
import java.time.ZonedDateTime
<%_ } if (fieldsContainDuration === true) { _%>
import java.time.Duration
<%_ } _%>
<%_ if ((!embedded && primaryKey.type === 'UUID') || fieldsContainUUID === true) { _%>
import java.util.UUID
<%_ }
Object.keys(uniqueEnums).forEach(function(element) { _%>

import <%= packageName %>.domain.enumeration.<%= element %>
<%_ }); _%>

<%_ if (databaseType === 'couchbase' && !embedded) { _%>
import <%= packageName %>.config.ID_DELIMITER
import org.springframework.data.couchbase.core.mapping.id.GenerationStrategy.UNIQUE

<%_ } _%>
<%_ if (typeof javadoc == 'undefined') { _%>
/**
 * A <%= asEntity(entityClass) %>.
 */
<%_ } else { _%>
<%- formatAsClassJavadoc(javadoc) %>
    <%_ if (!hasDto) { _%>
@ApiModel(description = "<%- formatAsApiDescription(javadoc) %>")
    <%_ }_%>
<%_ } _%>
<%_ if (databaseType === 'sql') { _%>
    <%_ if (reactive) { _%>
@Table("<%= entityTableName %>")
    <%_ } else { _%>
@Entity
@Table(name = "<%= entityTableName %>")
        <%_ if (enableHibernateCache) { _%>
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
        <%_ } _%>
    <%_ } _%>
<%_ } _%>
<%_ if (!embedded) { _%>
    <%_ if (databaseType === 'mongodb') { _%>
@Document(collection = "<%= entityTableName %>")
    <%_ } else if (databaseType === 'neo4j') { _%>
    @Node
    <%_ } else if (databaseType === 'couchbase') { _%>
@Document
    <%_ } else if (databaseType === 'cassandra') { _%>
@Table("<%= entityInstance %>")
    <%_ } _%>
<%_ } _%>
<%_ if (searchEngine === 'elasticsearch') { _%>
@org.springframework.data.elasticsearch.annotations.Document(indexName = "<%= entityInstance.toLowerCase() %>")
    <%_ } _%>
data class <%= asEntity(entityClass) %>(
    <%_ if (!embedded) { _%>
    @Id
        <%_ if (databaseType === 'sql' && isUsingMapsId === false && !reactive && !primaryKey.composite) { _%>
            <%_ if (primaryKey.fields[0].jpaGeneratedValue === 'identity') { _%>
    @GeneratedValue(strategy = GenerationType.IDENTITY)
            <%_ } else if (primaryKey.fields[0].jpaGeneratedValue === 'sequence') { _%>
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "sequenceGenerator")
    @SequenceGenerator(name = "sequenceGenerator")
            <%_ } else if (primaryKey.fields[0].jpaGeneratedValue) { _%>
    @GeneratedValue
            <%_ } _%>
        <%_ } else if (databaseType === 'couchbase' && !embedded) { _%>
    @GeneratedValue(strategy = UNIQUE, delimiter = ID_DELIMITER)
        <%_ } else if (databaseType === 'neo4j') { _%>
    @GeneratedValue(UUIDStringGenerator::class)
        <%_ } _%>
    var <%= primaryKey.name %>: <%= primaryKey.type %>? = null,
    <%_ } _%>
<%_
// TODO temporary calculation update this later.
const relationshipLength = relationships.filter(r => {
    const oside = r.ownerSide || false;
    return !(embedded && !r.otherEntityIsEmbedded && oside === false);
}).length - 1;

for (idx in fields) {
    if (fields[idx].id) continue;
    if (typeof fields[idx].javadoc !== 'undefined') { _%>
<%- formatAsFieldJavadoc(fields[idx].javadoc) %>
    <%_ }
    let required = false;
    let unique = false;
    const fieldValidate = fields[idx].fieldValidate;
    const fieldValidateRules = fields[idx].fieldValidateRules;
    const fieldValidateRulesMaxlength = fields[idx].fieldValidateRulesMaxlength;
    const fieldType = fields[idx].fieldType;
    const fieldTypeBlobContent = fields[idx].fieldTypeBlobContent;
    const fieldName = fields[idx].fieldName;
    const fieldNameUnderscored = fields[idx].fieldNameUnderscored;
    const fieldNameAsDatabaseColumn = fields[idx].fieldNameAsDatabaseColumn;
    const comma = (parseInt(idx, 10) === (fields.length - 1) && relationshipLength < 0 ) ?  '' : ',';
    if (fieldValidate === true) {
        if (fieldValidateRules.includes('required')) {
            required = true;
        }
        if (fieldValidateRules.includes('unique')) {
            unique = true;
        } _%>
    <%- include('../common/field_validators', {field: fields[idx]}); -%>
    <%_ } _%>
    <%_ if (!hasDto && typeof fields[idx].javadoc != 'undefined') { _%>
    @ApiModelProperty(value = "<%- formatAsApiDescription(fields[idx].javadoc) %>"<% if (required) { %>, required = true<% } %>)
    <%_ } _%>
    <%_ if (databaseType === 'sql' && reactive) { _%>
        @Column("<%- fieldNameAsDatabaseColumn %>")
    <%_ } _%>
    <%_ if (databaseType === 'sql' && !reactive) {
            if (fields[idx].fieldIsEnum) { _%>
    @Enumerated(EnumType.STRING)
        <%_ }
        if (fieldType === 'byte[]') { _%>
    @Lob
        <%_ if ((prodDatabaseType === 'postgresql' || devDatabaseType === 'postgresql') && fieldTypeBlobContent === 'text' ) { _%>
        @Type(type = "org.hibernate.type.TextType")
        <%_ }
        }
        if (['Instant', 'ZonedDateTime', 'LocalDate', 'Duration'].includes(fieldType)) { _%>
    @Column(name = "<%-fieldNameAsDatabaseColumn %>"<% if (required) { %>, nullable = false<% } %><% if (unique) { %>, unique = true<% } %>)
        <%_ } else if (fieldType === 'BigDecimal') { _%>
    @Column(name = "<%-fieldNameAsDatabaseColumn %>", precision = 21, scale = 2<% if (required) { %>, nullable = false<% } %><% if (unique) { %>, unique = true<% } %>)
        <%_ } else if (fieldType === 'UUID' && ['mysql', 'mariadb'].includes(prodDatabaseType)) { _%>
    @Type(type = "uuid-char")
    @Column(name = "<%-fieldNameAsDatabaseColumn %>", length = 36<% if (required) { %>, nullable = false<% } %><% if (unique) { %>, unique = true<% } %>)
        <%_ } else { _%>
    @Column(name = "<%-fieldNameAsDatabaseColumn %>"<% if (fieldValidate === true) { %><% if (fieldValidateRules.includes('maxlength')) { %>, length = <%= fieldValidateRulesMaxlength %><% } %><% if (required) { %>, nullable = false<% } %><% if (unique) { %>, unique = true<% } %><% } %>)
        <%_ }
    } _%>
    <%_ if (databaseType === 'mongodb' || databaseType === 'couchbase') { _%>
    @Field("<%=fieldNameUnderscored %>")
    <%_ } _%>
    <%_ if (databaseType === 'neo4j') { _%>
    @Property("<%=fieldNameUnderscored %>")
    <%_ } _%>
    <%_ if (fieldTypeBlobContent !== 'text') { _%>
    var <%= fieldName %>: <% if(fieldType === 'byte[]') { _%>ByteArray<%_ } else if(fieldType==='Integer'){ _%>Int<%_ } else { _%><%= fieldType %><% } %>? = null<%_ if (fieldType === 'byte[]' || fieldType === 'ByteBuffer') { _%>,<%_ } else { _%><%= comma %><%_ } %>
    <%_ } else { _%>
    var <%= fieldName %>: String? = null<%= comma %>
    <%_ } _%>

    <%_ if (fields[idx].fieldWithContentType) { _%>
        <%_ if ((databaseType === 'sql' && !reactive) || databaseType === 'cassandra') { _%>
    @Column(<% if (databaseType !== 'cassandra') { %>name = <% } %>"<%-fieldNameAsDatabaseColumn %>_content_type"<% if (required && databaseType !== 'cassandra') { %>, nullable = false<% } %>)
        <%_ if (required && databaseType === 'cassandra') { _%>
    @field:NotNull
        <%_ } _%>
      <%_ } _%>
    <%_ if (databaseType === 'sql' && reactive) { _%>
    @Column("<%- fieldNameAsDatabaseColumn %>_content_type")
    <%_ if (required) { _%>
    @NotNull
    <%_ } _%>
    <%_ } _%>
      <%_ if (databaseType === 'mongodb' || databaseType === 'couchbase') { _%>
    @Field("<%=fieldNameUnderscored %>_content_type")
      <%_ } _%>
      <%_ if (databaseType === 'neo4j') { _%>
    @Property("<%=fieldNameUnderscored %>_content_type")
      <%_ } _%>
    var <%= fieldName %>ContentType: String? = null<%= comma %>

    <%_ } _%>
    <%_ }
    relationships.forEach((relationship, idx) => {
        const otherEntityRelationshipName = relationships[idx].otherEntityRelationshipName;
        const otherEntityRelationshipNamePlural = relationships[idx].otherEntityRelationshipNamePlural;
        const otherEntityIsEmbedded = relationships[idx].otherEntityIsEmbedded;
        const relationshipName = relationships[idx].relationshipName;
        const relationshipFieldName = relationships[idx].relationshipFieldName;
        const relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural;
        const relationshipType = relationships[idx].relationshipType;
        const relationshipValidate = relationships[idx].relationshipValidate;
        const relationshipRequired = relationships[idx].relationshipRequired;
        const otherEntityNameCapitalized = relationships[idx].otherEntityNameCapitalized;
        const ownerSide = relationships[idx].ownerSide || false;
        const isUsingMapsId = relationships[idx].useJPADerivedIdentifier;
        const comma = parseInt(idx,10) === relationshipLength ?  '' : ',';
        if (otherEntityRelationshipName) {
            mappedBy = otherEntityRelationshipName.charAt(0).toLowerCase() + otherEntityRelationshipName.slice(1)
        }

        // An embedded entity should not reference entities that embeds it, unless the other entity is also embedded
        if (embedded && !otherEntityIsEmbedded && ownerSide === false) {
          return;
        }
        
        if (typeof relationships[idx].javadoc != 'undefined') { _%>
<%- formatAsFieldJavadoc(relationships[idx].javadoc) %>
            <%_ if (!hasDto) { _%>
    @ApiModelProperty(value = "<%- formatAsApiDescription(relationships[idx].javadoc) %>")
            <%_ }_%>
    <%_ }
        if (relationshipType === 'one-to-many') {
            if (databaseType === 'sql' && !reactive) {
    _%>
    @OneToMany(mappedBy = "<%= otherEntityRelationshipName %>")
            <%_ if (enableHibernateCache) { _%>
    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
            <%_ }
        } else if (databaseType === 'mongodb' || databaseType === 'couchbase') {
            if (databaseType === 'mongodb' && !otherEntityIsEmbedded) { _%>
    @DBRef
        <%_ } _%>
    @Field("<%= relationshipFieldName %>")
        <%_ if (databaseType === 'couchbase' && !otherEntityIsEmbedded) { _%>
    var <%= relationshipFieldName %>Ids: HashSet<String> = hashSetOf(),

    @N1qlJoin(on = "lks.<%= relationshipFieldName %>=meta(rks).id", fetchType = FetchType.IMMEDIATE)
        <%_ } _%>
        <%_ } else if (databaseType === 'neo4j') { _%>
    @Relationship
        <%_ } else if (databaseType === 'sql' && reactive) { _%>
    @Transient
        <%_ } _%>
        <%_ if (relationship.ignoreOtherSideProperty) { _%>
    @JsonIgnoreProperties(value = [
        <%_ relationship.otherEntity.relationships.forEach(otherRelationship => { _%>
        "<%= otherRelationship.relationshipReferenceField %>",
        <%_ }); _%>
        ], allowSetters = true)
        <%_ } _%>
    var <%= relationshipFieldNamePlural %>: MutableSet<<%= asEntity(otherEntityNameCapitalized) %>> = mutableSetOf()<%= comma %>

    <%_ } else if (relationshipType === 'many-to-one') {
            if (databaseType === 'sql' && !reactive) {
    _%>
    @ManyToOne<%_ if (relationshipRequired) { _%>(optional = false)<%_ } _%>
        <%_ if (relationshipValidate) { _%>
    <%- include('relationship_validators', { relationships, idx }); -%>
        <%_ }
    } else if ((databaseType === 'mongodb' || databaseType === 'couchbase') && !otherEntityIsEmbedded) {
        if (databaseType === 'mongodb') { _%>
    @DBRef
    <%_ } _%>
    @Field("<%= relationshipFieldName %>")
    <%_ if (databaseType === 'couchbase') { _%>
    var <%= relationshipFieldName %>Id: String? = null,

    @N1qlJoin(on = "lks.<%= relationshipFieldName %>=meta(rks).id", fetchType = FetchType.IMMEDIATE)
    <%_ }
    } else if (databaseType === 'neo4j') { _%>
    @Relationship("<%= relationshipFieldName %>")
    <%_ } _%>
    <%_ if (relationship.ignoreOtherSideProperty) { _%>
    @JsonIgnoreProperties(value = [
        <%_ relationship.otherEntity.relationships.forEach(otherRelationship => { _%>
        "<%= otherRelationship.relationshipReferenceField %>",
        <%_ }); _%>
    ], allowSetters = true)
    <%_ } _%>
    <%_ if (databaseType === 'sql' && reactive) { _%>
    @Transient
    <%_ } _%>
    var <%= relationshipFieldName %>: <%= asEntity(otherEntityNameCapitalized) %>? = null<%= comma %>

    <%_ if (databaseType === 'sql' && reactive) { _%>
    @Column("<%= getColumnName(relationshipName) %>_id")
    var <%= relationshipFieldName %>Id: Long? = null<%= comma %>
    <%_ } _%>

    <%_ } else if (relationshipType === 'many-to-many') {
        if (databaseType === 'sql' && !reactive) { _%>
    @ManyToMany<% if (ownerSide === false) { %>(mappedBy = "<%= otherEntityRelationshipNamePlural %>")<% } %>
        <%_ if (enableHibernateCache) { _%>
    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
        <%_ } if (ownerSide === true) {
            if (relationshipValidate) { _%>
    <%- include('relationship_validators', { relationships, idx }); -%>
        <%_ } _%>
    @JoinTable(name = "<%= relationship.joinTable.name %>",
        joinColumns = [<%_ entity.primaryKey.fields.forEach((field, idx) => { _%> 
            JoinColumn(name = "<%= `${entityTableName}_${field.columnName}` %>") <%= idx === 0 ? '' : ',' %>
            <%_ } _%> 
        ],
        inverseJoinColumns = [<%_ relationship.otherEntity.primaryKey.fields.forEach((field, idx) => { _%>
            JoinColumn(name =  "<%= `${relationship.columnName}_${field.columnName}` %>")<%= idx === 0 ? '' : ',' %>
            <%_ } _%> 
        ])
        <%_ }
        } else if ((databaseType === 'mongodb' || databaseType === 'couchbase') && !otherEntityIsEmbedded) {
            if (databaseType === 'mongodb') { _%>
    @DBRef
            <%_ } _%>
    @Field("<%= relationshipFieldNamePlural %>")
        <%_ if (databaseType === 'couchbase') { _%>
    var <%= relationshipFieldName %>Ids: HashSet<String> = hashSetOf(),

    @N1qlJoin(on = "lks.<%= relationshipFieldNamePlural %>=meta(rks).id", fetchType = FetchType.IMMEDIATE)
        <%_ }
        } if (relationship.ignoreOtherSideProperty) { _%>
    @JsonIgnoreProperties(value = [
        <%_ relationship.otherEntity.relationships.forEach(otherRelationship => { _%>
        "<%= otherRelationship.relationshipReferenceField %>",
        <%_ }); _%>
        ], allowSetters = true)
    <%_ } _%>
    <%_ if (databaseType === 'sql' && reactive) { _%>
    @Transient
    <%_ } _%>
    var <%= relationshipFieldNamePlural %>: MutableSet<<%= asEntity(otherEntityNameCapitalized) %>> = mutableSetOf()<%= comma %>

    <%_ } else {
        if (databaseType === 'sql' && !reactive) {
            if (relationship.ignoreOtherSideProperty) { _%>
    @JsonIgnoreProperties(value = [
        <%_ relationship.otherEntity.relationships.forEach(otherRelationship => { _%>
        "<%= otherRelationship.relationshipReferenceField %>",
        <%_ }); _%>
        ], allowSetters = true)
        <%_ }
            if (ownerSide) { _%>
    @OneToOne<%_ if (relationshipRequired) { _%>(optional = false)<%_ } _%>
            <%_ if (relationshipValidate) { _%>
    <%- include('relationship_validators', { relationships, idx }); -%>
            <%_ }_%>
            <%_ if (isUsingMapsId === true) { %>
    @MapsId
    @JoinColumn(name = "<%= relationship.otherEntity.primaryKey.fields[0].columnName %>")
            <%_ } else { _%>
    @JoinColumn(unique = true)
            <%_ } _%>
        <%_ } else { _%>
    @OneToOne(mappedBy = "<%= otherEntityRelationshipName %>")
        <%_ }
        } else if ((databaseType === 'mongodb' || databaseType === 'couchbase') && !otherEntityIsEmbedded) {
            if (databaseType === 'mongodb') { _%>
    @DBRef
        <%_ } _%>
    @Field("<%= relationshipFieldName %>")
     <%_ if (databaseType === 'couchbase') { _%>
    var <%= relationshipFieldName %>Id: String? = null,

    @N1qlJoin(on = "lks.<%= relationshipFieldName %>=meta(rks).id", fetchType = FetchType.IMMEDIATE)
    <%_ } 
    } else if (databaseType === 'sql' && reactive) { _%>
        <%_ if (ownerSide === true && isUsingMapsId !== true) { _%>
    var <%= relationshipFieldName %>Id: Long? = null,
        <%_ } _%>
    @Transient
    <%_ } _%>
    var <%= relationshipFieldName %>: <%= asEntity(otherEntityNameCapitalized) %>? = null<%= comma %>

    <%_ }
}); _%>
    // jhipster-needle-entity-add-field - JHipster will add fields here
) : Serializable {
<%_ if (databaseType === 'couchbase' && !embedded) { _%>

    @Suppress("unused")
    @IdPrefix
    private val prefix: String = PREFIX
<%_ } _%>
<%_
    for (idx in relationships) {
        const relationship = relationships[idx];
        const relationshipFieldName = relationships[idx].relationshipFieldName;
        const ownerSide = relationships[idx].ownerSide || false;
        const relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural;
        const relationshipType = relationships[idx].relationshipType;
        const otherEntityNameCapitalized = relationships[idx].otherEntityNameCapitalized;
        const relationshipNameCapitalized = relationships[idx].relationshipNameCapitalized;
        const otherEntityName = relationships[idx].otherEntityName;
        const otherEntityNamePlural = relationships[idx].otherEntityNamePlural;
        const otherEntityRelationshipName = relationships[idx].otherEntityRelationshipName;
        const otherEntityRelationshipNamePlural = relationships[idx].otherEntityRelationshipNamePlural;
        const otherEntityRelationshipNameCapitalized = relationships[idx].otherEntityRelationshipNameCapitalized;
        const otherEntityRelationshipNameCapitalizedPlural = relationships[idx].otherEntityRelationshipNameCapitalizedPlural;
        const otherEntityIsEmbedded = relationships[idx].otherEntityIsEmbedded;

        // An embedded entity should not reference entities that embeds it, unless the other entity is also embedded
        if (embedded && !otherEntityIsEmbedded && ownerSide === false) {
            continue;
        }

        const useJPADerivedIdentifier = relationships[idx].useJPADerivedIdentifier;
        const reactiveRelationshipWithId = (databaseType === 'sql' && reactive && !(relationshipType === 'one-to-one' &&
                (ownerSide === false || (ownerSide === true && useJPADerivedIdentifier === true))));
    _%>
    <%_ if (relationshipType === 'one-to-many' || relationshipType === 'many-to-many') { _%>
        <%_ if (fluentMethods) { _%>

    fun add<%= relationshipNameCapitalized %>(<%= otherEntityName %>: <%= asEntity(otherEntityNameCapitalized) %>): <%= asEntity(entityClass) %> {
        this.<%= relationshipFieldNamePlural %>.add(<%= otherEntityName %>)
        <%_ if (!otherEntityIsEmbedded || embedded && ownerSide === true) { _%>
            <%_ if (databaseType === 'couchbase' && !otherEntityIsEmbedded) { _%>
        <%= otherEntityName %>.<%= primaryKey.name %>?.let { this.<%= relationshipFieldName %>Ids.add(it) }
            <%_ } _%>
            <%_ if (relationship.otherRelationship) {
                    if (relationshipType === 'one-to-many') {
                        if (databaseType !== 'neo4j') { _%>
        <%= otherEntityName %>.<%= otherEntityRelationshipName %> = this
                <%_ } _%>
            <%_ } else if (otherEntityRelationshipNameCapitalizedPlural && asEntity(otherEntityNameCapitalized)!=='User' && relationshipType === 'many-to-many') {
                // JHipster version < 3.6.0 didn't ask for this relationship name _%>
        <%= otherEntityName %>.<%= otherEntityRelationshipNamePlural %>.add(this)
                <%_ } _%>
            <%_ } _%>
        <%_ } _%>
        return this
    }

    fun remove<%= relationshipNameCapitalized %>(<%= otherEntityName %>: <%= asEntity(otherEntityNameCapitalized) %>): <%= asEntity(entityClass) %> {
        this.<%= relationshipFieldNamePlural %>.remove(<%= otherEntityName %>)
        <%_ if (!otherEntityIsEmbedded || (embedded && ownerSide === true)) { _%>
            <%_ if (databaseType === 'couchbase' && !otherEntityIsEmbedded) { _%>
        <%= otherEntityName %>.<%= primaryKey.name %>?.let { this.<%= relationshipFieldName %>Ids.remove(it) }
            <%_ } _%>
            <%_ if (relationship.otherRelationship) {
                    if (relationshipType === 'one-to-many') {
                        if (databaseType !== 'neo4j') { _%>
        <%= otherEntityName %>.<%= otherEntityRelationshipName %> = null
                <%_ } _%>
            <%_ } else if (otherEntityRelationshipNamePlural !== '' && ownerSide === false &&
                 otherEntityNameCapitalized !== 'User' && relationshipType === 'many-to-many') {
                // JHipster version < 3.6.0 didn't ask for this relationship name _%>
        <%= otherEntityName %>.<%= otherEntityRelationshipNamePlural %>.remove(this)
                <%_ } _%>
            <%_ } _%>
        <%_ } _%>
        return this
    }
        <%_ } _%>
    <%_ } _%>
<%_ } _%>
    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is <%= asEntity(entityClass) %>) return false

        <%_ if (!embedded) { _%>
        return <%= primaryKey.name %> != null && other.<%= primaryKey.name %> != null && <%= primaryKey.name %> == other.<%= primaryKey.name %>
        <%_ } else { _%>
        return false;
        <%_ } _%>
    }

    override fun hashCode() = 31

    override fun toString() = "<%= asEntity(entityClass) %>{" +
        <%_ if (!embedded) { _%>
        "<%= primaryKey.name %>=$<%= primaryKey.name %>" +
        <%_ } _%>
        <%_ for (idx in fields) {
            if (fields[idx].id) continue;
            const fieldType = fields[idx].fieldType;
            const fieldTypeBlobContent = fields[idx].fieldTypeBlobContent;
            const fieldName = fields[idx].fieldName;
            const fieldInJavaBeanMethod = fields[idx].fieldInJavaBeanMethod;
            const isNumeric = ['integer', 'long', 'float', 'double', 'bigdecimal'].includes(fieldType.toLowerCase());_%>
        ", <%= fieldName %>=<% if (! isNumeric) { %>'<% } %>$<%= fieldName %><% if (! isNumeric) { %>'<% } %>" +
            <%_ if (fields[idx].fieldWithContentType) { _%>
        ", <%= fieldName %>ContentType='$<%= fieldName %>ContentType'" +
            <%_ } _%>
        <%_ } _%>
        <%_ for (idx in relationships) {
            const relationshipType = relationships[idx].relationshipType;
            const otherEntityIsEmbedded = relationships[idx].otherEntityIsEmbedded;
            const relationshipFieldName = relationships[idx].relationshipFieldName;
            const relationshipNameCapitalized = relationships[idx].relationshipNameCapitalized;
            const relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural;
            const relationshipNameCapitalizedPlural = relationships[idx].relationshipNameCapitalizedPlural;
            const ownerSide = relationships[idx].ownerSide; _%>
        <%_ if (otherEntityIsEmbedded) {
                if (relationshipType === 'many-to-one') { _%>
        ", <%= relationshipFieldNamePlural %>='$<%= relationshipFieldNamePlural %>'" +
        <%_ } else if (relationshipType === 'one-to-one' && ownerSide === true) {
            _%>
        ", <%= relationshipFieldName %>='$<%= relationshipFieldName %>'" +
        <%_ } } } _%>
        "}"


    companion object {
        private const val serialVersionUID = 1L
        <%_ if (databaseType === 'couchbase' && !embedded) { _%>
        const val PREFIX = "<%= entityInstance.toLowerCase() %>"
        <%_ } _%>
    }
}
