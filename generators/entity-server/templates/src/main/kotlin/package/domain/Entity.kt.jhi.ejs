
<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<&_
 // Register sections and max allowed fragments, 0 for unlimited.
  fragments.registerSections({
    importSection: 0,
    staticImportSection: 0,
    annotationSection: 0,
    extendsSection: 1,
    additionalInterfacesSection: 0,
    classStaticFieldsSection: 0,
    classFieldsSection: 0,
    classAdditionalFieldsSection: 0,
    classAdditionalFieldsMethodsSection: 0,
    classAdditionalRelationshipsSection: 0,
    classAdditionalRelationshipsMethodsSection: 0,
<%_ for (const field of fields) { _%>
    field<%- field.fieldNameCapitalized %>CustomDeclarationSection: 1,
    field<%- field.fieldNameCapitalized %>CustomMethodsSection: 1,
    field<%- field.fieldNameCapitalized %>AnnotationSection: 0,
  <%_ if (field.fieldWithContentType) { _%>
    field<%- field.fieldNameCapitalized %>ContentTypeAnnotationSection: 0,
  <%_ } _%>
    field<%- field.fieldNameCapitalized %>CustomSetSection: 1,
<%_ } _%>
<%_ for (const relationship of relationships) { _%>
    relationship<%- relationship.relationshipNameCapitalized %>AnnotationSection: 0,
    relationship<%- relationship.relationshipNameCapitalized %>CustomSetSection: 1,
    relationship<%- relationship.relationshipNameCapitalized %>CustomAddSection: 1,
    relationship<%- relationship.relationshipNameCapitalized %>CustomRemoveSection: 1,
<%_ } _%>
  });
-&>
package <%= entityAbsolutePackage %>.domain

<&- fragments.importSection() -&>
<%_ if (relationshipsContainOtherSideIgnore) { _%>
import com.fasterxml.jackson.annotation.JsonIgnoreProperties
<%_ } _%>
<%_ if (!dtoMapstruct && (typeof javadoc !== 'undefined' || importApiModelProperty)) { _%>
import io.swagger.v3.oas.annotations.media.Schema
<%_ } _%>

import java.io.Serializable
<%_ if (fieldsContainBigDecimal) { _%>
import java.math.BigDecimal
<%_ } if (fieldsContainInstant) { _%>
import java.time.Instant
<%_ } if (fieldsContainLocalDate) { _%>
import java.time.LocalDate
<%_ } if (fieldsContainZonedDateTime) { _%>
import java.time.ZonedDateTime
<%_ } if (fieldsContainDuration) { _%>
import java.time.Duration
<%_ } _%>
<%_ if (fieldsContainUUID || otherEntityPrimaryKeyTypesIncludesUUID) { _%>
import java.util.UUID
<%_ }
Object.keys(uniqueEnums).forEach(function(element) { _%>

import <%= entityAbsolutePackage %>.domain.enumeration.<%= element %>
<%_ }); _%>

<%_ for (const otherEntity of otherEntities.filter(otherEntity => otherEntity.entityPackage !== entityPackage)) { _%>
import <%= otherEntity.entityAbsoluteClass %>
<%_ } _%>

<%_ if (typeof javadoc == 'undefined') { _%>
/**
 * A <%= persistClass %>.
 */
<%_ } else { _%>
<%- formatAsClassJavadoc(javadoc) %>
    <%_ if (!dtoMapstruct) { _%>
@Schema(description = "<%- formatAsApiDescription(javadoc) %>")
    <%_ } _%>
<%_ } _%>
<&- fragments.annotationSection() -&>
@SuppressWarnings("common-java:DuplicatedBlocks")
data class <%= persistClass %>(
    <%_ if (!embedded && primaryKey.composite) { _%>
    @Id
    var <%= primaryKey.name %>: <%= primaryKey.type %>? = null,
    <%_ } _%>

    <&- fragments.classFieldsSection() -&>

    <%_ for (const field of fields.filter(field => !field.javaInherited && !field.transient && (embedded || !field.id || !primaryKey.composite))) { _%>
    <&- fragments.field<%- field.fieldNameCapitalized %>CustomDeclarationSection() -&>
    <&_ if (!fragments.field<%- field.fieldNameCapitalized %>CustomDeclarationSection()) { -&>
        <%_ if (typeof field.javadoc !== 'undefined') { _%>
    <%- formatAsFieldJavadoc(field.javadoc) %>
        <%_ } _%>
        <%_ if (!dtoMapstruct && typeof field.javadoc !== 'undefined') { _%>
        @Schema(description = "<%- formatAsApiDescription(field.javadoc) %>"<% if (field.fieldValidationRequired) { %>, required = true<% } %>)
        <%_ } _%>
    <&- fragments.field<%- field.fieldNameCapitalized %>AnnotationSection() -&>
        var <%= field.fieldName %>: <% if(field.fieldTypeBlobContent === 'text') { _%>String<% } else if(field.fieldType === 'byte[]' && field.fieldTypeBlobContent !== 'text') { _%>ByteArray<%_ } else if(field.fieldType==='Integer'){ _%>Int<%_ } else { _%><%= field.fieldType %><% } %>? = null,
        <%_ if (field.fieldWithContentType) { _%>
    <&- fragments.field<%- field.fieldNameCapitalized %>ContentTypeAnnotationSection() -&>
        var <%= field.fieldName %>ContentType: String? = null,
        <%_ } _%>
    <&_ } -&>
    <%_ } _%>
    <&- fragments.classAdditionalFieldsSection() -&>
    
<&- fragments.classAdditionalRelationshipsSection() -&>
    // jhipster-needle-entity-add-field - JHipster will add fields here
) : <&- fragments.extendsSection() -&> Serializable<&- fragments.additionalInterfacesSection() -&> {

  <%_
    // An embedded entity should not reference entities that embed it, unless the other entities are also embedded
    for (relationship of relationships.filter(relationship => !relationship.embedded || relationship.otherEntity.embedded || relationship.ownerSide)) {
        if (typeof relationship.javadoc !== 'undefined') { _%>
    <%- formatAsFieldJavadoc(relationship.javadoc) %>
        <%_ if (!dtoMapstruct) { _%>
        @Schema(description = "<%- formatAsApiDescription(relationship.javadoc) %>")
        <%_ } _%>
    <%_ } _%>
    <&- fragments.relationship<%- relationship.relationshipNameCapitalized %>AnnotationSection() -&>
        <%_ if (relationship.relationshipOneToMany) { _%>
            <%_ if (relationship.ignoreOtherSideProperty) { _%>
            @JsonIgnoreProperties(value = [
                <%_ relationship.otherEntity.relationships.forEach(otherRelationship => { _%>
                "<%= otherRelationship.relationshipReferenceField %>",
                <%_ }); _%>
            ], allowSetters = true)
    <%_ } _%>
    var <%= relationship.relationshipFieldNamePlural %>: MutableSet<<%= relationship.otherEntity.persistClass %>>? = mutableSetOf()
  <%_ } else if (relationship.relationshipManyToOne) { _%>
    <%_ if (relationship.ignoreOtherSideProperty) { _%>
    @JsonIgnoreProperties(value = [
      <%_ relationship.otherEntity.relationships.forEach(otherRelationship => { _%>
        "<%= otherRelationship.relationshipReferenceField %>",
      <%_ }); _%>
      ], allowSetters = true)
    <%_ } _%>
    var <%= relationship.relationshipFieldName %>: <%= relationship.otherEntity.persistClass %>? = null
  <%_ } else if (relationship.relationshipManyToMany) { _%>
    <%_ if (relationship.ignoreOtherSideProperty) { _%>
    @JsonIgnoreProperties(value = [
      <%_ relationship.otherEntity.relationships.forEach(otherRelationship => { _%>
        "<%= otherRelationship.relationshipReferenceField %>",
      <%_ }); _%>
      ], allowSetters = true)
    <%_ } _%>
    var <%= relationship.relationshipFieldNamePlural %>: MutableSet<<%= relationship.otherEntity.persistClass %>>? = mutableSetOf()
  <%_ } else { _%>
    var <%= relationship.relationshipFieldName %>: <%= relationship.otherEntity.persistClass %>? = null
  <%_ } _%>
<%_ }; _%>
  
  
    <&- fragments.classAdditionalFieldsMethodsSection('\n\n') -&>

    <%_
    for (const relationship of relationships) {
    // An embedded entity should not reference entities that embed it, unless the other entities are also embedded
    if (embedded && !relationship.otherEntity.embedded && !relationship.ownerSide) {
        continue;
    }
    _%>
    <&- fragments.relationship<%- relationship.relationshipNameCapitalized %>CustomSetSection() -&>
    <%_ if (fluentMethods) { _%>
      <%_ if (relationship.collection) { _%>
    <&- fragments.relationship<%- relationship.relationshipNameCapitalized %>CustomAddSection() -&>
    <&_ if (!fragments.relationship<%- relationship.relationshipNameCapitalized %>CustomAddSection()) { -&>
    fun add<%= relationship.relationshipNameCapitalized %>(<%= relationship.otherEntityName %>: <%= relationship.otherEntity.persistClass %>) : <%= persistClass %> {
        this.<%= relationship.relationshipFieldNamePlural %>?.add(<%= relationship.otherEntityName %>)
      <%_ if (!relationship.otherEntity.embedded || embedded && relationship.ownerSide) { _%>
        <%_ if (relationship.otherRelationship) { _%>
          <%_ if (!relationship.otherRelationship.collection) { _%>
        <%= relationship.otherEntityName %>.<%= relationship.otherRelationship.relationshipName %> = this
          <%_ } else if (relationship.otherRelationship.relationshipNamePlural && !relationship.otherEntityUser && relationship.otherRelationship.collection) { _%>
        <%= relationship.otherEntityName %>.<%= relationship.otherRelationship.relationshipNamePlural %>?.add(this);
          <%_ } _%>
        <%_ } _%>
      <%_ } _%>
        return this;
    }
    <&_ } -&>
    <&- fragments.relationship<%- relationship.relationshipNameCapitalized %>CustomRemoveSection() -&>
    <&_ if (!fragments.relationship<%- relationship.relationshipNameCapitalized %>CustomRemoveSection()) { -&>
    fun remove<%= relationship.relationshipNameCapitalized %>(<%= relationship.otherEntityName %>: <%= relationship.otherEntity.persistClass %>) : <%= persistClass %>{
        this.<%= relationship.relationshipFieldNamePlural %>?.remove(<%= relationship.otherEntityName %>)
      <%_ if (!relationship.otherEntity.embedded || (embedded && relationship.ownerSide)) { _%>
        <%_ if (relationship.otherRelationship) { _%>
          <%_ if (!relationship.otherRelationship.collection) { _%>
        <%= relationship.otherEntityName %>.<%= relationship.otherRelationship.relationshipName %> = null
          <%_ } else if (!relationship.otherEntityUser && relationship.otherRelationship.collection) { _%>
        <%= relationship.otherEntityName %>.<%= relationship.otherRelationship.relationshipNamePlural %>?.remove(this)
          <%_ } _%>
        <%_ } _%>
      <%_ } _%>
        return this;
    }
    <&_ } -&>
    <%_ } else { _%>
    fun <%= relationship.relationshipFieldName %>(<%= relationship.otherEntityName %>: <%= relationship.otherEntity.persistClass %>?): <%= persistClass %> {
        this.<%= relationship.relationshipName %> = <%= relationship.otherEntityName %>
        return this
    }
    <%_ } _%>
    <%_ } _%>
    <%_ } _%>

    <&- fragments.classAdditionalRelationshipsMethodsSection() -&>
    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here

    override fun hashCode(): Int {
        return javaClass.hashCode()
    }

    override fun equals(other: Any?): Boolean {
      if (this === other) return true
      if (other !is <%= persistClass %>) return false
      <%_ if (!embedded) { _%>
      return <%= primaryKey.name %> != null && other.<%= primaryKey.name %> != null && <%= primaryKey.name %> == other.<%= primaryKey.name %>
      <%_ } else { _%>
      return false
      <%_ } _%>
    }

    override fun toString(): String {
        return "<%= persistClass %>{" +
<%_ if (!embedded) { _%>
            "<%= primaryKey.name %>=" + <%= primaryKey.name %> +
<%_ } _%>
<%_ for (const field of fields.filter(field => !field.id && !field.transient)) {
  const isNumeric = field.fieldTypeNumeric; _%>
            ", <%= field.fieldName %>=<% if (! isNumeric) { %>'<% } %>" + <%= field.fieldName %> <% if (! isNumeric) { %>+ "'" <% } %>+
  <%_ if (field.fieldWithContentType) { _%>
            ", <%= field.fieldName %>ContentType='" + <%= field.fieldName %>ContentType + "'" +
  <%_ } _%>
<%_ } _%>
<%_ for (const relationship of relationships) { _%>
  <%_ if (relationship.otherEntity.embedded) {
    if (relationship.relationshipManyToOne) { _%>
            ", <%= relationship.relationshipFieldNamePlural %>='" + <%= relationship.relationshipNamePlural %> + "'" +
    <%_ } else if (relationship.relationshipOneToOne && relationship.ownerSide) { _%>
            ", <%= relationship.relationshipFieldName %>='" + <%= relationship.relationshipName %> + "'" +
    <%_ } _%>
  <%_ } _%>
<%_ } _%>
            "}";
    }

    companion object {
        private const val serialVersionUID = 1L
        <&- fragments.classStaticFieldsSection() -&>
    }
}
