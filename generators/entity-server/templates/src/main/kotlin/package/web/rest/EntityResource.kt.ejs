<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.web.rest

<%_
    const viaService = service !== 'no';
    let manyToManyWithUser = false;
    for (idx in relationships) {
        if (relationships[idx].otherEntityName === 'user' && relationships[idx].relationshipType === 'many-to-many') {
            manyToManyWithUser = true;
            break;
        }
    }
_%>
<%_ if (dto !== 'mapstruct' || service === 'no') { _%>
import <%= packageName %>.domain.<%= asEntity(entityClass) %>
<%_ } _%>
<%_ if (service !== 'no') { _%>
import <%= packageName %>.service.<%= entityClass %>Service
<%_ } else { _%>
import <%= packageName %>.repository.<%= entityClass %>Repository
    <%_ if (isUsingMapsId === true) { _%>
import <%= packageName %>.repository.<%= mapsIdAssoc.otherEntityNameCapitalized %>Repository
    <%_ } _%>
    <%_ if (searchEngine === 'elasticsearch') { _%>
import <%= packageName %>.repository.search.<%= entityClass %>SearchRepository
    <%_ } _%>
<%_ } _%>
<%_ if (saveUserSnapshot) { _%>
import <%= packageName %>.repository.UserRepository
<%_ } _%>
import <%= packageName %>.web.rest.errors.BadRequestAlertException
<%_ if (dto === 'mapstruct') { _%>
import <%= packageName %>.service.dto.<%= asDto(entityClass) %>
<%_ if (service === 'no') { _%>
import <%= packageName %>.service.mapper.<%= entityClass %>Mapper
<%_ } } _%>
<%_ if (jpaMetamodelFiltering) {  _%>
import <%= packageName %>.service.dto.<%= entityClass %>Criteria
import <%= packageName %>.service.<%= entityClass %>QueryService
<%_ } _%>

import tech.jhipster.web.util.HeaderUtil
<%_ if (pagination !== 'no') { _%>
import tech.jhipster.web.util.PaginationUtil
<%_ } _%>
import tech.jhipster.web.util.<% if (reactive) { %>reactive.<% } %>ResponseUtil
import org.slf4j.LoggerFactory
import org.springframework.beans.factory.annotation.Value
<%_ if (pagination !== 'no') { _%>
import org.springframework.data.domain.Page
import org.springframework.data.domain.Pageable
<%_ if (reactive) { _%>
import org.springframework.data.domain.PageImpl
<%_ } _%>
import org.springframework.http.HttpStatus
    <%_ if (reactive) { _%>
import org.springframework.http.server.reactive.ServerHttpRequest
    <%_ } _%>
    <%_ if (!reactive) { _%>
import org.springframework.web.servlet.support.ServletUriComponentsBuilder
    <%_ } else { _%>
import org.springframework.web.util.UriComponentsBuilder
    <%_ } _%>
<%_ } else if (reactiveRepositories) { _%>
import org.springframework.http.HttpStatus  
<%_ } _%>
<%_ if (reactiveRepositories) { _%>
import org.springframework.http.MediaType
<%_ } _%>
import org.springframework.http.ResponseEntity
<%_ if (databaseType === 'sql' && !viaService && (!saveUserSnapshot || isUsingMapsId === true)) { _%>
import org.springframework.transaction.annotation.Transactional
<%_ } _%>
import org.springframework.web.bind.annotation.*
<%_ if (reactiveRepositories) { _%>
import org.springframework.web.server.ResponseStatusException
import reactor.core.publisher.Flux
import reactor.core.publisher.Mono
<%_ } _%>

<%_ if (validation) { _%>
import javax.validation.Valid
<%_ } _%>

<%_ if (validation && !readOnly) { _%>
import javax.validation.constraints.NotNull
<%_ } _%>
import java.net.URI
import java.net.URISyntaxException<% if (isUsingMapsId === true) { %>
import java.util.Objects<% } %>
<%_ if (databaseType === 'cassandra') { _%>
import java.util.UUID
<%_ } _%>
<%_ if ((searchEngine !== false || fieldsContainNoOwnerOneToOne === true) && !reactive) { _%>
    <%_ if (!viaService) { _%>
import java.util.stream.Collectors
    <%_ } _%>
import java.util.stream.StreamSupport
<%_ } _%>
<%_ if (searchEngine === 'elasticsearch' && !reactive) { _%>
import org.elasticsearch.index.query.QueryBuilders.queryStringQuery
<%_ } _%>
<%_ if (!readOnly) { _%>
<%_
let entityName = entityInstance;
if (clientRootFolder && !skipUiGrouping) {
    entityName = _.camelCase(`${clientRootFolder}${entityClass}`)
}
_%>

private const val ENTITY_NAME = "<%= entityName %>"
<%_ } _%>
/**
 * REST controller for managing [<%= packageName %>.domain.<%= asEntity(entityClass) %>].
 */
@RestController
@RequestMapping("/api")
<%_ if (databaseType === 'sql' && !viaService && !saveUserSnapshot) { _%>
@Transactional
<%_ } _%>
class <%= entityClass %>Resource(
<%_
    const instanceType = (dto === 'mapstruct') ? asDto(entityClass) : asEntity(entityClass);
    const instanceName = (dto === 'mapstruct') ? asDto(entityInstance) : asEntity(entityInstance);
    const mapper = entityInstance  + 'Mapper';
    const entityToDtoReference = mapper + '::' + 'toDto';
_%><%- include('../../common/inject_template', {viaService: viaService, constructorName: entityClass + 'Resource', queryService: jpaMetamodelFiltering, isUsingMapsId: isUsingMapsId, mapsIdAssoc: mapsIdAssoc, isController: true}); -%>
) {

    private val log = LoggerFactory.getLogger(javaClass)
    <%_ if (!readOnly) { _%>
    @Value("\${jhipster.clientApp.name}")
    private var applicationName: String? = null
    <%_ } _%>

    <%_ if (!readOnly) { _%>
    /**
     * `POST  /<%= entityApiUrl %>` : Create a new <%= entityInstance %>.
     *
     * @param <%= instanceName %> the <%= instanceName %> to create.
     * @return the [ResponseEntity] with status `201 (Created)` and with body the new <%= instanceName %>, or with status `400 (Bad Request)` if the <%= entityInstance %> has already an ID.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */
    @PostMapping("/<%= entityApiUrl %>")
    fun create<%= entityClass %>(<% if (validation) { %>@Valid <% } %>@RequestBody <%= instanceName %>: <%= instanceType %>): <% if (reactive) { %>Mono<<% } %>ResponseEntity<<%= instanceType %>><% if (reactive) { %>><% } %> {
        log.debug("REST request to save <%= entityClass %> : $<%= instanceName %>")
        if (<%= instanceName %>.id != null) {
            throw BadRequestAlertException(
                "A new <%= entityInstance %> cannot already have an ID",
                ENTITY_NAME, "idexists"
            )
        }
        <%_ if (saveUserSnapshot) { %>
            <%_ if (manyToManyWithUser) { _%>
            if (<%= instanceName %>.users != null) {
                // Save users in case they are new and only exists in gateway
                userRepository.saveAll(<%= instanceName %>.users);
            }
            <%_ } else { _%>
            if (<%= instanceName %>.user != null) {
                // Save user in case it's new and only exists in gateway
                userRepository.save(<%= instanceName %>.user)
            }
            <%_ } _%>
        <%_ } _%>
        <%_ if (databaseType === 'cassandra') { _%>
        <%= instanceName %>.id = UUID.randomUUID()
        <%_ } _%>
        <%_ if (!reactive) { _%>
<%- include('../../common/save_template', {asEntity, asDto, viaService: viaService, returnDirectly: false, isUsingMapsId: isUsingMapsId, mapsIdAssoc: mapsIdAssoc, isController: true}); -%>
        return ResponseEntity.created(URI("/api/<%= entityApiUrl %>/${result.id}"))
            .headers(HeaderUtil.createEntityCreationAlert(applicationName, <%= enableTranslation %>, ENTITY_NAME, result.id<% if (primaryKeyType !== 'String') { %>.toString()<% } %>))
            .body(result)
        <%_ } else { _%>
<%- include('../../common/save_reactive_template', {asEntity, asDto, viaService: viaService, returnDirectly: false}); -%>
            .map { result -> 
                try {
                    ResponseEntity.created(URI("/api/<%= entityApiUrl %>/${result.id}"))
                        .headers(HeaderUtil.createEntityCreationAlert(applicationName, <%= enableTranslation %>, ENTITY_NAME, result.id<% if (primaryKeyType !== 'String') { %>.toString()<% } %>))
                        .body(result)
                } catch (e: URISyntaxException) {
                    throw RuntimeException(e)
                }
            }
        <%_ } _%>
    }

    /**
     * `PUT  /<%= entityApiUrl %>` : Updates an existing <%= entityInstance %>.
     *
     * @param <%= instanceName %> the <%= instanceName %> to update.
     * @return the [ResponseEntity] with status `200 (OK)` and with body the updated <%= instanceName %>,
     * or with status `400 (Bad Request)` if the <%= instanceName %> is not valid,
     * or with status `500 (Internal Server Error)` if the <%= instanceName %> couldn't be updated.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */
    @PutMapping("/<%= entityApiUrl %>")
    fun update<%= entityClass %>(<% if (validation) { %>@Valid <% } %>@RequestBody <%= instanceName %>: <%= instanceType %>): <% if (reactive) { %>Mono<<% } %>ResponseEntity<<%= instanceType %>><% if (reactive) { %>><% } %> {
        log.debug("REST request to update <%= entityClass %> : $<%= instanceName %>")
        if (<%= instanceName %>.id == null) {
            throw BadRequestAlertException("Invalid id", ENTITY_NAME, "idnull")
        }
        <%_ if (saveUserSnapshot) { %>
            <%_ if (manyToManyWithUser) { _%>
                if (<%= instanceName %>.users != null) {
                    // Save users in case they are new and only exists in gateway
                    userRepository.saveAll(<%= instanceName %>.users);
                }
                <%_ } else { _%>
                if (<%= instanceName %>.user != null) {
                    // Save user in case it's new and only exists in gateway
                    userRepository.save(<%= instanceName %>.user)
                }
                <%_ } _%>
        <%_ } _%>
        <%_ if (!reactive) { _%>
<%- include('../../common/save_template', {asEntity, asDto, viaService: viaService, returnDirectly: false, isUsingMapsId: false, mapsIdAssoc: mapsIdAssoc}); -%>
        return ResponseEntity.ok()
            .headers(
                HeaderUtil.createEntityUpdateAlert(
                    applicationName, <%= enableTranslation %>, ENTITY_NAME,
                     <%= instanceName %>.id<% if (primaryKeyType !== 'String') { %>.toString()<% } %>
                )
            )
            .body(result)
        <%_ } else { _%>
<%- include('../../common/save_reactive_template', {asEntity, asDto, viaService: viaService, returnDirectly: false}); -%>
                        .switchIfEmpty(Mono.error(ResponseStatusException(HttpStatus.NOT_FOUND)))
                        .map { result -> ResponseEntity.ok()
                            .headers(HeaderUtil.createEntityUpdateAlert(applicationName, <%= enableTranslation %>, ENTITY_NAME, result.id<% if (primaryKeyType !== 'String') { %>.toString()<% } %>))
                            .body(result)
                        }
                <%_ } _%>
    }
<%_ } _%>

/**
* {@code PATCH  /<%= entityApiUrl %>} : Updates given fields of an existing <%= entityInstance %>.
*
* @param <%= instanceName %> the <%= instanceName %> to update.
* @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated <%= instanceName %>,
* or with status {@code 400 (Bad Request)} if the <%= instanceName %> is not valid,
* or with status {@code 404 (Not Found)} if the <%= instanceName %> is not found,
* or with status {@code 500 (Internal Server Error)} if the <%= instanceName %> couldn't be updated.
* @throws URISyntaxException if the Location URI syntax is incorrect.
*/
@PatchMapping(value = "/<%= entityApiUrl %>", consumes = "application/merge-patch+json")
@Exception(URISyntaxException::class)
fun partialUpdate<%= entityClass %>: <% if (reactive) { %>Mono<<% } %>ResponseEntity<<%= instanceType %>><% if (reactive) { %>><% } %> (<% if (validation) { %>@NotNull <% } %>@RequestBody <%= instanceName %>:<%= instanceType %>) {
   log.debug("REST request to update <%= entityClass %> partially : {}", <%= instanceName %>)
   if (<%= instanceName %>.id == null) {
       throw BadRequestAlertException("Invalid id", ENTITY_NAME, "idnull")
   }
   <%_ if (saveUserSnapshot) { _%>
       <%_ if (manyToManyWithUser) { _%>
   if (<%= instanceName %>.users != null) {
       // Save users in case they are new and only exists in gateway
       userRepository.saveAll(<%= instanceName %>.users)
   }
       <%_ } else { _%>
   if (<%= instanceName %>.user != null) {
       // Save user in case it's new and only exists in gateway
       userRepository.save(<%= instanceName %>.user)
   }
       <%_ } _%>
   <%_ } _%>

   <%- include('../../common/patch_template', {asEntity, asDto, isService: false, viaService: viaService}); -%>
       <%_ if (!reactive) { _%>
   return ResponseUtil.wrapOrNotFound(
       result,
       HeaderUtil.createEntityUpdateAlert(applicationName, <%= enableTranslation %>, ENTITY_NAME, <%= instanceName %>.getId()<% if (primaryKeyType !== 'String') { %>.toString()<% } %>)
   )
       <%_ } else { _%>
   return result
       .switchIfEmpty(Mono.error(new ResponseStatusException(HttpStatus.NOT_FOUND)))
       .map(res -> ResponseEntity.ok()
       .headers(HeaderUtil.createEntityUpdateAlert(applicationName, <%= enableTranslation %>, ENTITY_NAME, res.getId()<% if (primaryKeyType !== 'String') { %>.toString()<% } %>))
       .body(res)
   )
       <%_ } _%>
}
<%_ } _%>
    /**
     * `GET  /<%= entityApiUrl %>` : get all the <%= entityInstancePlural %>.
     *
    <%_ if (pagination !== 'no') { _%>
     * @param pageable the pagination information.
        <%_ if (reactive) { _%>
     * @param request a [ServerHttpRequest] request.
        <%_ } _%>
    <%_ } _%>
    <%_ if (!jpaMetamodelFiltering && relationshipsContainEagerLoad) { _%>
     * @param eagerload flag to eager load entities from relationships (This is applicable for many-to-many).<% } if (jpaMetamodelFiltering) { %>
     * @param criteria the criteria which the requested entities should match.<% } else if (fieldsContainNoOwnerOneToOne) { %>
     * @param filter the filter of the request.<% } %>
     * @return the [ResponseEntity] with status `200 (OK)` and the list of <%= entityInstancePlural %> in body.
     */
    @GetMapping("/<%= entityApiUrl %>")<%_ if (databaseType === 'sql' && isUsingMapsId === true && !viaService) { %>
    @Transactional(readOnly = true)<%_ } _%>
    <%- include('../../common/get_all_template', {asEntity, asDto, viaService}); -%>

    <%_ if (reactiveRepositories && pagination === 'no') { _%>
    /**
     * `GET  /<%= entityApiUrl %>` : get all the <%= entityInstancePlural %> as a stream.
     * @return the [Flux] of <%= entityInstancePlural %>.
     */
    @GetMapping(value = ["/<%= entityApiUrl %>"], produces = [MediaType.APPLICATION_STREAM_JSON_VALUE])
    <%_ if (databaseType === 'sql' && isUsingMapsId === true && !viaService) { _%>
    @Transactional(readOnly = true)
    <%_ } _%>
    fun getAll<%= entityClassPlural %>AsStream(): Flux<<%= instanceType %>> {
        log.debug("REST request to get all <%= entityClassPlural %> as a stream")
        <%_ if (viaService) { _%>
        return <%= entityInstance %>Service.findAll()
        <%_ } else { _%>
        return <%= entityInstance %>Repository.findAll()<%_ if (dto === 'mapstruct') { _%>.map(<%= entityToDtoReference %>)<%_ } _%>
        <%_ } _%>
    }

    <%_ } _%>
    /**
     * `GET  /<%= entityApiUrl %>/:id` : get the "id" <%= entityInstance %>.
     *
     * @param id the id of the <%= instanceName %> to retrieve.
     * @return the [ResponseEntity] with status `200 (OK)` and with body the <%= instanceName %>, or with status `404 (Not Found)`.
     */
    @GetMapping("/<%= entityApiUrl %>/{id}")
    <%_ if (databaseType === 'sql' && isUsingMapsId === true && !viaService) { _%>
    @Transactional(readOnly = true)
    <%_ } _%>
    fun get<%= entityClass %>(@PathVariable id: <%= primaryKeyType %>): <% if (reactive) { %>Mono<<% } %>ResponseEntity<<%= instanceType %>><% if (reactive) { %>><% } %> {
        log.debug("REST request to get <%= entityClass %> : $id")<%- include('../../common/get_template', {asEntity, asDto, viaService, returnDirectly:false}); -%>
        return ResponseUtil.wrapOrNotFound(<%= instanceName %>)
    }
<%_ if (!readOnly) { _%>
    /**
     *  `DELETE  /<%= entityApiUrl %>/:id` : delete the "id" <%= entityInstance %>.
     *
     * @param id the id of the <%= instanceName %> to delete.
     * @return the [ResponseEntity] with status `204 (NO_CONTENT)`.
     */
    @DeleteMapping("/<%= entityApiUrl %>/{id}")
    <%_ if (reactive) { _%>
    @ResponseStatus(code = HttpStatus.NO_CONTENT)
    <%_ } _%>
    fun delete<%= entityClass %>(@PathVariable id: <%= primaryKeyType %>): <% if (reactive) { %>Mono<<% } %>ResponseEntity<Void><% if (reactive) { %>><% } %> {
        log.debug("REST request to delete <%= entityClass %> : $id")
<%- include('../../common/delete_template', {viaService: viaService, fromResource: true}); -%>
        <%_ if (!reactive) { _%>
            return ResponseEntity.noContent()
                .headers(HeaderUtil.createEntityDeletionAlert(applicationName, <%= enableTranslation %>, ENTITY_NAME, id<% if (primaryKeyType !== 'String') { %>.toString()<% } %>)).build()
        <%_ } else { _%>
            <%_ if (databaseType === 'couchbase') { _%>
                .then(Mono.just(ResponseEntity.noContent()
                    .headers(HeaderUtil.createEntityDeletionAlert(applicationName, <%= enableTranslation %>, ENTITY_NAME, id<% if (primaryKeyType !== 'String') { %>.toString()<% } %>)).build<Void>())
                )
            <%_ } else { _%>
                .map {
                    ResponseEntity.noContent()
                        .headers(HeaderUtil.createEntityDeletionAlert(applicationName, <%= enableTranslation %>, ENTITY_NAME, id<% if (primaryKeyType !== 'String') { %>.toString()<% } %>)).build<Void>()
                }
            <%_ } _%>
        <%_ } _%>
    }
<%_ } _%>
<%_ if (searchEngine !== false) { _%>

    /**
     * `SEARCH  /_search/<%= entityApiUrl %>?query=:query` : search for the <%= entityInstance %> corresponding
     * to the query.
     *
     * @param query the query of the <%= entityInstance %> search.
    <%_ if (pagination !== 'no') { _%>
     * @param pageable the pagination information.
       <%_ if (reactive) { _%>
     * @param request a [ServerHttpRequest] request.
        <%_ } _%>
    <%_ } _%>
     * @return the result of the search.
     */
    @GetMapping("/_search/<%= entityApiUrl %>")<%- include('../../common/search_template', {asEntity, asDto, viaService}); -%>
<%_ } _%>
}
