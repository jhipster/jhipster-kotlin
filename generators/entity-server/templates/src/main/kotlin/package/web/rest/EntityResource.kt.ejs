<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.web.rest

<%_ const viaService = service !== 'no';
    let isUsingMapsId = false;
    let mapsIdAssoc;
    let primaryKeyType = pkType;
    for (idx in relationships) {
        isUsingMapsId = relationships[idx].useJPADerivedIdentifier;
        if ( isUsingMapsId === true) {
            mapsIdAssoc = relationships[idx];
            primaryKeyType = (relationships[idx].otherEntityName === 'user'  && authenticationType === 'oauth2') ? 'String' : pkType;
            break;
        }
        isUsingMapsId = false;
    } _%>
<%_ if (dto !== 'mapstruct' || service === 'no') { _%>
import <%=packageName%>.domain.<%= asEntity(entityClass) %>
<%_ } _%>
<%_ if (service !== 'no') { _%>
import <%=packageName%>.service.<%= entityClass %>Service
<%_ } else { _%>
import <%=packageName%>.repository.<%= entityClass %>Repository
    <%_ if (isUsingMapsId === true) { _%>
import <%=packageName%>.repository.<%= mapsIdAssoc.otherEntityNameCapitalized %>Repository
    <%_ } _%>
    <%_ if (reactiveRepositories) { _%>
import <%=packageName%>.repository.reactive.<%= entityClass %>ReactiveRepository
    <%_ } _%>
    <%_ if (searchEngine === 'elasticsearch') { _%>
import <%=packageName%>.repository.search.<%= entityClass %>SearchRepository
    <%_ } _%>
<%_ } _%>
<%_ if (saveUserSnapshot) { _%>
import <%=packageName%>.repository.UserRepository
<%_ } _%>
import <%=packageName%>.web.rest.errors.BadRequestAlertException
<%_ if (dto === 'mapstruct') { _%>
import <%=packageName%>.service.dto.<%= asDto(entityClass) %>
<%_ if (service === 'no') { _%>
import <%=packageName%>.service.mapper.<%= entityClass %>Mapper
<%_ } } _%>
<%_ if (jpaMetamodelFiltering) {  _%>
import <%=packageName%>.service.dto.<%= entityClass %>Criteria
import <%=packageName%>.service.<%= entityClass %>QueryService
<%_ } _%>

import io.github.jhipster.web.util.HeaderUtil
<%_ if (pagination !== 'no') { _%>
import io.github.jhipster.web.util.PaginationUtil
<%_ } _%>
import io.github.jhipster.web.util.ResponseUtil
import org.slf4j.LoggerFactory
import org.springframework.beans.factory.annotation.Value
<%_ if (pagination !== 'no') { _%>
import org.springframework.data.domain.Page
import org.springframework.data.domain.Pageable
import org.springframework.http.HttpStatus
    <%_ if (reactive) { _%>
import org.springframework.http.server.reactive.ServerHttpRequest
    <%_ } _%>
    <%_ if (!reactive) { _%>
import org.springframework.web.servlet.support.ServletUriComponentsBuilder
    <%_ } else { _%>
import org.springframework.web.util.UriComponentsBuilder
    <%_ } _%>
<%_ } _%>
<%_ if (reactiveRepositories) { _%>
import org.springframework.http.MediaType
<%_ } _%>
import org.springframework.http.ResponseEntity <%_ if (isUsingMapsId === true && !viaService) { %>
import org.springframework.transaction.annotation.Transactional <% } %>
import org.springframework.web.bind.annotation.DeleteMapping
import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.PathVariable
import org.springframework.web.bind.annotation.PostMapping
import org.springframework.web.bind.annotation.PutMapping
import org.springframework.web.bind.annotation.RequestBody
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RequestParam
import org.springframework.web.bind.annotation.RestController
<%_ if (reactiveRepositories) { _%>
import reactor.core.publisher.Flux
<%_ } _%>

<%_ if (validation) { _%>
import javax.validation.Valid
<%_ } _%>
import java.net.URI
import java.net.URISyntaxException<% if (isUsingMapsId === true) { %>
import java.util.Objects<% } %>
<%_ if (databaseType === 'cassandra') { _%>
import java.util.UUID<% } %><% if (searchEngine === 'elasticsearch') { %>

import org.elasticsearch.index.query.QueryBuilders.queryStringQuery
<%_ } _%>

<%_
let entityName = entityInstance;
if (clientRootFolder && !skipUiGrouping) {
    entityName = _.camelCase(`${clientRootFolder}${entityClass}`)
}
_%>
private const val ENTITY_NAME = "<%= entityName %>"

/**
 * REST controller for managing [<%= packageName %>.domain.<%= asEntity(entityClass) %>].
 */
@RestController
@RequestMapping("/api")<% if (databaseType === 'sql' && isUsingMapsId === true && !viaService) { %>
@Transactional <%_ } %>
class <%= entityClass %>Resource(
<%_
    const instanceType = (dto === 'mapstruct') ? asDto(entityClass) : asEntity(entityClass);
    const instanceName = (dto === 'mapstruct') ? asDto(entityInstance) : asEntity(entityInstance);
_%><%- include('../../common/inject_template', {viaService: viaService, constructorName: entityClass + 'Resource', queryService: jpaMetamodelFiltering, isUsingMapsId: isUsingMapsId, mapsIdAssoc: mapsIdAssoc, isController: true}); -%>
) {

    private val log = LoggerFactory.getLogger(javaClass)

    @Value("\${jhipster.clientApp.name}")
    private var applicationName: String? = null

    /**
     * `POST  /<%= entityApiUrl %>` : Create a new <%= entityInstance %>.
     *
     * @param <%= instanceName %> the <%= instanceName %> to create.
     * @return the [ResponseEntity] with status `201 (Created)` and with body the new <%= instanceName %>, or with status `400 (Bad Request)` if the <%= entityInstance %> has already an ID.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */
    @PostMapping("/<%= entityApiUrl %>")
    fun create<%= entityClass %>(<% if (validation) { %>@Valid <% } %>@RequestBody <%= instanceName %>: <%= instanceType %>): ResponseEntity<<%= instanceType %>> {
        log.debug("REST request to save <%= entityClass %> : {}", <%= instanceName %>)
        if (<%= instanceName %>.id != null) {
            throw BadRequestAlertException(
                "A new <%= entityInstance %> cannot already have an ID",
                ENTITY_NAME, "idexists"
            )
        }
        <%_ if (saveUserSnapshot) { %>
        if (<%= instanceName %>.user != null) {
            // Save user in case it's new and only exists in gateway
            userRepository.save(<%= instanceName %>.user)
        }
        <%_ } _%>
        <%_ if (databaseType === 'cassandra') { _%>
        <%= instanceName %>.id = UUID.randomUUID()
        <%_ } _%>
<%- include('../../common/save_template', {asEntity, asDto, viaService: viaService, returnDirectly: false, isUsingMapsId: isUsingMapsId, mapsIdAssoc: mapsIdAssoc, isController: true}); -%>
        return ResponseEntity.created(URI("/api/<%= entityApiUrl %>/" + result.id))
            .headers(HeaderUtil.createEntityCreationAlert(applicationName, <%= enableTranslation %>, ENTITY_NAME, result.id.toString()))
            .body(result)
    }

    /**
     * `PUT  /<%= entityApiUrl %>` : Updates an existing <%= entityInstance %>.
     *
     * @param <%= instanceName %> the <%= instanceName %> to update.
     * @return the [ResponseEntity] with status `200 (OK)` and with body the updated <%= instanceName %>,
     * or with status `400 (Bad Request)` if the <%= instanceName %> is not valid,
     * or with status `500 (Internal Server Error)` if the <%= instanceName %> couldn't be updated.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */
    @PutMapping("/<%= entityApiUrl %>")
    fun update<%= entityClass %>(<% if (validation) { %>@Valid <% } %>@RequestBody <%= instanceName %>: <%= instanceType %>): ResponseEntity<<%= instanceType %>> {
        log.debug("REST request to update <%= entityClass %> : {}", <%= instanceName %>)
        if (<%= instanceName %>.id == null) {
            throw BadRequestAlertException("Invalid id", ENTITY_NAME, "idnull")
        }
        <%_ if (saveUserSnapshot) { %>
        if (<%= instanceName %>.user != null) {
            // Save user in case it's new and only exists in gateway
            userRepository.save(<%= instanceName %>.user)
        }
        <%_ } _%>
<%- include('../../common/save_template', {asEntity, asDto, viaService: viaService, returnDirectly: false, isUsingMapsId: false, mapsIdAssoc: mapsIdAssoc}); -%>
        return ResponseEntity.ok()
            .headers(
                HeaderUtil.createEntityUpdateAlert(
                    applicationName, <%= enableTranslation %>, ENTITY_NAME,
                     <%= instanceName %>.id.toString()
                )
            )
            .body(result)
    }

    /**
     * `GET  /<%= entityApiUrl %>` : get all the <%= entityInstancePlural %>.
     *
    <%_ if (pagination !== 'no') { %>
     * @param pageable the pagination information.
        <%_ if (reactive) { _%>
     * @param request a [ServerHttpRequest] request.
        <%_ } _%>
    <%_ } _%>
    <%_ if (!jpaMetamodelFiltering && fieldsContainOwnerManyToMany) { _%>
     * @param eagerload flag to eager load entities from relationships (This is applicable for many-to-many).<% } if (jpaMetamodelFiltering) { %>
     * @param criteria the criteria which the requested entities should match.<% } else if (fieldsContainNoOwnerOneToOne) { %>
     * @param filter the filter of the request.<% } %>
     * @return the [ResponseEntity] with status `200 (OK)` and the list of <%= entityInstancePlural %> in body.
     */
    @GetMapping("/<%= entityApiUrl %>")<%_ if (databaseType === 'sql' && isUsingMapsId === true && !viaService) { %>
    @Transactional(readOnly = true)<%_ } _%>
    <%- include('../../common/get_all_template', {asEntity, asDto, viaService}); -%>

    <%_ if (reactiveRepositories) { _%>
    /**
     * `GET  /<%= entityApiUrl %>` : get all the <%= entityInstancePlural %> as a stream.
     * @return the [Flux] of <%= entityInstancePlural %>.
     */
    @GetMapping(value = ["/<%= entityApiUrl %>"], produces = [MediaType.APPLICATION_STREAM_JSON_VALUE])
    <%_ if (databaseType === 'sql' && isUsingMapsId === true && !viaService) { _%>
    @Transactional(readOnly = true)
    <%_ } _%>
    fun getAll<%= entityClassPlural %>AsStream(): Flux<<%= instanceType %>> {
        log.debug("REST request to get all <%= entityClassPlural %> as a stream")
        <%_ if (viaService) { _%>
        return <%= entityInstance %>Service.findAllAsFlux()
        <%_ } else { _%>
        return <%= entityInstance %>ReactiveRepository.findAll()
        <%_ } _%>
    }

    <%_ } _%>
    /**
     * `GET  /<%= entityApiUrl %>/:id` : get the "id" <%= entityInstance %>.
     *
     * @param id the id of the <%= instanceName %> to retrieve.
     * @return the [ResponseEntity] with status `200 (OK)` and with body the <%= instanceName %>, or with status `404 (Not Found)`.
     */
    @GetMapping("/<%= entityApiUrl %>/{id}")
    <%_ if (databaseType === 'sql' && isUsingMapsId === true && !viaService) { _%>
    @Transactional(readOnly = true)
    <%_ } _%>
    fun get<%= entityClass %>(@PathVariable id: <%= primaryKeyType %>): ResponseEntity<<%= instanceType %>> {
        log.debug("REST request to get <%= entityClass %> : {}", id)<%- include('../../common/get_template', {asEntity, asDto, viaService, returnDirectly:false}); -%>
        return ResponseUtil.wrapOrNotFound(<%= instanceName %>)
    }

    /**
     *  `DELETE  /<%= entityApiUrl %>/:id` : delete the "id" <%= entityInstance %>.
     *
     * @param id the id of the <%= instanceName %> to delete.
     * @return the [ResponseEntity] with status `204 (NO_CONTENT)`.
     */
    @DeleteMapping("/<%= entityApiUrl %>/{id}")
    fun delete<%= entityClass %>(@PathVariable id: <%= primaryKeyType %>): ResponseEntity<Void> {
        log.debug("REST request to delete <%= entityClass %> : {}", id)
<%- include('../../common/delete_template', {viaService: viaService}); -%>
        return ResponseEntity.noContent()
            .headers(HeaderUtil.createEntityDeletionAlert(applicationName, <%= enableTranslation %>, ENTITY_NAME, id<% if (pkType !== 'String') { %>.toString()<% } %>)).build()
    }<% if (searchEngine === 'elasticsearch') { %>

    /**
     * `SEARCH  /_search/<%= entityApiUrl %>?query=:query` : search for the <%= entityInstance %> corresponding
     * to the query.
     *
     * @param query the query of the <%= entityInstance %> search.
    <%_ if (pagination !== 'no') { _%>
     * @param pageable the pagination information.
       <%_ if (reactive) { _%>
     * @param request a [ServerHttpRequest] request.
        <%_ } _%>
    <%_ } _%>
     * @return the result of the search.
     */
    @GetMapping("/_search/<%= entityApiUrl %>")<%- include('../../common/search_template', {asEntity, asDto, viaService}); -%><% } %>
}
