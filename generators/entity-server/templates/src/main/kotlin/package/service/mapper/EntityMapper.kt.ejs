<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.service.mapper

import <%=packageName%>.domain.<%= asEntity(entityClass) %>
import <%=packageName%>.service.dto.<%= asDto(entityClass) %>

import org.mapstruct.Mapper
import org.mapstruct.Mapping
import org.mapstruct.Mappings

/**
 * Mapper for the entity [<%= asEntity(entityClass) %>] and its DTO [<%= asDto(entityClass) %>].
 */
@Mapper(componentModel = "spring", uses = [<% var existingMappings = [];
  for (idx in relationships) {
    if ((relationships[idx].relationshipType === 'many-to-many' && relationships[idx].ownerSide === true)|| relationships[idx].relationshipType === 'many-to-one' ||(relationships[idx].relationshipType === 'one-to-one' && relationships[idx].ownerSide === true)){
      // if the entity is mapped twice, we should implement the mapping once
      if (!existingMappings.includes(relationships[idx].otherEntityNameCapitalized) && asEntity(relationships[idx].otherEntityNameCapitalized) !== entityClass) {
          existingMappings.push(relationships[idx].otherEntityNameCapitalized);
      } } } %><%= existingMappings.map(otherEntityNameCapitalized => otherEntityNameCapitalized + 'Mapper::class').join(', ') %>])
interface <%= entityClass %>Mapper :
    EntityMapper<<%= asDto(entityClass) %>, <%= asEntity(entityClass) %>> {
<%_
// entity -> DTO mapping
var mappedRelsEnt = [];
relationships.forEach( (relationship) => {
    if (relationship.relationshipType === 'many-to-one' || (relationship.relationshipType === 'one-to-one' && relationship.ownerSide === true)) {
        mappedRelsEnt.push(relationship);
    }
});
var renMapAnotEnt = mappedRelsEnt.length > 0; //Render Mapping Annotation during Entity to DTO conversion?
if(renMapAnotEnt === true) { _%>
    @Mappings(
<%_ } _%>
<%_
// entity -> DTO mapping
mappedRelsEnt.forEach( (relationship, index) => {
    const relationshipName = relationship.relationshipName;
    const relationshipFieldName = relationship.relationshipFieldName;
    const otherEntityFieldCapitalized = relationship.otherEntityFieldCapitalized;
    const mapOtherEntityField = otherEntityFieldCapitalized != 'Id' && otherEntityFieldCapitalized !== ''
    var comma = ( (index === (mappedRelsEnt.length-1) )  && mapOtherEntityField===false) ? '' : ',';
_%>
        Mapping(source = "<%= relationshipName %>.id", target = "<%= relationshipFieldName %>Id")<%= comma %>
            <%_ if (mapOtherEntityField) {
                    comma = index === mappedRelsEnt.length-1 ? '' : ',';
            _%>
        Mapping(source = "<%= relationshipName %>.<%= relationship.otherEntityField %>", target = "<%= relationshipFieldName %><%= otherEntityFieldCapitalized %>")<%= comma %>
            <%_ } _%>
    <%_ }); _%>
    <%_ if (renMapAnotEnt === true) { _%>
    )
    override fun toDto(entity: <%= asEntity(entityClass) %>): <%= asDto(entityClass) %>
    <%_ } _%>

<%_
// DTO -> entity mapping
var mappedRelsDto = [];
let primaryKeyType = pkType;
for (idx in relationships) {
    const relationshipType = relationships[idx].relationshipType;
    const otherEntityName = relationships[idx].otherEntityName;
    const ownerSide = relationships[idx].ownerSide;
    const isUsingMapsId = relationships[idx].useJPADerivedIdentifier;
    primaryKeyType = (isUsingMapsId === true && otherEntityName === 'user' && authenticationType === 'oauth2') ? 'String' : primaryKeyType;
    if (relationshipType === 'many-to-one' || (relationshipType === 'one-to-one' && ownerSide === true) ||
        (relationshipType === 'many-to-many' && ownerSide === false) ||
        relationshipType === 'one-to-many' ||
        relationshipType === 'one-to-one' && ownerSide === false) {
        mappedRelsDto.push(idx)
    }
}
var renMapAnotDto = mappedRelsDto.length > 0; //Render Mapping Annotation during DTO to Entity conversion?
if(renMapAnotDto === true) {
_%>
    @Mappings(<% } %>
<%_
// var hasOAuthUser = false; // if OAuthuser, use a String id in fromId() method
for (idx in mappedRelsDto) {
    const relationshipType = relationships[idx].relationshipType;
    const relationshipName = relationships[idx].relationshipName;
    // hasOAuthUser = (relationshipName === 'user' && authenticationType === 'oauth2');
    const relationshipNamePlural = relationships[idx].relationshipNamePlural;
    const relationshipNameCapitalized = relationships[idx].relationshipNameCapitalized;
    const ownerSide = relationships[idx].ownerSide;
    const isLast = parseInt(idx, 10) === mappedRelsDto.length-1;
    const useComma = !isLast || ((relationshipType === 'one-to-many' || relationshipType === 'many-to-many') && fluentMethods);
    const comma = useComma ? ',' : '';
    if (relationshipType === 'many-to-one' || (relationshipType === 'one-to-one' && ownerSide === true)) {
_%>
        Mapping(source = "<%= relationshipName %>Id", target = "<%= relationshipName %>")<%= comma %>
            <%_ } else if (relationshipType === 'many-to-many' && ownerSide === false) { _%>
        Mapping(target = "<%= relationshipNamePlural %>", ignore = true)<%= comma %>
            <%_ } else if (relationshipType === 'one-to-many') { _%>
        Mapping(target = "<%= relationshipNamePlural %>", ignore = true)<%= comma %>
            <%_ } else if (relationshipType === 'one-to-one' && ownerSide === false) { _%>
        Mapping(target = "<%= relationshipName %>", ignore = true)<%= comma %>
            <%_ }
        if ((relationshipType === 'one-to-many' || relationshipType === 'many-to-many') && fluentMethods) { _%>
        Mapping(target = "remove<%= relationshipNameCapitalized %>", ignore = true)<% if(!isLast) { %>,<% } %>
        <%_ } _%>
    <%_ } _%>
    <%_ if (renMapAnotDto === true) { _%>
    )
    override fun toEntity(dto: <%= asDto(entityClass) %>): <%= asEntity(entityClass) %>
    <%_ } _%>
    <%_ if (databaseType === 'sql' || databaseType === 'mongodb') { _%>

    fun fromId(id: <%= primaryKeyType %>?) = id?.let { <%= asEntity(entityClass) %>(it) }
<%_ } _%>
}
