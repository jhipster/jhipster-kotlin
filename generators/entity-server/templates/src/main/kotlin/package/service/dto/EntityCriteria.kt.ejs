<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.service.dto

import java.io.Serializable
import tech.jhipster.service.Criteria
<%_ for (idx in fields) { if (fields[idx].fieldIsEnum === true) { _%>
import <%= packageName %>.domain.enumeration.<%= fields[idx].fieldType %>
<%_ } } _%>
import tech.jhipster.service.filter.BooleanFilter
import tech.jhipster.service.filter.DoubleFilter
import tech.jhipster.service.filter.Filter
import tech.jhipster.service.filter.FloatFilter
import tech.jhipster.service.filter.IntegerFilter
import tech.jhipster.service.filter.LongFilter
import tech.jhipster.service.filter.StringFilter
<%_ if (fieldsContainBigDecimal === true) { _%>
import tech.jhipster.service.filter.BigDecimalFilter
<%_ } _%>
<%_ if (fieldsContainDuration === true) { _%>
import tech.jhipster.service.filter.DurationFilter
<%_ } _%>
<%_ if (fieldsContainInstant === true) { _%>
import tech.jhipster.service.filter.InstantFilter
<%_ } _%>
<%_ if (fieldsContainLocalDate === true) { _%>
import tech.jhipster.service.filter.LocalDateFilter
<%_ } _%>
<%_ if (fieldsContainUUID === true) { _%>
import tech.jhipster.service.filter.UUIDFilter
<%_ } _%>
<%_ if (fieldsContainZonedDateTime === true) { _%>
import tech.jhipster.service.filter.ZonedDateTimeFilter
<%_ } _%>

<%_
  var filterVariables = [];
  var extraFilters = {};
  fields.forEach((field) => {
    const fieldType = field.fieldType;
    if (isFilterableType(fieldType)) {
      var filterType;
      if (field.fieldIsEnum == true) {
        filterType = fieldType + 'Filter';
        extraFilters[fieldType] = {type: filterType, superType: 'Filter<' + fieldType + '>', fieldType: fieldType};
      } else if (['Duration', 'UUID', 'LocalDate', 'ZonedDateTime', 'Instant', 'String', 'Long', 'Integer', 'Float', 'Double', 'BigDecimal', 'Boolean'].includes(fieldType)) {
        filterType = fieldType + 'Filter';
      } else {
        filterType = 'Filter<' + fieldType + '>';
      }
      filterVariables.push( { filterType : filterType,
            name: field.fieldName,
            type: fieldType,
            fieldInJavaBeanMethod: field.fieldInJavaBeanMethod });
    }
  });
  relationships.forEach((relationship) => {
    const relationshipType = relationship.otherEntity.primaryKey.type;
    const referenceFilterType = '' + relationshipType + 'Filter';
    // user has a String PK when using OAuth, so change relationships accordingly
    let oauthAwareReferenceFilterType = referenceFilterType;
    if (relationship.otherEntityName === 'user' && authenticationType === 'oauth2') {
        oauthAwareReferenceFilterType = 'StringFilter';
    }
    filterVariables.push({ filterType : oauthAwareReferenceFilterType,
        name: relationship.relationshipFieldName + 'Id',
        type: relationshipType,
        fieldInJavaBeanMethod: relationship.relationshipNameCapitalized + 'Id' });
  });
_%>
/**
 * Criteria class for the [<%= packageName %>.domain.<%= asEntity(entityClass) %>] entity. This class is used in
 * [<%= packageName %>.web.rest.<%= entityClass %>Resource] to receive all the possible filtering options from the
 * Http GET request parameters.
 * For example the following could be a valid request:
 * ```/<%= entityApiUrl %>?id.greaterThan=5&attr1.contains=something&attr2.specified=false```
 * As Spring is unable to properly convert the types, unless specific [Filter] class are used, we need to use
 * fix type specific filters.
 */
data class <%= entityClass %>Criteria(
<%_ filterVariables.forEach((filterVariable, index) => {
        const comma = (index===filterVariables.length-1) ? '' : ',';
_%>

    var <%= filterVariable.name %>: <%- filterVariable.filterType %>? = null<%= comma %>
<%_ }) _%>
) : Serializable, Criteria {

    constructor(other: <%= entityClass %>Criteria) :
        this(
<%_
    filterVariables.forEach((filterVariable, index) => {
        const comma = (index===filterVariables.length-1) ? '' : ',';
_%>
            other.<%= filterVariable.name %>?.copy()<%= comma %>
<%_ }); _%>
        )
<%_ Object.keys(extraFilters).forEach((key) => {
        extraFilter = extraFilters[key]; _%>

    /**
     * Class for filtering <%= key %>
     */
    class <%= extraFilter.type %> : <%- extraFilter.superType %> {
        constructor()

        constructor(filter: <%= extraFilter.type %>) : super(filter)

        override fun copy() = <%= extraFilter.type %>(this)
    }
<%_ }); _%>

    override fun copy() = <%= entityClass %>Criteria(this)

    companion object {
        private const val serialVersionUID: Long = 1L
    }
}
