<%#
 Copyright 2013-2020 the original author or authors.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.service

<%_
    const serviceClassName = entityClass + 'QueryService';
    const instanceType = (dto === 'mapstruct') ? asDto(entityClass) : asEntity(entityClass);
    const instanceName = (dto === 'mapstruct') ? asDto(entityInstance) : asEntity(entityInstance);
    const mapper = entityInstance  + 'Mapper';
    const dtoToEntity = mapper + '.'+ 'toEntity';
    const entityToDto = mapper + '.'+ 'toDto';
    const entityListToDto = mapper + '.' + 'toDto';
    const entityToDtoReference = mapper + '::'+ 'toDto';
    const repository = entityInstance  + 'Repository';
    const criteria = entityClass + 'Criteria';
_%>
import javax.persistence.criteria.JoinType

import org.slf4j.LoggerFactory
import org.springframework.data.domain.Page
import org.springframework.data.domain.Pageable
import org.springframework.data.jpa.domain.Specification
import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional

import tech.jhipster.service.QueryService

import <%= packageName %>.domain.<%= asEntity(entityClass) %>
import <%= packageName %>.domain.<%= asEntity(entityClass) %>_
<%_
    var mappedRelsTypes = [];
    relationships.forEach((relationship) => {
        var relType = asEntity(relationship.otherEntityNameCapitalized);
        if (!mappedRelsTypes.includes(relType)) {
            mappedRelsTypes.push(relType);
        }
    });
    mappedRelsTypes.sort();
    mappedRelsTypes
        .filter((relType) => relType !== asEntity(entityClass))
        .forEach((relType) => {
_%>
import <%= packageName %>.domain.<%= relType %>_
<%_ }); _%>
import <%= packageName %>.repository.<%= entityClass %>Repository<% if (searchEngine === 'elasticsearch') { %>
import <%= packageName %>.repository.search.<%= entityClass %>SearchRepository<% } %>
import <%= packageName %>.service.dto.<%= entityClass %>Criteria
<%_ if (dto === 'mapstruct') { _%>
import <%= packageName %>.service.dto.<%= asDto(entityClass) %>
import <%= packageName %>.service.mapper.<%= entityClass %>Mapper
<%_ } _%>

/**
 * Service for executing complex queries for [<%= asEntity(entityClass) %>] entities in the database.
 * The main input is a [<%= entityClass %>Criteria] which gets converted to [Specification],
 * in a way that all the filters must apply.
 * It returns a [MutableList] of [<%= instanceType %>] or a [Page] of [<%= instanceType %>] which fulfills the criteria.
 */
@Service<% if (databaseType === 'sql') { %>
@Transactional(readOnly = true)<% } %>
class <%= serviceClassName %>(
<%- include('../common/inject_template', {viaService: false, constructorName: serviceClassName, queryService: false, isUsingMapsId: false, mapsIdAssoc: null, isController: false}); -%>
) : QueryService<<%= asEntity(entityClass) %>>() {

    private val log = LoggerFactory.getLogger(javaClass)

    /**
     * Return a [MutableList] of [<%= instanceType %>] which matches the criteria from the database.
     * @param criteria The object which holds all the filters, which the entities should match.
     * @return the matching entities.
     */
    @Transactional(readOnly = true)
    fun findByCriteria(criteria: <%= criteria %>?): MutableList<<%= instanceType %>> {
        log.debug("find by criteria : $criteria")
        val specification = createSpecification(criteria)
    <%_ if (dto === 'mapstruct') { _%>
        return <%= entityListToDto %>(<%= repository %>.findAll(specification))
    <%_ } else { _%>
        return <%= repository %>.findAll(specification)
    <%_ } _%>
    }

    /**
     * Return a [Page] of [<%= instanceType %>] which matches the criteria from the database.
     * @param criteria The object which holds all the filters, which the entities should match.
     * @param page The page, which should be returned.
     * @return the matching entities.
     */
    @Transactional(readOnly = true)
    fun findByCriteria(criteria: <%= criteria %>?, page: Pageable): Page<<%= instanceType %>> {
        log.debug("find by criteria : $criteria, page: $page")
        val specification = createSpecification(criteria)
    <%_ if (dto === 'mapstruct') { _%>
        return <%= repository %>.findAll(specification, page)
            .map(<%= entityToDtoReference %>)
    <%_ } else { _%>
        return <%= repository %>.findAll(specification, page)
    <%_ } _%>
    }

    /**
     * Return the number of matching entities in the database.
     * @param criteria The object which holds all the filters, which the entities should match.
     * @return the number of matching entities.
     */
    @Transactional(readOnly = true)
    fun countByCriteria(criteria: <%= criteria %>?): Long {
        log.debug("count by criteria : $criteria")
        val specification = createSpecification(criteria)
        return <%= repository %>.count(specification)
    }

    /**
     * Function to convert [<%= criteria %>] to a [Specification].
     * @param criteria The object which holds all the filters, which the entities should match.
     * @return the matching [Specification] of the entity.
     */
    protected fun createSpecification(criteria: <%= criteria %>?): Specification<<%= asEntity(entityClass) %>?> {
        var specification: Specification<<%= asEntity(entityClass) %>?> = Specification.where(null)
        if (criteria != null) {
            if (criteria.<%= primaryKey.name %> != null) {
                specification = specification.and(<%= getSpecificationBuilder(primaryKeyType) %>(criteria.id, <%= asEntity(entityClass) %>_.<%= primaryKey.name %>))
            }
            <%_
            fields.forEach((field) => {
                if (field.id) return;
                if (isFilterableType(field.fieldType)) { _%>
            if (criteria.<%= field.fieldName %> != null) {
                specification = specification.and(<%= getSpecificationBuilder(field.fieldType) %>(criteria.<%= field.fieldName %>, <%= asEntity(entityClass) %>_.<%= field.fieldName %>))
            }
            <%_ }
            });

            relationships.forEach((relationship) => {
                const metamodelFieldName = (relationship.relationshipType === 'many-to-many' || relationship.relationshipType === 'one-to-many') ? relationship.relationshipFieldNamePlural : relationship.relationshipFieldName; _%>
            if (criteria.<%= relationship.relationshipName %>Id != null) {
                specification = specification.and(buildSpecification(criteria.<%= relationship.relationshipName %>Id) {
                    it.join(<%= asEntity(entityClass) %>_.<%= metamodelFieldName %>, JoinType.LEFT).get(<%= asEntity(relationship.otherEntityNameCapitalized) %>_.id)
                })
            }
            <%_ }); // forEach
        _%>
        }
        return specification
    }
}
