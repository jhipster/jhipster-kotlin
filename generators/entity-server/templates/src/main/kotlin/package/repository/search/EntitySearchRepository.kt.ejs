<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= entityAbsolutePackage %>.repository.search

import <%= entityAbsolutePackage %>.domain.<%= persistClass %>
import <%= entityAbsolutePackage %>.repository.<%= persistClass %>Repository

<%_ if (!paginationNo) { _%>
     <%_ if (!reactive) { _%>
import org.springframework.data.domain.Page
import org.springframework.data.domain.PageImpl
import org.springframework.data.elasticsearch.core.SearchHits
     <%_ } _%>
import org.springframework.data.domain.Pageable
import org.springframework.data.elasticsearch.core.query.NativeSearchQueryBuilder
import org.elasticsearch.search.sort.SortBuilder
import org.springframework.data.domain.PageRequest
<%_ } _%>
<%_ if (reactive) { _%>
import org.springframework.data.elasticsearch.core.ReactiveElasticsearchTemplate
<%_ } else { _%>
import org.springframework.data.elasticsearch.core.ElasticsearchRestTemplate
<%_ } _%>
import org.springframework.data.elasticsearch.core.query.NativeSearchQuery
import org.springframework.data.elasticsearch.core.query.Query
import org.springframework.data.elasticsearch.core.SearchHit
import org.springframework.data.elasticsearch.repository.<% if (reactive) {%>Reactive<% } %>ElasticsearchRepository
import org.springframework.scheduling.annotation.Async
import org.springframework.transaction.annotation.Isolation
import org.springframework.transaction.annotation.Propagation
import org.springframework.transaction.annotation.Transactional
<%_ if (reactive) { _%>
import reactor.core.publisher.Flux
<%_ } else { _%>
import java.util.stream.Stream
<%_ } _%>
<%_ if (primaryKey.typeUUID) { _%>

import java.util.UUID
<% } %>

import org.elasticsearch.index.query.QueryBuilders.queryStringQuery
     
/**
 * Spring Data Elasticsearch repository for the [<%= persistClass %>] entity.
 */
interface <%=entityClass%>SearchRepository :  <% if (reactive) {%>Reactive<% } %>ElasticsearchRepository<<%= persistClass %>, <%=primaryKey.type%>>, <%= entityClass %>SearchRepositoryInternal{}
<%_ if (reactive) { _%>

interface <%= entityClass %>SearchRepositoryInternal {
     fun search(query: String<% if (!paginationNo) { %>, pageable: Pageable<% } %>): Flux<<%= persistClass %>>

     fun search(query: Query): Flux<<%= persistClass %>> 
}

class <%= entityClass %>SearchRepositoryInternalImpl(private val reactiveElasticsearchTemplate: ReactiveElasticsearchTemplate): <%= entityClass %>SearchRepositoryInternal {

    override fun search(query: String<% if (!paginationNo) { %>, pageable: Pageable<% } %>): Flux<<%= persistClass %>> {
      val nativeSearchQuery = NativeSearchQuery(queryStringQuery(query))
      <%_ if (!paginationNo) { _%>
      nativeSearchQuery.setPageable<NativeSearchQuery>(pageable)
      <%_ } _%>
      return search(nativeSearchQuery)
    }

    override fun search(query: Query): Flux<<%= persistClass %>> {
        return reactiveElasticsearchTemplate
          .search(query, <%= persistClass %>::class.java)
          .map(SearchHit<<%= persistClass %>>::getContent)
    }
}
<%_ } else { _%>

interface <%= entityClass %>SearchRepositoryInternal {
  <%_ if (paginationNo) { _%>
  fun search(query: String): Stream<<%= persistClass %>> 

  fun search(query: Query): Stream<<%= persistClass %>> 
  <%_ } else { _%>
  fun search(query: String, pageable: Pageable): Page<<%= persistClass %>> 

  fun search(query: Query): Page<<%= persistClass %>> 
  <%_ } _%>

  fun index(entity: <%= persistClass %>)
}

class <%= entityClass %>SearchRepositoryInternalImpl(
  val elasticsearchTemplate: ElasticsearchRestTemplate, 
  val repository: <%= entityClass %>Repository
): <%= entityClass %>SearchRepositoryInternal {

  <%_ if (paginationNo) { _%>
  override fun search(query: String): Stream<<%= persistClass %>>  {
      val nativeSearchQuery = NativeSearchQuery(queryStringQuery(query))
      return search(nativeSearchQuery)
  }

  override fun search(query: Query): Stream<<%= persistClass %>> {
      return elasticsearchTemplate
          .search(query, <%= persistClass %>::class.java)
          .map(SearchHit<<%= persistClass %>>::getContent)
          .stream()
  }
  <%_ } else { _%>
  override fun search(query: String, pageable: Pageable): Page<<%= persistClass %>>  {
      val nativeSearchQuery = NativeSearchQuery(queryStringQuery(query))
      return search(nativeSearchQuery.setPageable<NativeSearchQuery>(pageable))
  }

  override fun search(query: Query): Page<<%= persistClass %>> {
    val searchHits = elasticsearchTemplate.search(query, <%= entityClass %>::class.java)
    val hits = searchHits
        .map(SearchHit<<%= persistClass %>>::getContent)
        .toList()
      return PageImpl<<%= persistClass %>>(hits, query.pageable, searchHits.totalHits)
  }
  <%_ } _%>

  override fun index(entity: <%= persistClass %>) {
    entity.<%= primaryKey.name %>?.let { 
      repository.find<% if (implementsEagerLoadApis) { %>OneWithEagerRelationships<% } else { %>ById<% } %>(it).ifPresent(elasticsearchTemplate::save)
    }
  }
}
<%_ } _%>
