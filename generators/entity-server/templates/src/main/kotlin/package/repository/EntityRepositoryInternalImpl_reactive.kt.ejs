<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= entityAbsolutePackage %>.repository

import java.util.function.BiFunction
<%_ if (fieldsContainBigDecimal) { _%>
import java.math.BigDecimal
<%_} if (fieldsContainInstant) { _%>
import java.time.Instant
<%_ } if (fieldsContainLocalDate) { _%>
import java.time.LocalDate
<%_ } if (fieldsContainZonedDateTime) { _%>
import java.time.ZonedDateTime
<%_ } if (fieldsContainDuration) { _%>
import java.time.Duration
<%_ } if (fieldsContainUUID) { _%>
import java.util.UUID
<%_ } _%>
import java.util.ArrayList
import java.util.List
import java.util.Map
import java.util.Map.Entry
import java.util.Optional
import org.apache.commons.lang3.StringUtils

import org.springframework.data.domain.Pageable
import io.r2dbc.spi.Row
import io.r2dbc.spi.RowMetadata
import org.springframework.data.relational.core.query.Criteria.where
  <%_ if (containsBagRelationships) { _%>
import org.springframework.data.relational.core.query.Query.query
  <%_ } _%>
import org.springframework.data.r2dbc.convert.R2dbcConverter
import org.springframework.data.r2dbc.core.R2dbcEntityOperations
import org.springframework.data.r2dbc.core.R2dbcEntityTemplate
import org.springframework.data.r2dbc.repository.support.SimpleR2dbcRepository
import org.springframework.data.relational.core.mapping.RelationalPersistentEntity
import org.springframework.data.relational.core.query.Criteria
import org.springframework.data.relational.core.sql.Column
import org.springframework.data.relational.core.sql.Comparison
import org.springframework.data.relational.core.sql.Condition
import org.springframework.data.relational.core.sql.Conditions
import org.springframework.data.relational.core.sql.Expression
import org.springframework.data.relational.core.sql.Select
import org.springframework.data.relational.core.sql.SelectBuilder.SelectFromAndJoin<% if (reactiveEagerRelations.length > 0) { %>Condition<% } %>
import org.springframework.data.relational.core.sql.Table
import org.springframework.data.relational.repository.support.MappingRelationalEntityInformation
import org.springframework.r2dbc.core.DatabaseClient
import org.springframework.r2dbc.core.RowsFetchSpec

import <%= entityAbsolutePackage %>.domain.<%= persistClass %>
<% relationships.forEach(function(rel) {
    if (rel.relationshipManyToMany  && rel.ownerSide) { _%>
import <%= rel.otherEntity.entityAbsolutePackage %>.domain.<%= rel.otherEntity.persistClass %>
    <%_ } _%>
<%_ } ); _%>
<%_ Object.keys(uniqueEnums).forEach(function(element) { _%>

import <%= entityAbsolutePackage %>.domain.enumeration.<%= element %>
<%_ }); _%>

<%_ [...reactiveOtherEntities, entity].forEach(otherEntity => { 
    if (otherEntity.entityAbsolutePackage) { _%>
import <%= otherEntity.entityAbsolutePackage %>.repository.rowmapper.<%= otherEntity.entityClass %>RowMapper
  <%_ } else { _%> 
import <%= packageName %>.repository.rowmapper.<%= otherEntity.entityClass %>RowMapper
  <%_ } _%> 
  <%_ if (otherEntity.entityPackage !== entityPackage) { _%>
import <%= otherEntity.entityAbsolutePackage %>.repository.<%= otherEntity.entityClass %>SqlHelper
  <%_ } _%>
<%_ }); _%>
<%# TODO Check why the below condition is empty %> 
<%# if (packageName !== entityAbsolutePackage) {  } %>
import <%= packageName %>.repository.EntityManager

import reactor.core.publisher.Flux
import reactor.core.publisher.Mono

/**
 * <%= springDataDescription %> custom repository implementation for the <%= persistClass %> entity.
 */
@SuppressWarnings("unused")
class <%= entityClass %>RepositoryInternalImpl(
    val template: R2dbcEntityTemplate,
    val entityManager: EntityManager,<% reactiveUniqueEntityTypes.forEach(function(element) { %>
    val <%= element.toLowerCase() %>Mapper: <%= element %>RowMapper,
    <%_ }); _%>
    entityOperations: R2dbcEntityOperations,
    converter: R2dbcConverter
): SimpleR2dbcRepository<<%= persistClass %>, <%= primaryKey.type %>>(
    MappingRelationalEntityInformation(
        converter.mappingContext.getRequiredPersistentEntity(<%= persistClass %>::class.java) as RelationalPersistentEntity<<%= persistClass %>>
    ), 
    entityOperations, 
    converter
), <%= entityClass %>RepositoryInternal {

    private val db: DatabaseClient = template.databaseClient;

    companion object {
        private val entityTable = Table.aliased("<%= entityTableName %>", EntityManager.ENTITY_ALIAS)
        <%_ reactiveEagerRelations.forEach(function(rel) { _%>
        private val <%= rel.relationshipName %>Table = Table.aliased("<%= rel.otherEntityTableName %>", "<%= _generateSqlSafeName(rel.relationshipName) %>")
        <%_ }); _%>
        <%_ relationships.forEach(function(rel) {
            if (rel.relationshipManyToMany  && rel.ownerSide) {
                const joinTableName = getJoinTableName(entityTableName, rel.relationshipName, prodDatabaseType);
        _%>
        private val <%= rel.relationshipName %>Link = EntityManager.LinkTable("<%= joinTableName %>", "<%= entity.entityTableName %>_<%= getColumnName(entity.primaryKey.name) %>", "<%= rel.joinColumnNames[0] %>")
        <%_ }
        }); _%>

    }

    override fun findAllBy(pageable: Pageable?): Flux<<%= persistClass %>> {
        return createQuery(pageable, null).all()
    }

    fun createQuery(pageable: Pageable?, whereClause: Condition?): RowsFetchSpec<<%= persistClass %>> {
        val columns = <%= entityClass %>SqlHelper().getColumns(entityTable, EntityManager.ENTITY_ALIAS)
        <%_ reactiveEagerRelations.forEach(function(rel) { _%>
        columns.addAll(<%= rel.otherEntityNameCapitalized %>SqlHelper().getColumns(<%= rel.relationshipName %>Table, "<%= rel.relationshipName %>"))
        <%_ }); _%>
        val selectFrom = Select.builder().select(columns).from(entityTable)
            <%_ reactiveEagerRelations.forEach(function(rel) { _%>
            .leftOuterJoin(<%= rel.relationshipName %>Table).on(Column.create("<%= rel.joinColumnNames[0] %>", entityTable)).equals(Column.create("<%= rel.otherEntity.primaryKey.fields[0].columnName %>", <%= rel.relationshipName %>Table  ))
            <%_ }); _%>
        
        // we do not support Criteria here for now as of https://github.com/jhipster/generator-jhipster/issues/18269
        val select = entityManager.createSelect(selectFrom, <%= persistClass %>::class.java, pageable, whereClause)
        return db.sql(select).map(this::process)
    }

    override fun findAll(): Flux<<%= persistClass %>> {
        return findAllBy(null)
    }

    override fun findById(id: <%= primaryKey.type %>?): Mono<<%= persistClass %>> {
        <%_ if (primaryKey.type != 'Long') {  _%>
        val whereClause = Conditions.isEqual(entityTable.column("<%= primaryKey.fields[0].columnName %>"), Conditions.just(StringUtils.wrap(id.toString(), "'")));
        <%_ } else { _%>
        val whereClause = Conditions.isEqual(entityTable.column("<%= primaryKey.fields[0].columnName %>"), Conditions.just(id.toString()));
        <%_ }_%>
        return createQuery(null, whereClause).one();
    }

    <%_ if (implementsEagerLoadApis) { _%>

    override fun findOneWithEagerRelationships(id: <%= primaryKey.type %>?): Mono<<%= persistClass %>> {
        return findById(id)
    }

    override fun findAllWithEagerRelationships(): Flux<<%= persistClass %>> {
        return findAll()
    }

    override fun findAllWithEagerRelationships(page: Pageable): Flux<<%= persistClass %>> {
        return findAllBy(page)
    }

    <%_ } _%>
    private fun process(row: Row, metadata: RowMetadata): <%= persistClass %> {
        val entity = <%= entityClass.toLowerCase() %>Mapper.apply(row, "e")
        <%_ reactiveEagerRelations.forEach(function(rel) { _%>
        entity.<%= rel.relationshipName %> = <%= rel.otherEntityNameCapitalized.toLowerCase() %>Mapper.apply(row, "<%= rel.relationshipName %>")
        <%_ }); _%>
        return entity
    }

    override fun <S:<%= persistClass %>> save(entity: S): Mono<S>  {
<%_ if (isUsingMapsId) { _%>
        if (entity.<%= primaryKey.name %> == null && entity.<%= mapsIdAssoc.relationshipName %> != null) {
            entity.<%= primaryKey.name %> = entity.<%= mapsIdAssoc.relationshipName %>!!.<%= mapsIdAssoc.otherEntity.primaryKey.name %>
            return entityManager.insert(entity)
        }
<%_ } _%>
        return super.save(entity)<% if (containsBagRelationships) { %>.flatMap { updateRelations(it) } <% } %>
    }

    <%_ if (containsBagRelationships) { _%>
    protected fun <S:<%= persistClass %>> updateRelations(entity: S): Mono<S> {
        <%_ relationships.filter(function(rel) {
            return (rel.relationshipManyToMany  && rel.ownerSide)
        }).forEach(function(rel, idx) { _%>
            <%_ if (idx === 0) { _%>
        val result = entityManager.updateLinkTable(<%= rel.relationshipName %>Link, entity.<%= primaryKey.name %>, entity.<%= rel.relationshipNamePlural %>?.map { it.<%= rel.otherEntity.primaryKey.name %> }).then()
            <%_ } else { _%>
        result = result.and(entityManager.updateLinkTable(<%= rel.relationshipName %>Link, entity.<%= primaryKey.name %>, entity.<%= rel.relationshipNamePlural %>?.map { it.<%= rel.otherEntity.primaryKey.name %> }))
            <%_ } _%>
        <%_ }); _%>
        return result.thenReturn(entity)
    }

    override fun deleteById(entityId: <%= primaryKey.type %>?): Mono<Void> {
        return deleteRelations(entityId).then(super.deleteById(entityId))
    }

    protected fun deleteRelations(entityId: <%= primaryKey.type %>?): Mono<Void> {
        <%_ relationships.filter(function(rel) {
                return (rel.relationshipManyToMany  && rel.ownerSide);
        }).forEach(function(rel, idx) { _%>
            <%_ if (idx === 0) { _%>
        return entityManager.deleteFromLinkTable(<%= rel.relationshipName %>Link, entityId)
            <%_ } else { _%>
                .and(entityManager.deleteFromLinkTable(<%= rel.relationshipName %>Link, entityId))
            <%_ } _%>
        <%_ }); _%>
    }
    <%_ } _%>
}
