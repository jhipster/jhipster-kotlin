<%#
 Copyright 2013-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License")
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= entityAbsolutePackage %>.repository

import java.util.Collections
import java.util.Optional
<%_ if (fieldsContainUUID) { _%>
import java.util.UUID
<%_ } _%>

import javax.persistence.EntityManager
import javax.persistence.PersistenceContext

import org.hibernate.annotations.QueryHints
import org.springframework.data.domain.Page
import org.springframework.data.domain.PageImpl

import <%= entityAbsolutePackage %>.domain.<%= persistClass %>

/**
 * Utility repository to load bag relationships based on https://vladmihalcea.com/hibernate-multiplebagfetchexception/
 */
class <%= entityClass %>RepositoryWithBagRelationshipsImpl(
    @PersistenceContext
    private val entityManager: EntityManager
): <%= entityClass %>RepositoryWithBagRelationships {
 
    override fun fetchBagRelationships(<%= entityInstance %>: Optional<<%= persistClass %>>): Optional<<%= persistClass %>> {
        return <%= entityInstance %>
<%_ for (const relationship of relationships.filter(relationship => relationship.bagRelationship)) { _%>
            .map(this::fetch<%= relationship.relationshipNameCapitalizedPlural %>)
<%_ } _%>
        
    }
 
    override fun fetchBagRelationships(<%= entityInstancePlural %>: Page<<%= persistClass %>>): Page<<%= persistClass %>> {
        return PageImpl<<%= persistClass %>>(fetchBagRelationships(<%= entityInstancePlural %>.content), <%= entityInstancePlural %>.pageable, <%= entityInstancePlural %>.totalElements)
    }
 
    override fun fetchBagRelationships(<%= entityInstancePlural %>: List<<%= persistClass %>>): MutableList<<%= persistClass %>> {
        return Optional
            .of(<%= entityInstancePlural %>)
<%_ for (const relationship of relationships.filter(relationship => relationship.bagRelationship)) { _%>
            .map(this::fetch<%= relationship.relationshipNameCapitalizedPlural %>)
<%_ } _%>
            .orElse(Collections.emptyList())
            .toMutableList()
    }
<%_ for (const relationship of relationships.filter(relationship => relationship.bagRelationship)) { _%>

    fun fetch<%= relationship.relationshipNameCapitalizedPlural %>(result: <%= persistClass %>): <%= persistClass %> {
        return entityManager
            .createQuery(
                "select <%= entityInstance %> from <%= persistClass %> <%= entityInstance %> left join fetch <%= entityInstance %>.<%= relationship.relationshipFieldNamePlural %> where <%= entityInstance %> is :<%= entityInstance %>",
                <%= persistClass %>::class.java
            )
            .setParameter("<%= entityInstance %>", result)
            .setHint(QueryHints.PASS_DISTINCT_THROUGH, false)
            .singleResult
    }

    fun fetch<%= relationship.relationshipNameCapitalizedPlural %>(<%= entityInstancePlural %>: List<<%= persistClass %>>): List<<%= persistClass %>> {
        val order = mutableMapOf<Any, Int>()
        <%= entityInstancePlural %>.indices.map {
            order[<%= entityInstancePlural %>[it].<%= primaryKey.name %> as Any] = it
        }
        val result = entityManager
            .createQuery(
                "select distinct <%= entityInstance %> from <%= persistClass %> <%= entityInstance %> left join fetch <%= entityInstance %>.<%= relationship.relationshipFieldNamePlural %> where <%= entityInstance %> in :<%= entityInstancePlural %>",
                <%= persistClass %>::class.java
            )
            .setParameter("<%= entityInstancePlural %>", <%= entityInstancePlural %>)
            .setHint(QueryHints.PASS_DISTINCT_THROUGH, false)
            .resultList
        return result.sortedBy { order[it] }
    }
<%_ } _%>
}
