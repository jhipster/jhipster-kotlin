<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_
    const instanceClass = restClass;
    const instanceType = restInstance;
    const mapper = entityInstance + 'Mapper';
    const entityListToDtoListReference = mapper + '.' + 'toDto';
    const entityToDtoReference = mapper + '::'+ 'toDto';
    const reactiveEntityToDto = (dtoMapstruct && !viaService) ? `.map(${entityToDtoReference})` : '';
_%>
<%_ if (jpaMetamodelFiltering) { _%>
    fun getAll<%= entityClassPlural %>(
        criteria: <%= entityClass %>Criteria<% if (pagination != 'no') { %>,
        @org.springdoc.api.annotations.ParameterObject pageable: Pageable
        <% if (reactive) { %>, request: ServerHttpRequest<% } %><% } %>
    ): ResponseEntity<MutableList<<%= instanceClass %>>> {
        log.debug("REST request to get <%= entityClassPlural %> by criteria: $criteria")
    <%_ if (paginationNo) { _%>
        val entityList = <%= entityInstance %>QueryService.findByCriteria(criteria)
        return ResponseEntity.ok().body(entityList)
    <%_ } else { _%>
        val page = <%= entityInstance %>QueryService.findByCriteria(criteria, pageable)
        val headers = PaginationUtil.generatePaginationHttpHeaders(<% if (!reactive) { %>ServletUriComponentsBuilder.fromCurrentRequest()<% } else { %>UriComponentsBuilder.fromHttpRequest(request)<% } %>, page)
        return ResponseEntity.ok().headers(headers).body(page.content)
    <%_ } _%>
    }

    /**
     * `GET  /<%= entityApiUrl %>/count}` : count all the <%= entityInstancePlural %>.
     *
     * @param criteria the criteria which the requested entities should match.
     * @return the [ResponseEntity] with status `200 (OK)` and the count in body.
     */
    @GetMapping("/<%= entityApiUrl %>/count")
    fun count<%= entityClassPlural %>(criteria: <%= entityClass %>Criteria): ResponseEntity<Long> {
        log.debug("REST request to count <%= entityClassPlural %> by criteria: $criteria")
        return ResponseEntity.ok().body(<%= entityInstance %>QueryService.countByCriteria(criteria))
    }
<% } else { %>
    <%_ if (paginationNo) { _%>
    fun getAll<%= entityClassPlural %>(<% if (fieldsContainNoOwnerOneToOne) { %>@RequestParam(required = false) filter: String?<% } %><% if (implementsEagerLoadApis && fieldsContainNoOwnerOneToOne) { %>,<% } %><% if (implementsEagerLoadApis) { %>@RequestParam(required = false, defaultValue = "false") eagerload: Boolean<% }%>): <% if (reactive) { %>Mono<<% } %>MutableList<<%= instanceClass %>><% if (reactive) { %>><% } %> {
        
        <%- include('get_all_stream_template', {viaService: viaService}); -%>

        <%_ 
            let elseCondition = false;
            for (const relationship of relationships) {
                if (relationship.relationshipOneToOne && !relationship.ownerSide) { 
                    elseCondition = true;
                }
            }

            if (elseCondition) {
        _%>
        else { 
        <%_ } _%>
            log.debug("REST request to get all <%= entityClassPlural %>")
            <% if (viaService) { %>
            return <%= entityInstance %>Service.findAll()<% if (reactive) { %>.collectList()<% } %>
            <% } else if (dtoMapstruct) { %>
            val <%= entityInstancePlural %> = <%= entityInstance %>Repository.findAll()
                <%_ if (reactive) { _%>
            return <%= entityInstancePlural %>.map(<%= entityToDtoReference %>).collectList()
                <%_ } else { _%>
            return <%= entityListToDtoListReference %>(<%= entityInstancePlural %>)
                <%_ } _%>
            <%_ } else if (implementsEagerLoadApis) { _%>
                if (eagerload) {
                    return <%= entityInstance %>Repository.findAllWithEagerRelationships()<% if (reactive) { %>.collectList()<% } %>
                } else {
                    return <%= entityInstance %>Repository.findAll()<% if (reactive) { %>.collectList()<% } %>
                }
            <%_ } else { _%>
            return <%= entityInstance %>Repository.findAll()<% if (reactive) { %>.collectList()<% } %>
            <%_ } _%>
        <%_ if (elseCondition) { _%>
        }
        <%_ } _%>
    <%_ } else { _%>
    fun getAll<%= entityClassPlural %>(@org.springdoc.api.annotations.ParameterObject pageable: Pageable<% if (reactive) { %>, request: ServerHttpRequest<% } %><% if (fieldsContainNoOwnerOneToOne) { %>, @RequestParam(required = false) filter: String?<% } %><% if (implementsEagerLoadApis) { %>, @RequestParam(required = false, defaultValue = "false") eagerload: Boolean<% } %>): <% if (reactive) { %>Mono<ResponseEntity<List<<%= instanceClass %>>>><% } else { %>ResponseEntity<List<<%= instanceClass %>>><% } %> {
        
        <%- include('get_all_stream_template', {viaService: viaService}); -%>

        <%_ 
            let elseCondition1 = false;
            for (const relationship of relationships) {
                if (relationship.relationshipOneToOne && !relationship.ownerSide) { 
                    elseCondition1 = true;
                }
            }

            if (elseCondition1) {
        _%>
        else { 
        <%_ } _%>
        log.debug("REST request to get a page of <%= entityClassPlural %>")
        <%_ if (reactive) { _%>
        return <%= entityInstance %><%= viaService ? 'Service.countAll' : 'Repository.count' %>()
            .zipWith(<%= entityInstance %><%= viaService ? 'Service.findAll' : 'Repository.findAllBy' %>(pageable)<%= reactiveEntityToDto %>.collectList())
            .map {
                ResponseEntity.ok().headers(
                    PaginationUtil.generatePaginationHttpHeaders(
                                UriComponentsBuilder.fromHttpRequest(request),
                                PageImpl(it.t2, pageable, it.t1)
                    )
                ).body(it.t2)
            }
        <%_ } else { _%>
            <%_ if (implementsEagerLoadApis) { _%>
                val page: Page<<%= instanceClass %>> = if (eagerload) {
                    <%= entityInstance %><%= viaService ? 'Service' : 'Repository' %>.findAllWithEagerRelationships(pageable)<%= reactiveEntityToDto %>
                } else {
                    <%= entityInstance %><%= viaService ? 'Service' : 'Repository' %>.findAll(pageable)<%= reactiveEntityToDto %>
                }
                val headers = PaginationUtil.generatePaginationHttpHeaders(<% if (reactive) { %>UriComponentsBuilder.fromHttpRequest(request)<% } else { %>ServletUriComponentsBuilder.fromCurrentRequest()<% } %>, page)
                <%_ } else { _%>
                val page = <%= entityInstance %><%= viaService ? 'Service' : 'Repository' %>.findAll(pageable)<%= reactiveEntityToDto %>
                val headers = PaginationUtil.generatePaginationHttpHeaders(<% if (reactive) { %>UriComponentsBuilder.fromHttpRequest(request)<% } else { %>ServletUriComponentsBuilder.fromCurrentRequest()<% } %>, page);
                <%_ } _%>
                return ResponseEntity.ok().headers(headers).body(page.content)
        <%_ } _%>

        <%_ if (elseCondition1) { _%>
        }
        <%_ } _%>
    <%_ } _%>
    }
<%_ } _%>
