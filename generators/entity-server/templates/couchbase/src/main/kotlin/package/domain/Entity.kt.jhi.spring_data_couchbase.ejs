<%#
Copyright 2013-2024 the original author or authors from the JHipster project.

This file is part of the JHipster project, see https://www.jhipster.tech/
for more information.

Licensed under the Apache License, Version 2.0 (the "License")
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-%>
<%#
This is a fragment file, it will be merged into to root template if available.
EJS fragments will process % delimiter tags in template and & delimiter tags in the merge process.
-%>

<&_ if (fragment.importSection) { -&>
<%_ if (!embedded) { _%>
import <%= packageName %>.config.ID_DELIMITER
import <%= packageName %>.domain.<%= persistClass %>.Companion.TYPE_NAME
import org.springframework.data.couchbase.core.mapping.id.GenerationStrategy
import org.springframework.data.annotation.Id
import org.springframework.data.couchbase.core.mapping.id.GeneratedValue
import org.springframework.data.couchbase.core.mapping.Document
import org.springframework.data.couchbase.repository.Collection
import org.springframework.data.annotation.TypeAlias
 <%_ } _%>
import org.springframework.data.couchbase.core.mapping.Field
  <%_ if (relationships.length > 0) { _%>
import com.fasterxml.jackson.annotation.JsonIgnore
import java.util.stream.Collectors
  <%_ } _%>
<&_ } -&>

<&_ if (fragment.annotationSection) { -&>
    <%_ if (!embedded) { _%>
@Document
@TypeAlias(TYPE_NAME)
@Collection(TYPE_NAME)
    <%_ } _%>
<&_ } -&>

<&_ if (fragment.classStaticFieldsSection) { -&>
<%_ if (!embedded) { _%>
    const val TYPE_NAME = "<%= entityInstance %>"
<%_ } _%>
<&_ } -&>

<%_ for (const field of fields) { _%>
<&_ if (fragment.field<%- field.fieldNameCapitalized %>AnnotationSection) { -&>
  <%_ if (field.id && !embedded) { _%>
    @Id
    <%_ if (field.id && !embedded) { _%>
    @GeneratedValue(strategy = GenerationStrategy.UNIQUE, delimiter = ID_DELIMITER)
    <%_ } _%>
  <%_ } else { _%>
    @Field
  <%_ } _%>
<&_ } -&>
<%_ } -%>

<%_ for (const field of fields.filter(field => field.fieldWithContentType)) { _%>
<&_ if (fragment.field<%- field.fieldNameCapitalized %>ContentTypeAnnotationSection) { -&>
    @Field
<&_ } -&>
<%_ } -%>

<%_/* for (const relationship of relationships) { _%>
<&_ if (fragment.relationship<%- relationship.relationshipNameCapitalized %>AnnotationSection) { -&>
  <%_ if (relationship.relationshipOneToMany) { _%>
    <%_ if (!relationship.otherEntity.embedded) { _%>
    @N1qlJoin(on = "lks.<%= relationship.relationshipFieldName %>=meta(rks).id", fetchType = FetchType.IMMEDIATE)
    <%_ } _%>

  <%_ } else if (relationship.relationshipManyToOne) { _%>
    <%_ if (!relationship.otherEntity.embedded) { _%>
    @N1qlJoin(on = "lks.<%= relationship.relationshipFieldName %>=meta(rks).id", fetchType = FetchType.IMMEDIATE)
    <%_ } _%>
  <%_ } else if (relationship.relationshipManyToMany) { _%>
    @N1qlJoin(on = "lks.<%= relationship.relationshipFieldNamePlural %>=meta(rks).id", fetchType = FetchType.IMMEDIATE)
  <%_ } else { _%>
    <%_ if (!relationship.otherEntity.embedded) { _%>
    @N1qlJoin(on = "lks.<%= relationship.relationshipFieldName %>=meta(rks).id", fetchType = FetchType.IMMEDIATE)
    <%_ } _%>
  <%_ } _%>

<&_ } -&>
<%_ } -%>
<% Commented out until N1qlJoin support is fixed */%>

<&_ if (fragment.classAdditionalRelationshipsSection) { -&>
    <%_ for (const relationship of relationships) { _%>
      <%_ if (!relationship.id && !relationship.otherEntity.embedded) { _%>
        <%_ if (relationship.collection) { _%>
    @JsonIgnore
    @Field("<%= relationship.relationshipFieldNamePlural %>")
    private var <%= relationship.relationshipFieldName %>Ids: MutableSet<String> = mutableSetOf(),
        <%_ } else if (relationship.ownerSide) { _%>
    @JsonIgnore
    @Field("<%= relationship.relationshipFieldName %>")
    private var <%= relationship.relationshipFieldName %>Id: <%= relationship.otherEntity.primaryKey.type %>? = null,
        <%_ } _%>
      <%_ } _%>
    <%_ } _%>
<&_ } -&>

<%_ for (const relationship of relationships) { _%>
<&_ if (fragment.relationship<%- relationship.relationshipNameCapitalized %>CustomAddSection) { -&>
    fun add<%= relationship.relationshipNameCapitalized %>(<%= relationship.otherEntityName %>: <%= relationship.otherEntity.persistClass %>) : <%= persistClass %>{
        this.<%= relationship.relationshipFieldNamePlural %>?.add(<%= relationship.otherEntityName %>)
      <%_ if (!relationship.otherEntity.embedded || embedded && relationship.ownerSide) { _%>
        <%_ if (!relationship.otherEntity.embedded) { _%>
        this.<%= relationship.relationshipFieldName %>Ids.add(<%= relationship.otherEntityName %>.<%= relationship.otherEntity.primaryKey.name %>!!)
        <%_ } _%>
        <%_ if (relationship.otherRelationship) { _%>
          <%_ if (!relationship.otherRelationship.collection) { _%>
        <%= relationship.otherEntityName %>.<%= relationship.otherRelationship.relationshipName %> = this
          <%_ } else if (relationship.otherRelationship.relationshipNamePlural && !relationship.otherEntityUser && relationship.otherRelationship.collection) { _%>
        <%= relationship.otherEntityName %>.<%= relationship.otherRelationship.relationshipNamePlural %>?.add(this)
          <%_ } _%>
        <%_ } _%>
      <%_ } _%>
        return this
    }
<&_ } -&>
<%_ } _%>

<%_ for (const relationship of relationships) { _%>
<&_ if (fragment.relationship<%- relationship.relationshipNameCapitalized %>CustomRemoveSection) { -&>
    fun remove<%= relationship.relationshipNameCapitalized %>(<%= relationship.otherEntityName %>: <%= relationship.otherEntity.persistClass %>): <%= persistClass %>  {
        this.<%= relationship.relationshipFieldNamePlural %>?.remove(<%= relationship.otherEntityName %>)
      <%_ if (!relationship.otherEntity.embedded || (embedded && relationship.ownerSide)) { _%>
        <%_ if (!relationship.otherEntity.embedded) { _%>
        this.<%= relationship.relationshipFieldName %>Ids.remove(<%= relationship.otherEntityName %>.<%= relationship.otherEntity.primaryKey.name %>!!)
        <%_ } _%>
        <%_ if (relationship.otherRelationship) { _%>
          <%_ if (!relationship.otherRelationship.collection) { _%>
        <%= relationship.otherEntityName %>.<%= relationship.otherRelationship.relationshipName %> = null
          <%_ } else if (!relationship.otherEntityUser && relationship.otherRelationship.collection) { _%>
        <%= relationship.otherEntityName %>.<%= relationship.otherRelationship.relationshipNamePlural %>?.remove(this)
          <%_ } _%>
        <%_ } _%>
      <%_ } _%>
        return this
    }
<&_ } -&>
<%_ } _%>
