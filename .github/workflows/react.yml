#
# Copyright the original author or authors from the JHipster project.
#
# This file is part of the JHipster project, see https://www.jhipster.tech/
# for more information.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: React
concurrency:
    # Group PRs by head_ref, push to main branch by commit id, and others branch by ref.
    group: ${{ github.workflow }}-${{ github.head_ref || (github.ref == 'refs/heads/main' && github.sha) || github.ref }}
    cancel-in-progress: true
on:
    push:
        branches:
            - main
    pull_request:
        types: [closed, opened, synchronize, reopened]
        branches:
            - '*'
jobs:
    build-matrix:
        runs-on: ubuntu-20.04
        outputs:
            matrix: ${{ steps.build.outputs.matrix }}
            client: ${{ steps.build.outputs.client }}
            server: ${{ steps.build.outputs.server }}
            any: ${{ steps.build.outputs.any }}
            workflow-angular: ${{ steps.build.outputs.workflow-angular }}
            workflow-react: ${{ steps.build.outputs.workflow-react }}
            workflow-vue: ${{ steps.build.outputs.workflow-vue }}
        steps:
            - name: 'SETUP: Checkout generator-jhipster-kotlin'
              uses: actions/checkout@v3
              with:
                  fetch-depth: 2
            - name: 'Build matrix'
              id: build
              uses: ./.github/actions/build-matrix
              with:
                  workflow-samples-file: react
    applications:
        name: ${{ matrix.name }}
        runs-on: ${{ matrix.os || 'ubuntu-20.04' }}
        needs: build-matrix
        defaults:
            run:
                working-directory: ${{ github.workspace }}/app
        if: >-
            !contains(github.event.head_commit.message, '[angular]') &&
            !contains(github.event.head_commit.message, '[vue]') &&
            !contains(github.event.pull_request.title, '[angular]') &&
            !contains(github.event.pull_request.title, '[vue]') &&
            !contains(github.event.head_commit.message, '[ci skip]') &&
            !contains(github.event.head_commit.message, '[skip ci]') &&
            !contains(github.event.pull_request.title, '[skip ci]') &&
            !contains(github.event.pull_request.title, '[ci skip]') &&
            github.event.action != 'closed' &&
            !contains(github.event.pull_request.labels.*.name, 'pr: skip-ci')
        timeout-minutes: 25
        strategy:
            fail-fast: false
            # Matrix available at https://github.com/jhipster/jhipster-kotlin/tree/main/test-integration/workflow-samples/
            matrix: ${{fromJson(needs.build-matrix.outputs.matrix)}}
        steps:
            #----------------------------------------------------------------------
            # Install all tools and check configuration
            #----------------------------------------------------------------------
            - name: 'SETUP: Checkout generator-jhipster-kotlin'
              uses: actions/checkout@v3
              with:
                  path: jhipster-kotlin
                  fetch-depth: 2
            - run: npm install
              working-directory: jhipster-kotlin
            # workspaces fork the process and lookup blueprints again, link globally to be findable
            - run: npm link
              if: matrix.workspaces == 'true'
              working-directory: jhipster-kotlin
            - uses: jhipster/actions/setup-runner@v0
              with:
                  node-version: 20
                  java-version: 11
                  binary-dir: ${{ github.workspace }}/jhipster-kotlin/cli
            - name: 'SETUP: environment'
              id: setup
              uses: ./jhipster-kotlin/.github/actions/setup
              with:
                  application-sample: ${{ matrix.jhi-app-sample || matrix.app-sample || 'jdl' }}
                  entities-sample: ${{ matrix.entity || 'none' }}
                  jdl-entities-sample: ${{ matrix.jdl-entity || '' }}
                  jdl-sample: ${{ matrix.jdl-samples || '' }}
                  application-environment: ${{ matrix.environment || 'prod' }}
                  application-packaging: ${{ (matrix.war == 1 && 'war') || 'jar' }}
            # Update global NPM for workspaces support
            #----------------------------------------------------------------------
            # Install JHipster and generate project+entities
            #----------------------------------------------------------------------
            - run: cli.cjs generate-sample --skip-jhipster-dependencies --skip-install --skip-ktlint-format ${{ matrix.extra-args }} ${{ matrix.new-extra-args }}
            - run: cli.cjs info
            #----------------------------------------------------------------------
            # Detect changes against base commit
            #----------------------------------------------------------------------
            - uses: jhipster/actions/compare-sample@v0
              id: compare
              if: >-
                  github.event.pull_request &&
                  !contains(github.event.pull_request.labels.*.name, 'pr: disable-compare')
              with:
                  generator-path: jhipster-kotlin
                  cmd: cli.cjs generate-sample --skip-jhipster-dependencies --skip-install --skip-ktlint-format ${{ matrix.extra-args }}
            #----------------------------------------------------------------------
            # Launch tests
            #----------------------------------------------------------------------
            - name: 'TESTS: backend'
              id: backend
              if: steps.compare.outputs.equals != 'true' && matrix.skip-backend-tests != 1 && needs.build-matrix.outputs.server != 'false'
              run: npm run ci:backend:test
              continue-on-error: ${{matrix.continue-on-backend-tests-error || false}}
              timeout-minutes: 20
            - name: 'PREPARE: npm install'
              if: steps.compare.outputs.equals != 'true'
              run: ${{ (matrix.workspaces == 'true' && 'npm') || './npmw' }} install
              timeout-minutes: 7
            - name: 'TESTS: packaging'
              if: steps.compare.outputs.equals != 'true'
              run: npm run ci:e2e:package
              timeout-minutes: 7
            - name: 'TESTS: Start docker-compose containers for e2e tests'
              if: steps.compare.outputs.equals != 'true'
              run: npm run ci:e2e:prepare
              timeout-minutes: 5
            - run: npm run preci:e2e:server:start --if-present
            - run: npm run ci:e2e:run --if-present
              id: e2e
              if: steps.compare.outputs.equals != 'true'
              timeout-minutes: 20
            # - name: 'TESTS: frontend'
            #  if: steps.compare.outputs.equals != 'true' && matrix.skip-frontend-tests != 1 && needs.build-matrix.outputs.client != 'false'
            #  run: npm run ci:frontend:test
            #  timeout-minutes: 8
            - name: 'BACKEND: Store failure logs'
              uses: actions/upload-artifact@v3
              if: always() && steps.backend.outcome == 'failure'
              with:
                  name: log-${{ matrix.name }}
                  path: ${{ steps.setup.outputs.application-path }}/**/reports/ktlint/**
            - name: 'E2E: Store failure screenshots'
              uses: actions/upload-artifact@v3
              if: always() && steps.e2e.outcome == 'failure'
              with:
                  name: screenshots-${{ matrix.name }}
                  path: ${{ steps.setup.outputs.application-path }}/**/cypress/screenshots
            - name: Dump docker logs
              if: always()
              uses: jwalton/gh-docker-logs@v2
    check-react:
        runs-on: ubuntu-latest
        needs: [applications]
        if: always()
        steps:
            - run: |
                  echo '${{ toJSON(needs) }}'
                  if [ 'skipped' == '${{ needs.applications.result }}' ] || [ 'success' == '${{ needs.applications.result }}' ] || [ 'closed' == '${{ github.event.action }}' ]; then
                    exit 0
                  fi
                  exit 1
